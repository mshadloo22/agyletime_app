{"version":3,"sources":["employee.js","team.js","knockout.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnxfile":"manage-teams.js","sourcesContent":[" function Employee() {\r\n    this.id = ko.observable(\"\");\r\n    this.first_name = ko.observable(\"\");\r\n    this.last_name = ko.observable(\"\");\r\n\r\n    this.full_name = ko.computed(\r\n        function() {\r\n            return this.first_name() + \" \" + this.last_name();\r\n        },\r\n        this\r\n    );\r\n    this.active = ko.observable(true);\r\n    this.email = ko.observable(\"\");\r\n    this.gender = ko.observable(\"\");\r\n    this.phone_one = ko.observable(\"\");\r\n    this.phone_two = ko.observable(\"\");\r\n    this.address = ko.observable(\"\");\r\n    this.post_code = ko.observable(\"\");\r\n    this.city = ko.observable(\"\");\r\n    this.pay_rate = ko.observable(\"\");\r\n    this.team_id = ko.observable(\"\");\r\n}\r\n\r\nEmployee.prototype.toJSON = function() {\r\n    return { user_id: this.id, first_name: this.first_name, last_name: this.last_name, email: this.email,\r\n        phone_one: this.phone_one, phone_two: this.phone_two, address: this.address, post_code: this.post_code,\r\n        gender: this.gender, city: this.city, pay_rate: this.pay_rate, team_id: this.team_id, active: this.active };\r\n};\r\n\r\nEmployee.prototype.addEmployee = function(user) {\r\n    this.id(user.id);\r\n    this.first_name(user.first_name);\r\n    this.last_name(user.last_name);\r\n\r\n    this.active(user.active);\r\n    this.email(user.email);\r\n    this.gender(user.gender);\r\n    this.phone_one(user.phone_one);\r\n    this.phone_two(user.phone_two);\r\n    this.address(user.address);\r\n    this.post_code(user.post_code);\r\n    if(user.city !== undefined && user.city !== null) {\r\n        this.city(user.city.city_name);\r\n    }\r\n    if(user.payrate.length != 0){\r\n        this.pay_rate(Math.round(user.payrate[0].pay_rate*100)/100);\r\n    }\r\n    this.team_id(user.team_id);\r\n\r\n    return this;\r\n};\r\n","function Team() {\r\n    this.id = ko.observable(\"\");\r\n    this.name = ko.observable(\"\");\r\n    this.description = ko.observable(\"\");\r\n    this.team_leader_id = ko.observable(\"\");\r\n    this.manager_id = ko.observable(\"\");\r\n\r\n    this.saved = ko.observable(true);\r\n}\r\n\r\nTeam.prototype.notSaved = function () {\r\n    this.saved(false);\r\n};\r\n\r\nTeam.prototype.addTeam = function (team) {\r\n    this.id(team.id);\r\n    this.name(team.name);\r\n    this.description(team.description);\r\n    this.team_leader_id(team.team_leader_id);\r\n    this.manager_id(team.manager_id);\r\n\r\n    return this;\r\n};\r\n\r\nTeam.prototype.save = function () {\r\n    var self = this;\r\n    self.saved(true);\r\n    $.post(\r\n        \"team/team\",\r\n        {data: ko.toJSON(self)},\r\n        function (returnedData) {\r\n            if (returnedData.result == 0) {\r\n                if (returnedData.data.team_id != 'undefined') {\r\n                    self.id(returnedData.data.team_id);\r\n                }\r\n            } else {\r\n                manage_teams_view_model.showErrorModal(returnedData.result, returnedData.message);\r\n                self.notSaved();\r\n            }\r\n        }\r\n    );\r\n};\r\n/**\r\n * status code:\r\n * 200: removable\r\n * 300: has team member,\r\n * 400: has roster\r\n */\r\nTeam.prototype.remove = function (callback, nameList) {\r\n    var self = this;\r\n    var SUCCESS = 0,\r\n        REMOVABLE = 200,\r\n        TEAM_HAS_USER = 300,\r\n        TEAM_HAS_ROSTER = 400;\r\n\r\n    if (typeof self.id() !== \"\" && self.id() !== \"\") {\r\n        $.ajax({\r\n            url: 'team/team',\r\n            data: {id: self.id()},\r\n            type: 'DELETE',\r\n            success: function (result) {\r\n                var result_status = result.result;\r\n\r\n                if (result_status == SUCCESS) {//Helper::jsonLoader(SUCCESS) == 0\r\n                    callback(REMOVABLE); //Team has been removed;\r\n                } else if (result_status == TEAM_HAS_USER) {//Helper::jsonLoader(TEAM_HAS_USER) == 300\r\n                    var userList = result.data;\r\n                    var nameList = '';\r\n                    for (var i = 0; i < userList.length; i++) {\r\n                        var user = userList[i];\r\n                        var fullName = user.first_name + \" \" + user.last_name;\r\n                        nameList += fullName + ', ';\r\n                    }\r\n                    nameList = nameList.slice(0, nameList.length - 2);//remove trailing comma\r\n                    callback(TEAM_HAS_USER, nameList); //Team can't be removed because it has users currently;\r\n                } else if(result_status == TEAM_HAS_ROSTER) {\r\n                    var rosterList = result.data;\r\n                    var rosterDateList = '<ul>';\r\n\r\n                    for (var i = 0; i < rosterList.length; i++) {\r\n                        var roster = rosterList[i];\r\n                        var period = roster.date_start.slice(0, 10) + \" --- \" + roster.date_ending.slice(0, 10);\r\n                        rosterDateList += '<li>' + period + '</li> ';\r\n                    }\r\n\r\n                    rosterDateList += '</ul>';\r\n                    console.log(\"rosterDateList: \", rosterDateList);\r\n                    callback(TEAM_HAS_ROSTER, rosterDateList);\r\n                }\r\n            },\r\n            error: function (error) {\r\n\r\n            }\r\n        });\r\n    } else {\r\n        callback(REMOVABLE);\r\n    }\r\n};\r\n\r\nTeam.prototype.toJSON = function () {\r\n    return {\r\n        id: this.id, name: this.name, description: this.description, team_leader_id: this.team_leader_id,\r\n        manager_id: this.manager_id\r\n    };\r\n};","function ManageTeamsViewModel() {\r\n    var self = this;\r\n\r\n    self.teams = ko.observableArray([]);\r\n    self.employees = ko.observableArray([]);\r\n\r\n    self.error_modal = {\r\n        error_message: ko.observable(),\r\n        error_code: ko.observable(),\r\n        show: ko.observable(false), /* Set to true to show initially */\r\n        body: ko.observable(),\r\n        header: ko.observable(),\r\n        onClose: function () {\r\n        }\r\n    };\r\n\r\n    self.showErrorModal = function (error_message, error_code) {\r\n        self.error_modal.show(true);\r\n        self.error_modal.error_message(error_message);\r\n        self.error_modal.error_code(error_code);\r\n\r\n        if (error_code < 500) {\r\n            self.error_modal.header(\"Notice\");\r\n            self.error_modal.body(\"Please Note:\");\r\n        } else if (error_code < 1000) {\r\n            self.error_modal.header(\"Warning\");\r\n            self.error_modal.body(\"Warning:\");\r\n        } else if (error_code < 1500) {\r\n            self.error_modal.header(\"Error\");\r\n            self.error_modal.body(\"The application has encountered an error:\");\r\n        } else {\r\n            self.error_modal.header(\"Fatal Error\");\r\n            self.error_modal.body(\"The application has encountered a fatal error:\");\r\n        }\r\n    };\r\n\r\n    self.createTeam = function () {\r\n        self.teams.push(new Team());\r\n    };\r\n\r\n    self.removeTeam = function (team) {\r\n        var REMOVABLE = 200,\r\n            TEAM_HAS_USER = 300,\r\n            TEAM_HAS_ROSTER = 400;\r\n\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"You will not be able to recover this team.\",\r\n            type: \"warning\",\r\n            showCancelButton: true,\r\n            confirmButtonColor: \"#DD6B55\",\r\n            confirmButtonText: \"Yes\",\r\n            closeOnConfirm: false\r\n        }, function () {\r\n            team.remove(function (status, message) {\r\n                if (status == REMOVABLE) {\r\n                    self.teams.remove(team);\r\n                    swal(\"Deleted!\", \"This team has been deleted.\", \"success\");\r\n                } else if (status == TEAM_HAS_ROSTER) {\r\n                    swal({\r\n                        title: \"Unsuccessful\",\r\n                        text: '<div style=\"text-align: left\"><h5 style=\"color:#DD6B55\">You have the following roster related to this team: </h5><br>' + message + '<br></div><h4>Do you wish to migrate these rosters to another team?</h4>',\r\n                        type: \"warning\",\r\n                        showCancelButton: true,\r\n                        confirmButtonColor: \"#DD6B55\",\r\n                        confirmButtonText: \"Yes\",\r\n                        closeOnConfirm: true,\r\n                        html: true\r\n                    }, function () {\r\n                        window.location = '/team/edit_roster_team/' + team.id();\r\n                    });\r\n                }\r\n                else if (status == TEAM_HAS_USER) {\r\n                    //pop up messages to show why it can't be removed;\r\n                    swal(\"Unsuccessful\", \"This team still has: \" + message +\r\n                        '. You have to deactivate all the members before removing the team.', \"error\");\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    $.getJSON(\"user/users\", [], function (allData) {\r\n        if (allData['result'] == 0) {\r\n            self.employees($.map(allData.data, function (val, key) {\r\n                var employee = new Employee();\r\n                return employee.addEmployee(val)\r\n            }));\r\n        }\r\n        $.getJSON(\"team/all-teams\", [], function (allData) {\r\n            if (allData['result'] == 0) {\r\n                self.teams($.map(allData.data, function (val, key) {\r\n                    var team = new Team();\r\n                    return team.addTeam(val)\r\n                }));\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/* Custom binding for making create team modal */\r\nko.bindingHandlers.createTeamModal = {\r\n    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n        var props = valueAccessor(),\r\n            vm = bindingContext.createChildContext(viewModel);\r\n        ko.utils.extend(vm, props);\r\n        vm.close = function () {\r\n            vm.show(false);\r\n            vm.onClose();\r\n        };\r\n        vm.action = function () {\r\n            vm.onAction();\r\n        };\r\n        ko.utils.toggleDomNodeCssClass(element, \"modal fade\", true);\r\n        ko.renderTemplate(\"createTeamModal\", vm, null, element);\r\n        var showHide = ko.computed(function () {\r\n            $(element).modal(vm.show() ? 'show' : 'hide');\r\n        });\r\n        return {\r\n            controlsDescendantBindings: true\r\n        };\r\n    }\r\n};\r\n\r\n/* Custom binding for making add user modal */\r\nko.bindingHandlers.bootstrapModal = {\r\n    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n        var props = valueAccessor(),\r\n            vm = bindingContext.createChildContext(viewModel);\r\n        ko.utils.extend(vm, props);\r\n        vm.close = function () {\r\n            vm.show(false);\r\n            vm.onClose();\r\n        };\r\n        vm.action = function () {\r\n            vm.onAction();\r\n        };\r\n        ko.utils.toggleDomNodeCssClass(element, \"modal fade\", true);\r\n        ko.renderTemplate(\"editUserModal\", vm, null, element);\r\n        var showHide = ko.computed(function () {\r\n            $(element).modal(vm.show() ? 'show' : 'hide');\r\n        });\r\n        return {\r\n            controlsDescendantBindings: true\r\n        };\r\n    }\r\n};\r\n\r\nvar manage_teams_view_model = new ManageTeamsViewModel();\r\n\r\nko.applyBindings(manage_teams_view_model);"],"sourceRoot":"/source/"}