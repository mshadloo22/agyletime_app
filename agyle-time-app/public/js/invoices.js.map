{"version":3,"sources":["bootstrap.datepicker.js","jquery.dataTables.js","dataTables.bootstrap.js","knockout.mapping-latest.js","datatables.js","knockout.js","knockout-modal.js"],"names":[],"mappingsicrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"invoices.js","sourcesContent":["/* =========================================================\r\n * bootstrap-datepicker.js\r\n * http://www.eyecon.ro/bootstrap-datepicker\r\n * =========================================================\r\n * Copyright 2012 Stefan Petre\r\n * Improvements by Andrew Rowls\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ========================================================= */\r\n\r\n!function( $ ) {\r\n\r\n\tfunction UTCDate(){\r\n\t\treturn new Date(Date.UTC.apply(Date, arguments));\r\n\t}\r\n\tfunction UTCToday(){\r\n\t\tvar today = new Date();\r\n\t\treturn UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());\r\n\t}\r\n\r\n\t// Picker object\r\n\r\n\tvar Datepicker = function(element, options) {\r\n\t\tvar that = this;\r\n\r\n\t\tthis.element = $(element);\r\n\t\tthis.language = options.language||this.element.data('date-language')||\"en\";\r\n\t\tthis.language = this.language in dates ? this.language : this.language.split('-')[0]; //Check if \"de-DE\" style date is available, if not language should fallback to 2 letter code eg \"de\"\r\n\t\tthis.language = this.language in dates ? this.language : \"en\";\r\n\t\tthis.isRTL = dates[this.language].rtl||false;\r\n\t\tthis.format = DPGlobal.parseFormat(options.format||this.element.data('date-format')||dates[this.language].format||'mm/dd/yyyy');\r\n\t\tthis.isInline = false;\r\n\t\tthis.isInput = this.element.is('input');\r\n\t\tthis.component = this.element.is('.date') ? this.element.find('.add-on') : false;\r\n\t\tthis.hasInput = this.component && this.element.find('input').length;\r\n\t\tif(this.component && this.component.length === 0)\r\n\t\t\tthis.component = false;\r\n\r\n\t\tthis._attachEvents();\r\n\r\n\t\tthis.forceParse = true;\r\n\t\tif ('forceParse' in options) {\r\n\t\t\tthis.forceParse = options.forceParse;\r\n\t\t} else if ('dateForceParse' in this.element.data()) {\r\n\t\t\tthis.forceParse = this.element.data('date-force-parse');\r\n\t\t}\r\n\r\n\r\n\t\tthis.picker = $(DPGlobal.template)\r\n\t\t\t\t\t\t\t.appendTo(this.isInline ? this.element : 'body')\r\n\t\t\t\t\t\t\t.on({\r\n\t\t\t\t\t\t\t\tclick: $.proxy(this.click, this),\r\n\t\t\t\t\t\t\t\tmousedown: $.proxy(this.mousedown, this)\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\tif(this.isInline) {\r\n\t\t\tthis.picker.addClass('datepicker-inline');\r\n\t\t} else {\r\n\t\t\tthis.picker.addClass('datepicker-dropdown dropdown-menu');\r\n\t\t}\r\n\t\tif (this.isRTL){\r\n\t\t\tthis.picker.addClass('datepicker-rtl');\r\n\t\t\tthis.picker.find('.prev i, .next i')\r\n\t\t\t\t\t\t.toggleClass('fa fa-arrow-left fa fa-arrow-right');\r\n\t\t}\r\n\t\t$(document).on('mousedown', function (e) {\r\n\t\t\t// Clicked outside the datepicker, hide it\r\n\t\t\tif ($(e.target).closest('.datepicker.datepicker-inline, .datepicker.datepicker-dropdown').length === 0) {\r\n\t\t\t\tthat.hide();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.autoclose = false;\r\n\t\tif ('autoclose' in options) {\r\n\t\t\tthis.autoclose = options.autoclose;\r\n\t\t} else if ('dateAutoclose' in this.element.data()) {\r\n\t\t\tthis.autoclose = this.element.data('date-autoclose');\r\n\t\t}\r\n\r\n\t\tthis.keyboardNavigation = true;\r\n\t\tif ('keyboardNavigation' in options) {\r\n\t\t\tthis.keyboardNavigation = options.keyboardNavigation;\r\n\t\t} else if ('dateKeyboardNavigation' in this.element.data()) {\r\n\t\t\tthis.keyboardNavigation = this.element.data('date-keyboard-navigation');\r\n\t\t}\r\n\r\n\t\tthis.viewMode = this.startViewMode = 0;\r\n\t\tswitch(options.startView || this.element.data('date-start-view')){\r\n\t\t\tcase 2:\r\n\t\t\tcase 'decade':\r\n\t\t\t\tthis.viewMode = this.startViewMode = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\tcase 'year':\r\n\t\t\t\tthis.viewMode = this.startViewMode = 1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tthis.todayBtn = (options.todayBtn||this.element.data('date-today-btn')||false);\r\n\t\tthis.todayHighlight = (options.todayHighlight||this.element.data('date-today-highlight')||false);\r\n\r\n\t\tthis.calendarWeeks = false;\r\n\t\tif ('calendarWeeks' in options) {\r\n\t\t\tthis.calendarWeeks = options.calendarWeeks;\r\n\t\t} else if ('dateCalendarWeeks' in this.element.data()) {\r\n\t\t\tthis.calendarWeeks = this.element.data('date-calendar-weeks');\r\n\t\t}\r\n\t\tif (this.calendarWeeks)\r\n\t\t\tthis.picker.find('tfoot th.today')\r\n\t\t\t\t\t\t.attr('colspan', function(i, val){\r\n\t\t\t\t\t\t\treturn parseInt(val) + 1;\r\n\t\t\t\t\t\t});\r\n\r\n\t\tthis.weekStart = ((options.weekStart||this.element.data('date-weekstart')||dates[this.language].weekStart||0) % 7);\r\n\t\tthis.weekEnd = ((this.weekStart + 6) % 7);\r\n\t\tthis.startDate = -Infinity;\r\n\t\tthis.endDate = Infinity;\r\n\t\tthis.daysOfWeekDisabled = [];\r\n\t\tthis.setStartDate(options.startDate||this.element.data('date-startdate'));\r\n\t\tthis.setEndDate(options.endDate||this.element.data('date-enddate'));\r\n\t\tthis.setDaysOfWeekDisabled(options.daysOfWeekDisabled||this.element.data('date-days-of-week-disabled'));\r\n\t\tthis.fillDow();\r\n\t\tthis.fillMonths();\r\n\t\tthis.update();\r\n\t\tthis.showMode();\r\n\r\n\t\tif(this.isInline) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t};\r\n\r\n\tDatepicker.prototype = {\r\n\t\tconstructor: Datepicker,\r\n\r\n\t\t_events: [],\r\n\t\t_attachEvents: function(){\r\n\t\t\tthis._detachEvents();\r\n\t\t\tif (this.isInput) { // single input\r\n\t\t\t\tthis._events = [\r\n\t\t\t\t\t[this.element, {\r\n\t\t\t\t\t\t// focus: $.proxy(this.show, this),\r\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),\r\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this),\r\n\t\t\t\t\t\tclick: $.proxy(this.show, this)\r\n\t\t\t\t\t}]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\telse if (this.component && this.hasInput){ // component: input + button\r\n\t\t\t\tthis._events = [\r\n\t\t\t\t\t// For components that are not readonly, allow keyboard nav\r\n\t\t\t\t\t[this.element.find('input'), {\r\n\t\t\t\t\t\tfocus: $.proxy(this.show, this),\r\n\t\t\t\t\t\tkeyup: $.proxy(this.update, this),\r\n\t\t\t\t\t\tkeydown: $.proxy(this.keydown, this)\r\n\t\t\t\t\t}],\r\n\t\t\t\t\t[this.component, {\r\n\t\t\t\t\t\tclick: $.proxy(this.show, this)\r\n\t\t\t\t\t}]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\t\t\t\telse if (this.element.is('div')) {  // inline datepicker\r\n\t\t\t\t\t\t\tthis.isInline = true;\r\n\t\t\t\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._events = [\r\n\t\t\t\t\t[this.element, {\r\n\t\t\t\t\t\tclick: $.proxy(this.show, this)\r\n\t\t\t\t\t}]\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\tfor (var i=0, el, ev; i<this._events.length; i++){\r\n\t\t\t\tel = this._events[i][0];\r\n\t\t\t\tev = this._events[i][1];\r\n\t\t\t\tel.on(ev);\r\n\t\t\t}\r\n\t\t},\r\n\t\t_detachEvents: function(){\r\n\t\t\tfor (var i=0, el, ev; i<this._events.length; i++){\r\n\t\t\t\tel = this._events[i][0];\r\n\t\t\t\tev = this._events[i][1];\r\n\t\t\t\tel.off(ev);\r\n\t\t\t}\r\n\t\t\tthis._events = [];\r\n\t\t},\r\n\r\n\t\tshow: function(e) {\r\n\t\t\tthis.picker.show();\r\n\t\t\tthis.height = this.component ? this.component.outerHeight() : this.element.outerHeight();\r\n\t\t\tthis.update();\r\n\t\t\tthis.place();\r\n\t\t\t$(window).on('resize', $.proxy(this.place, this));\r\n\t\t\tif (e ) {\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t\tthis.element.trigger({\r\n\t\t\t\ttype: 'show',\r\n\t\t\t\tdate: this.date\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\thide: function(e){\r\n\t\t\tif(this.isInline) return;\r\n\t\t\tif (!this.picker.is(':visible')) return;\r\n\t\t\tthis.picker.hide();\r\n\t\t\t$(window).off('resize', this.place);\r\n\t\t\tthis.viewMode = this.startViewMode;\r\n\t\t\tthis.showMode();\r\n\t\t\tif (!this.isInput) {\r\n\t\t\t\t$(document).off('mousedown', this.hide);\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tthis.forceParse &&\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.isInput && this.element.val() ||\r\n\t\t\t\t\tthis.hasInput && this.element.find('input').val()\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t\tthis.setValue();\r\n\t\t\tthis.element.trigger({\r\n\t\t\t\ttype: 'hide',\r\n\t\t\t\tdate: this.date\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tremove: function() {\r\n\t\t\tthis._detachEvents();\r\n\t\t\tthis.picker.remove();\r\n\t\t\tdelete this.element.data().datepicker;\r\n\t\t},\r\n\r\n\t\tgetDate: function() {\r\n\t\t\tvar d = this.getUTCDate();\r\n\t\t\treturn new Date(d.getTime() + (d.getTimezoneOffset()*60000));\r\n\t\t},\r\n\r\n\t\tgetUTCDate: function() {\r\n\t\t\treturn this.date;\r\n\t\t},\r\n\r\n\t\tsetDate: function(d) {\r\n\t\t\tthis.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset()*60000)));\r\n\t\t},\r\n\r\n\t\tsetUTCDate: function(d) {\r\n\t\t\tthis.date = d;\r\n\t\t\tthis.setValue();\r\n\t\t},\r\n\r\n\t\tsetValue: function() {\r\n\t\t\tvar formatted = this.getFormattedDate();\r\n\t\t\tif (!this.isInput) {\r\n\t\t\t\tif (this.component){\r\n\t\t\t\t\tthis.element.find('input').val(formatted);\r\n\t\t\t\t}\r\n\t\t\t\tthis.element.data('date', formatted);\r\n\t\t\t} else {\r\n\t\t\t\tthis.element.val(formatted);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetFormattedDate: function(format) {\r\n\t\t\tif (format === undefined)\r\n\t\t\t\tformat = this.format;\r\n\t\t\treturn DPGlobal.formatDate(this.date, format, this.language);\r\n\t\t},\r\n\r\n\t\tsetStartDate: function(startDate){\r\n\t\t\tthis.startDate = startDate||-Infinity;\r\n\t\t\tif (this.startDate !== -Infinity) {\r\n\t\t\t\tthis.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language);\r\n\t\t\t}\r\n\t\t\tthis.update();\r\n\t\t\tthis.updateNavArrows();\r\n\t\t},\r\n\r\n\t\tsetEndDate: function(endDate){\r\n\t\t\tthis.endDate = endDate||Infinity;\r\n\t\t\tif (this.endDate !== Infinity) {\r\n\t\t\t\tthis.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language);\r\n\t\t\t}\r\n\t\t\tthis.update();\r\n\t\t\tthis.updateNavArrows();\r\n\t\t},\r\n\r\n\t\tsetDaysOfWeekDisabled: function(daysOfWeekDisabled){\r\n\t\t\tthis.daysOfWeekDisabled = daysOfWeekDisabled||[];\r\n\t\t\tif (!$.isArray(this.daysOfWeekDisabled)) {\r\n\t\t\t\tthis.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\\s*/);\r\n\t\t\t}\r\n\t\t\tthis.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {\r\n\t\t\t\treturn parseInt(d, 10);\r\n\t\t\t});\r\n\t\t\tthis.update();\r\n\t\t\tthis.updateNavArrows();\r\n\t\t},\r\n\r\n\t\tplace: function(){\r\n\t\t\t\t\t\tif(this.isInline) return;\r\n\t\t\tvar zIndex = parseInt(this.element.parents().filter(function() {\r\n\t\t\t\t\t\t\treturn $(this).css('z-index') != 'auto';\r\n\t\t\t\t\t\t}).first().css('z-index'))+10;\r\n\t\t\tvar offset = this.component ? this.component.offset() : this.element.offset();\r\n\t\t\tvar height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true);\r\n\t\t\tthis.picker.css({\r\n\t\t\t\ttop: offset.top + height,\r\n\t\t\t\tleft: offset.left,\r\n\t\t\t\tzIndex: zIndex\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tupdate: function(){\r\n\t\t\tvar date, fromArgs = false;\r\n\t\t\tif(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {\r\n\t\t\t\tdate = arguments[0];\r\n\t\t\t\tfromArgs = true;\r\n\t\t\t} else {\r\n\t\t\t\tdate = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();\r\n\t\t\t}\r\n\r\n\t\t\tthis.date = DPGlobal.parseDate(date, this.format, this.language);\r\n\r\n\t\t\tif(fromArgs) this.setValue();\r\n\r\n\t\t\tif (this.date < this.startDate) {\r\n\t\t\t\tthis.viewDate = new Date(this.startDate);\r\n\t\t\t} else if (this.date > this.endDate) {\r\n\t\t\t\tthis.viewDate = new Date(this.endDate);\r\n\t\t\t} else {\r\n\t\t\t\tthis.viewDate = new Date(this.date);\r\n\t\t\t}\r\n\t\t\tthis.fill();\r\n\t\t},\r\n\r\n\t\tfillDow: function(){\r\n\t\t\tvar dowCnt = this.weekStart,\r\n\t\t\thtml = '<tr>';\r\n\t\t\tif(this.calendarWeeks){\r\n\t\t\t\tvar cell = '<th class=\"cw\">&nbsp;</th>';\r\n\t\t\t\thtml += cell;\r\n\t\t\t\tthis.picker.find('.datepicker-days thead tr:first-child').prepend(cell);\r\n\t\t\t}\r\n\t\t\twhile (dowCnt < this.weekStart + 7) {\r\n\t\t\t\thtml += '<th class=\"dow\">'+dates[this.language].daysMin[(dowCnt++)%7]+'</th>';\r\n\t\t\t}\r\n\t\t\thtml += '</tr>';\r\n\t\t\tthis.picker.find('.datepicker-days thead').append(html);\r\n\t\t},\r\n\r\n\t\tfillMonths: function(){\r\n\t\t\tvar html = '',\r\n\t\t\ti = 0;\r\n\t\t\twhile (i < 12) {\r\n\t\t\t\thtml += '<span class=\"month\">'+dates[this.language].monthsShort[i++]+'</span>';\r\n\t\t\t}\r\n\t\t\tthis.picker.find('.datepicker-months td').html(html);\r\n\t\t},\r\n\r\n\t\tfill: function() {\r\n\t\t\tvar d = new Date(this.viewDate),\r\n\t\t\t\tyear = d.getUTCFullYear(),\r\n\t\t\t\tmonth = d.getUTCMonth(),\r\n\t\t\t\tstartYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,\r\n\t\t\t\tstartMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity,\r\n\t\t\t\tendYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,\r\n\t\t\t\tendMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity,\r\n\t\t\t\tcurrentDate = this.date && this.date.valueOf(),\r\n\t\t\t\ttoday = new Date();\r\n\t\t\tthis.picker.find('.datepicker-days thead th.switch')\r\n\t\t\t\t\t\t.text(dates[this.language].months[month]+' '+year);\r\n\t\t\tthis.picker.find('tfoot th.today')\r\n\t\t\t\t\t\t.text(dates[this.language].today)\r\n\t\t\t\t\t\t.toggle(this.todayBtn !== false);\r\n\t\t\tthis.updateNavArrows();\r\n\t\t\tthis.fillMonths();\r\n\t\t\tvar prevMonth = UTCDate(year, month-1, 28,0,0,0,0),\r\n\t\t\t\tday = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());\r\n\t\t\tprevMonth.setUTCDate(day);\r\n\t\t\tprevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7)%7);\r\n\t\t\tvar nextMonth = new Date(prevMonth);\r\n\t\t\tnextMonth.setUTCDate(nextMonth.getUTCDate() + 42);\r\n\t\t\tnextMonth = nextMonth.valueOf();\r\n\t\t\tvar html = [];\r\n\t\t\tvar clsName;\r\n\t\t\twhile(prevMonth.valueOf() < nextMonth) {\r\n\t\t\t\tif (prevMonth.getUTCDay() == this.weekStart) {\r\n\t\t\t\t\thtml.push('<tr>');\r\n\t\t\t\t\tif(this.calendarWeeks){\r\n\t\t\t\t\t\t// ISO 8601: First week contains first thursday.\r\n\t\t\t\t\t\t// ISO also states week starts on Monday, but we can be more abstract here.\r\n\t\t\t\t\t\tvar\r\n\t\t\t\t\t\t\t// Start of current week: based on weekstart/current date\r\n\t\t\t\t\t\t\tws = new Date(+prevMonth + (this.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),\r\n\t\t\t\t\t\t\t// Thursday of this week\r\n\t\t\t\t\t\t\tth = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),\r\n\t\t\t\t\t\t\t// First Thursday of year, year from thursday\r\n\t\t\t\t\t\t\tyth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),\r\n\t\t\t\t\t\t\t// Calendar week: ms between thursdays, div ms per day, div 7 days\r\n\t\t\t\t\t\t\tcalWeek =  (th - yth) / 864e5 / 7 + 1;\r\n\t\t\t\t\t\thtml.push('<td class=\"cw\">'+ calWeek +'</td>');\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tclsName = '';\r\n\t\t\t\tif (prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month)) {\r\n\t\t\t\t\tclsName += ' old';\r\n\t\t\t\t} else if (prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month)) {\r\n\t\t\t\t\tclsName += ' new';\r\n\t\t\t\t}\r\n\t\t\t\t// Compare internal UTC date with local today, not UTC today\r\n\t\t\t\tif (this.todayHighlight &&\r\n\t\t\t\t\tprevMonth.getUTCFullYear() == today.getFullYear() &&\r\n\t\t\t\t\tprevMonth.getUTCMonth() == today.getMonth() &&\r\n\t\t\t\t\tprevMonth.getUTCDate() == today.getDate()) {\r\n\t\t\t\t\tclsName += ' today';\r\n\t\t\t\t}\r\n\t\t\t\tif (currentDate && prevMonth.valueOf() == currentDate) {\r\n\t\t\t\t\tclsName += ' active';\r\n\t\t\t\t}\r\n\t\t\t\tif (prevMonth.valueOf() < this.startDate || prevMonth.valueOf() > this.endDate ||\r\n\t\t\t\t\t$.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1) {\r\n\t\t\t\t\tclsName += ' disabled';\r\n\t\t\t\t}\r\n\t\t\t\thtml.push('<td class=\"day'+clsName+'\">'+prevMonth.getUTCDate() + '</td>');\r\n\t\t\t\tif (prevMonth.getUTCDay() == this.weekEnd) {\r\n\t\t\t\t\thtml.push('</tr>');\r\n\t\t\t\t}\r\n\t\t\t\tprevMonth.setUTCDate(prevMonth.getUTCDate()+1);\r\n\t\t\t}\r\n\t\t\tthis.picker.find('.datepicker-days tbody').empty().append(html.join(''));\r\n\t\t\tvar currentYear = this.date && this.date.getUTCFullYear();\r\n\r\n\t\t\tvar months = this.picker.find('.datepicker-months')\r\n\t\t\t\t\t\t.find('th:eq(1)')\r\n\t\t\t\t\t\t\t.text(year)\r\n\t\t\t\t\t\t\t.end()\r\n\t\t\t\t\t\t.find('span').removeClass('active');\r\n\t\t\tif (currentYear && currentYear == year) {\r\n\t\t\t\tmonths.eq(this.date.getUTCMonth()).addClass('active');\r\n\t\t\t}\r\n\t\t\tif (year < startYear || year > endYear) {\r\n\t\t\t\tmonths.addClass('disabled');\r\n\t\t\t}\r\n\t\t\tif (year == startYear) {\r\n\t\t\t\tmonths.slice(0, startMonth).addClass('disabled');\r\n\t\t\t}\r\n\t\t\tif (year == endYear) {\r\n\t\t\t\tmonths.slice(endMonth+1).addClass('disabled');\r\n\t\t\t}\r\n\r\n\t\t\thtml = '';\r\n\t\t\tyear = parseInt(year/10, 10) * 10;\r\n\t\t\tvar yearCont = this.picker.find('.datepicker-years')\r\n\t\t\t\t\t\t\t\t.find('th:eq(1)')\r\n\t\t\t\t\t\t\t\t\t.text(year + '-' + (year + 9))\r\n\t\t\t\t\t\t\t\t\t.end()\r\n\t\t\t\t\t\t\t\t.find('td');\r\n\t\t\tyear -= 1;\r\n\t\t\tfor (var i = -1; i < 11; i++) {\r\n\t\t\t\thtml += '<span class=\"year'+(i == -1 || i == 10 ? ' old' : '')+(currentYear == year ? ' active' : '')+(year < startYear || year > endYear ? ' disabled' : '')+'\">'+year+'</span>';\r\n\t\t\t\tyear += 1;\r\n\t\t\t}\r\n\t\t\tyearCont.html(html);\r\n\t\t},\r\n\r\n\t\tupdateNavArrows: function() {\r\n\t\t\tvar d = new Date(this.viewDate),\r\n\t\t\t\tyear = d.getUTCFullYear(),\r\n\t\t\t\tmonth = d.getUTCMonth();\r\n\t\t\tswitch (this.viewMode) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tif (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth()) {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth()) {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tif (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.prev').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'hidden'});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.picker.find('.next').css({visibility: 'visible'});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclick: function(e) {\r\n\t\t\te.stopPropagation();\r\n\t\t\te.preventDefault();\r\n\t\t\tvar target = $(e.target).closest('span, td, th');\r\n\t\t\tif (target.length == 1) {\r\n\t\t\t\tswitch(target[0].nodeName.toLowerCase()) {\r\n\t\t\t\t\tcase 'th':\r\n\t\t\t\t\t\tswitch(target[0].className) {\r\n\t\t\t\t\t\t\tcase 'switch':\r\n\t\t\t\t\t\t\t\tthis.showMode(1);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'prev':\r\n\t\t\t\t\t\t\tcase 'next':\r\n\t\t\t\t\t\t\t\tvar dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);\r\n\t\t\t\t\t\t\t\tswitch(this.viewMode){\r\n\t\t\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveMonth(this.viewDate, dir);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t\tthis.viewDate = this.moveYear(this.viewDate, dir);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.fill();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'today':\r\n\t\t\t\t\t\t\t\tvar date = new Date();\r\n\t\t\t\t\t\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\r\n\r\n\t\t\t\t\t\t\t\tthis.showMode(-2);\r\n\t\t\t\t\t\t\t\tvar which = this.todayBtn == 'linked' ? null : 'view';\r\n\t\t\t\t\t\t\t\tthis._setDate(date, which);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'span':\r\n\t\t\t\t\t\tif (!target.is('.disabled')) {\r\n\t\t\t\t\t\t\tthis.viewDate.setUTCDate(1);\r\n\t\t\t\t\t\t\tif (target.is('.month')) {\r\n\t\t\t\t\t\t\t\tvar month = target.parent().find('span').index(target);\r\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCMonth(month);\r\n\t\t\t\t\t\t\t\tthis.element.trigger({\r\n\t\t\t\t\t\t\t\t\ttype: 'changeMonth',\r\n\t\t\t\t\t\t\t\t\tdate: this.viewDate\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar year = parseInt(target.text(), 10)||0;\r\n\t\t\t\t\t\t\t\tthis.viewDate.setUTCFullYear(year);\r\n\t\t\t\t\t\t\t\tthis.element.trigger({\r\n\t\t\t\t\t\t\t\t\ttype: 'changeYear',\r\n\t\t\t\t\t\t\t\t\tdate: this.viewDate\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.showMode(-1);\r\n\t\t\t\t\t\t\tthis.fill();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'td':\r\n\t\t\t\t\t\tif (target.is('.day') && !target.is('.disabled')){\r\n\t\t\t\t\t\t\tvar day = parseInt(target.text(), 10)||1;\r\n\t\t\t\t\t\t\tvar year = this.viewDate.getUTCFullYear(),\r\n\t\t\t\t\t\t\t\tmonth = this.viewDate.getUTCMonth();\r\n\t\t\t\t\t\t\tif (target.is('.old')) {\r\n\t\t\t\t\t\t\t\tif (month === 0) {\r\n\t\t\t\t\t\t\t\t\tmonth = 11;\r\n\t\t\t\t\t\t\t\t\tyear -= 1;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tmonth -= 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if (target.is('.new')) {\r\n\t\t\t\t\t\t\t\tif (month == 11) {\r\n\t\t\t\t\t\t\t\t\tmonth = 0;\r\n\t\t\t\t\t\t\t\t\tyear += 1;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tmonth += 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._setDate(UTCDate(year, month, day,0,0,0,0));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setDate: function(date, which){\r\n\t\t\tif (!which || which == 'date')\r\n\t\t\t\tthis.date = date;\r\n\t\t\tif (!which || which  == 'view')\r\n\t\t\t\tthis.viewDate = date;\r\n\t\t\tthis.fill();\r\n\t\t\tthis.setValue();\r\n\t\t\tthis.element.trigger({\r\n\t\t\t\ttype: 'changeDate',\r\n\t\t\t\tdate: this.date\r\n\t\t\t});\r\n\t\t\tvar element;\r\n\t\t\tif (this.isInput) {\r\n\t\t\t\telement = this.element;\r\n\t\t\t} else if (this.component){\r\n\t\t\t\telement = this.element.find('input');\r\n\t\t\t}\r\n\t\t\tif (element) {\r\n\t\t\t\telement.change();\r\n\t\t\t\tif (this.autoclose && (!which || which == 'date')) {\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmoveMonth: function(date, dir){\r\n\t\t\tif (!dir) return date;\r\n\t\t\tvar new_date = new Date(date.valueOf()),\r\n\t\t\t\tday = new_date.getUTCDate(),\r\n\t\t\t\tmonth = new_date.getUTCMonth(),\r\n\t\t\t\tmag = Math.abs(dir),\r\n\t\t\t\tnew_month, test;\r\n\t\t\tdir = dir > 0 ? 1 : -1;\r\n\t\t\tif (mag == 1){\r\n\t\t\t\ttest = dir == -1\r\n\t\t\t\t\t// If going back one month, make sure month is not current month\r\n\t\t\t\t\t// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)\r\n\t\t\t\t\t? function(){ return new_date.getUTCMonth() == month; }\r\n\t\t\t\t\t// If going forward one month, make sure month is as expected\r\n\t\t\t\t\t// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)\r\n\t\t\t\t\t: function(){ return new_date.getUTCMonth() != new_month; };\r\n\t\t\t\tnew_month = month + dir;\r\n\t\t\t\tnew_date.setUTCMonth(new_month);\r\n\t\t\t\t// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11\r\n\t\t\t\tif (new_month < 0 || new_month > 11)\r\n\t\t\t\t\tnew_month = (new_month + 12) % 12;\r\n\t\t\t} else {\r\n\t\t\t\t// For magnitudes >1, move one month at a time...\r\n\t\t\t\tfor (var i=0; i<mag; i++)\r\n\t\t\t\t\t// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...\r\n\t\t\t\t\tnew_date = this.moveMonth(new_date, dir);\r\n\t\t\t\t// ...then reset the day, keeping it in the new month\r\n\t\t\t\tnew_month = new_date.getUTCMonth();\r\n\t\t\t\tnew_date.setUTCDate(day);\r\n\t\t\t\ttest = function(){ return new_month != new_date.getUTCMonth(); };\r\n\t\t\t}\r\n\t\t\t// Common date-resetting loop -- if date is beyond end of month, make it\r\n\t\t\t// end of month\r\n\t\t\twhile (test()){\r\n\t\t\t\tnew_date.setUTCDate(--day);\r\n\t\t\t\tnew_date.setUTCMonth(new_month);\r\n\t\t\t}\r\n\t\t\treturn new_date;\r\n\t\t},\r\n\r\n\t\tmoveYear: function(date, dir){\r\n\t\t\treturn this.moveMonth(date, dir*12);\r\n\t\t},\r\n\r\n\t\tdateWithinRange: function(date){\r\n\t\t\treturn date >= this.startDate && date <= this.endDate;\r\n\t\t},\r\n\r\n\t\tkeydown: function(e){\r\n\t\t\tif (this.picker.is(':not(:visible)')){\r\n\t\t\t\tif (e.keyCode == 27) // allow escape to hide and re-show picker\r\n\t\t\t\t\tthis.show();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar dateChanged = false,\r\n\t\t\t\tdir, day, month,\r\n\t\t\t\tnewDate, newViewDate;\r\n\t\t\tswitch(e.keyCode){\r\n\t\t\t\tcase 27: // escape\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 37: // left\r\n\t\t\t\tcase 39: // right\r\n\t\t\t\t\tif (!this.keyboardNavigation) break;\r\n\t\t\t\t\tdir = e.keyCode == 37 ? -1 : 1;\r\n\t\t\t\t\tif (e.ctrlKey){\r\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);\r\n\t\t\t\t\t} else if (e.shiftKey){\r\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewDate = new Date(this.date);\r\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir);\r\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);\r\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dateWithinRange(newDate)){\r\n\t\t\t\t\t\tthis.date = newDate;\r\n\t\t\t\t\t\tthis.viewDate = newViewDate;\r\n\t\t\t\t\t\tthis.setValue();\r\n\t\t\t\t\t\tthis.update();\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tdateChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 38: // up\r\n\t\t\t\tcase 40: // down\r\n\t\t\t\t\tif (!this.keyboardNavigation) break;\r\n\t\t\t\t\tdir = e.keyCode == 38 ? -1 : 1;\r\n\t\t\t\t\tif (e.ctrlKey){\r\n\t\t\t\t\t\tnewDate = this.moveYear(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveYear(this.viewDate, dir);\r\n\t\t\t\t\t} else if (e.shiftKey){\r\n\t\t\t\t\t\tnewDate = this.moveMonth(this.date, dir);\r\n\t\t\t\t\t\tnewViewDate = this.moveMonth(this.viewDate, dir);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewDate = new Date(this.date);\r\n\t\t\t\t\t\tnewDate.setUTCDate(this.date.getUTCDate() + dir * 7);\r\n\t\t\t\t\t\tnewViewDate = new Date(this.viewDate);\r\n\t\t\t\t\t\tnewViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dateWithinRange(newDate)){\r\n\t\t\t\t\t\tthis.date = newDate;\r\n\t\t\t\t\t\tthis.viewDate = newViewDate;\r\n\t\t\t\t\t\tthis.setValue();\r\n\t\t\t\t\t\tthis.update();\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tdateChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13: // enter\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 9: // tab\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (dateChanged){\r\n\t\t\t\tthis.element.trigger({\r\n\t\t\t\t\ttype: 'changeDate',\r\n\t\t\t\t\tdate: this.date\r\n\t\t\t\t});\r\n\t\t\t\tvar element;\r\n\t\t\t\tif (this.isInput) {\r\n\t\t\t\t\telement = this.element;\r\n\t\t\t\t} else if (this.component){\r\n\t\t\t\t\telement = this.element.find('input');\r\n\t\t\t\t}\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\telement.change();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tshowMode: function(dir) {\r\n\t\t\tif (dir) {\r\n\t\t\t\tthis.viewMode = Math.max(0, Math.min(2, this.viewMode + dir));\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t\tvitalets: fixing bug of very special conditions:\r\n\t\t\t\tjquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.\r\n\t\t\t\tMethod show() does not set display css correctly and datepicker is not shown.\r\n\t\t\t\tChanged to .css('display', 'block') solve the problem.\r\n\t\t\t\tSee https://github.com/vitalets/x-editable/issues/37\r\n\r\n\t\t\t\tIn jquery 1.7.2+ everything works fine.\r\n\t\t\t*/\r\n\t\t\t//this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();\r\n\t\t\tthis.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).css('display', 'block');\r\n\t\t\tthis.updateNavArrows();\r\n\t\t}\r\n\t};\r\n\r\n\t$.fn.datepicker = function ( option ) {\r\n\t\tvar args = Array.apply(null, arguments);\r\n\t\targs.shift();\r\n\t\treturn this.each(function () {\r\n\t\t\tvar $this = $(this),\r\n\t\t\t\tdata = $this.data('datepicker'),\r\n\t\t\t\toptions = typeof option == 'object' && option;\r\n\t\t\tif (!data) {\r\n\t\t\t\t$this.data('datepicker', (data = new Datepicker(this, $.extend({}, $.fn.datepicker.defaults,options))));\r\n\t\t\t}\r\n\t\t\tif (typeof option == 'string' && typeof data[option] == 'function') {\r\n\t\t\t\tdata[option].apply(data, args);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t$.fn.datepicker.defaults = {\r\n\t};\r\n\t$.fn.datepicker.Constructor = Datepicker;\r\n\tvar dates = $.fn.datepicker.dates = {\r\n\t\ten: {\r\n\t\t\tdays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\r\n\t\t    daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\r\n\t\t    daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\r\n\t\t    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n\t\t    monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\r\n\t\t    today: \"Today\"\r\n\t\t}\r\n\t};\r\n\r\n\tvar DPGlobal = {\r\n\t\tmodes: [\r\n\t\t\t{\r\n\t\t\t\tclsName: 'days',\r\n\t\t\t\tnavFnc: 'Month',\r\n\t\t\t\tnavStep: 1\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tclsName: 'months',\r\n\t\t\t\tnavFnc: 'FullYear',\r\n\t\t\t\tnavStep: 1\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tclsName: 'years',\r\n\t\t\t\tnavFnc: 'FullYear',\r\n\t\t\t\tnavStep: 10\r\n\t\t}],\r\n\t\tisLeapYear: function (year) {\r\n\t\t\treturn (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));\r\n\t\t},\r\n\t\tgetDaysInMonth: function (year, month) {\r\n\t\t\treturn [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\r\n\t\t},\r\n\t\tvalidParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,\r\n\t\tnonpunctuation: /[^ -\\/:-@\\[\\u3400-\\u9fff-`{-~\\t\\n\\r]+/g,\r\n\t\tparseFormat: function(format){\r\n\t\t\t// IE treats \\0 as a string end in inputs (truncating the value),\r\n\t\t\t// so it's a bad format delimiter, anyway\r\n\t\t\tvar separators = format.replace(this.validParts, '\\0').split('\\0'),\r\n\t\t\t\tparts = format.match(this.validParts);\r\n\t\t\tif (!separators || !separators.length || !parts || parts.length === 0){\r\n\t\t\t\tthrow new Error(\"Invalid date format.\");\r\n\t\t\t}\r\n\t\t\treturn {separators: separators, parts: parts};\r\n\t\t},\r\n\t\tparseDate: function(date, format, language) {\r\n\t\t\tif (date instanceof Date) return date;\r\n\t\t\tif (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(date)) {\r\n\t\t\t\tvar part_re = /([\\-+]\\d+)([dmwy])/,\r\n\t\t\t\t\tparts = date.match(/([\\-+]\\d+)([dmwy])/g),\r\n\t\t\t\t\tpart, dir;\r\n\t\t\t\tdate = new Date();\r\n\t\t\t\tfor (var i=0; i<parts.length; i++) {\r\n\t\t\t\t\tpart = part_re.exec(parts[i]);\r\n\t\t\t\t\tdir = parseInt(part[1]);\r\n\t\t\t\t\tswitch(part[2]){\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'm':\r\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'w':\r\n\t\t\t\t\t\t\tdate.setUTCDate(date.getUTCDate() + dir * 7);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'y':\r\n\t\t\t\t\t\t\tdate = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\r\n\t\t\t}\r\n\t\t\tvar parts = date && date.match(this.nonpunctuation) || [],\r\n\t\t\t\tdate = new Date(),\r\n\t\t\t\tparsed = {},\r\n\t\t\t\tsetters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],\r\n\t\t\t\tsetters_map = {\r\n\t\t\t\t\tyyyy: function(d,v){ return d.setUTCFullYear(v); },\r\n\t\t\t\t\tyy: function(d,v){ return d.setUTCFullYear(2000+v); },\r\n\t\t\t\t\tm: function(d,v){\r\n\t\t\t\t\t\tv -= 1;\r\n\t\t\t\t\t\twhile (v<0) v += 12;\r\n\t\t\t\t\t\tv %= 12;\r\n\t\t\t\t\t\td.setUTCMonth(v);\r\n\t\t\t\t\t\twhile (d.getUTCMonth() != v)\r\n\t\t\t\t\t\t\td.setUTCDate(d.getUTCDate()-1);\r\n\t\t\t\t\t\treturn d;\r\n\t\t\t\t\t},\r\n\t\t\t\t\td: function(d,v){ return d.setUTCDate(v); }\r\n\t\t\t\t},\r\n\t\t\t\tval, filtered, part;\r\n\t\t\tsetters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];\r\n\t\t\tsetters_map['dd'] = setters_map['d'];\r\n\t\t\tdate = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\r\n\t\t\tvar fparts = format.parts.slice();\r\n\t\t\t// Remove noop parts\r\n\t\t\tif (parts.length != fparts.length) {\r\n\t\t\t\tfparts = $(fparts).filter(function(i,p){\r\n\t\t\t\t\treturn $.inArray(p, setters_order) !== -1;\r\n\t\t\t\t}).toArray();\r\n\t\t\t}\r\n\t\t\t// Process remainder\r\n\t\t\tif (parts.length == fparts.length) {\r\n\t\t\t\tfor (var i=0, cnt = fparts.length; i < cnt; i++) {\r\n\t\t\t\t\tval = parseInt(parts[i], 10);\r\n\t\t\t\t\tpart = fparts[i];\r\n\t\t\t\t\tif (isNaN(val)) {\r\n\t\t\t\t\t\tswitch(part) {\r\n\t\t\t\t\t\t\tcase 'MM':\r\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].months).filter(function(){\r\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),\r\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);\r\n\t\t\t\t\t\t\t\t\treturn m == p;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].months) + 1;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'M':\r\n\t\t\t\t\t\t\t\tfiltered = $(dates[language].monthsShort).filter(function(){\r\n\t\t\t\t\t\t\t\t\tvar m = this.slice(0, parts[i].length),\r\n\t\t\t\t\t\t\t\t\t\tp = parts[i].slice(0, m.length);\r\n\t\t\t\t\t\t\t\t\treturn m == p;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tval = $.inArray(filtered[0], dates[language].monthsShort) + 1;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tparsed[part] = val;\r\n\t\t\t\t}\r\n\t\t\t\tfor (var i=0, s; i<setters_order.length; i++){\r\n\t\t\t\t\ts = setters_order[i];\r\n\t\t\t\t\tif (s in parsed && !isNaN(parsed[s]))\r\n\t\t\t\t\t\tsetters_map[s](date, parsed[s]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn date;\r\n\t\t},\r\n\t\tformatDate: function(date, format, language){\r\n\t\t\tvar val = {\r\n\t\t\t\td: date.getUTCDate(),\r\n\t\t\t\tD: dates[language].daysShort[date.getUTCDay()],\r\n\t\t\t\tDD: dates[language].days[date.getUTCDay()],\r\n\t\t\t\tm: date.getUTCMonth() + 1,\r\n\t\t\t\tM: dates[language].monthsShort[date.getUTCMonth()],\r\n\t\t\t\tMM: dates[language].months[date.getUTCMonth()],\r\n\t\t\t\tyy: date.getUTCFullYear().toString().substring(2),\r\n\t\t\t\tyyyy: date.getUTCFullYear()\r\n\t\t\t};\r\n\t\t\tval.dd = (val.d < 10 ? '0' : '') + val.d;\r\n\t\t\tval.mm = (val.m < 10 ? '0' : '') + val.m;\r\n\t\t\tvar date = [],\r\n\t\t\t\tseps = $.extend([], format.separators);\r\n\t\t\tfor (var i=0, cnt = format.parts.length; i < cnt; i++) {\r\n\t\t\t\tif (seps.length)\r\n\t\t\t\t\tdate.push(seps.shift());\r\n\t\t\t\tdate.push(val[format.parts[i]]);\r\n\t\t\t}\r\n\t\t\treturn date.join('');\r\n\t\t},\r\n\t\theadTemplate: '<thead>'+\r\n\t\t\t\t\t\t\t'<tr>'+\r\n\t\t\t\t\t\t\t\t'<th class=\"prev\"><i class=\"fa fa-arrow-left\"/></th>'+\r\n\t\t\t\t\t\t\t\t'<th colspan=\"5\" class=\"switch\"></th>'+\r\n\t\t\t\t\t\t\t\t'<th class=\"next\"><i class=\"fa fa-arrow-right\"/></th>'+\r\n\t\t\t\t\t\t\t'</tr>'+\r\n\t\t\t\t\t\t'</thead>',\r\n\t\tcontTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\r\n\t\tfootTemplate: '<tfoot><tr><th colspan=\"7\" class=\"today\"></th></tr></tfoot>'\r\n\t};\r\n\tDPGlobal.template = '<div class=\"datepicker\">'+\r\n\t\t\t\t\t\t\t'<div class=\"datepicker-days\">'+\r\n\t\t\t\t\t\t\t\t'<table class=\" table-condensed\">'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\r\n\t\t\t\t\t\t\t\t\t'<tbody></tbody>'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\r\n\t\t\t\t\t\t\t\t'</table>'+\r\n\t\t\t\t\t\t\t'</div>'+\r\n\t\t\t\t\t\t\t'<div class=\"datepicker-months\">'+\r\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\r\n\t\t\t\t\t\t\t\t'</table>'+\r\n\t\t\t\t\t\t\t'</div>'+\r\n\t\t\t\t\t\t\t'<div class=\"datepicker-years\">'+\r\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\r\n\t\t\t\t\t\t\t\t\tDPGlobal.footTemplate+\r\n\t\t\t\t\t\t\t\t'</table>'+\r\n\t\t\t\t\t\t\t'</div>'+\r\n\t\t\t\t\t\t'</div>';\r\n\r\n\t$.fn.datepicker.DPGlobal = DPGlobal;\r\n\r\n}( window.jQuery );\r\n","/*! DataTables 1.10.0\r\n * ©2008-2014 SpryMedia Ltd - datatables.net/license\r\n */\r\n\r\n/**\r\n * @summary     DataTables\r\n * @description Paginate, search and order HTML tables\r\n * @version     1.10.0\r\n * @file        jquery.dataTables.js\r\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\r\n * @contact     www.sprymedia.co.uk/contact\r\n * @copyright   Copyright 2008-2014 SpryMedia Ltd.\r\n *\r\n * This source file is free software, available under the following license:\r\n *   MIT license - http://datatables.net/license\r\n *\r\n * This source file is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\r\n *\r\n * For details please refer to: http://www.datatables.net\r\n */\r\n\r\n/*jslint evil: true, undef: true, browser: true */\r\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidateRow,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\r\n\r\n(/** @lends <global> */function( window, document, undefined ) {\r\n\r\n    (function( factory ) {\r\n        \"use strict\";\r\n\r\n        if ( typeof define === 'function' && define.amd ) {\r\n            // Define as an AMD module if possible\r\n            define( 'datatables', ['jquery'], factory );\r\n        }\r\n        else if ( typeof exports === 'object' ) {\r\n            // Node/CommonJS\r\n            factory( require( 'jquery' ) );\r\n        }\r\n        else if ( jQuery && !jQuery.fn.dataTable ) {\r\n            // Define using browser globals otherwise\r\n            // Prevent multiple instantiations if the script is loaded twice\r\n            factory( jQuery );\r\n        }\r\n    }\r\n    (/** @lends <global> */function( $ ) {\r\n        \"use strict\";\r\n\r\n        /**\r\n         * DataTables is a plug-in for the jQuery Javascript library. It is a highly\r\n         * flexible tool, based upon the foundations of progressive enhancement,\r\n         * which will add advanced interaction controls to any HTML table. For a\r\n         * full list of features please refer to\r\n         * [DataTables.net](href=\"http://datatables.net).\r\n         *\r\n         * Note that the `DataTable` object is not a global variable but is aliased\r\n         * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\r\n         * be  accessed.\r\n         *\r\n         *  @class\r\n         *  @param {object} [init={}] Configuration object for DataTables. Options\r\n         *    are defined by {@link DataTable.defaults}\r\n         *  @requires jQuery 1.7+\r\n         *\r\n         *  @example\r\n         *    // Basic initialisation\r\n         *    $(document).ready( function {\r\n\t *      $('#example').dataTable();\r\n\t *    } );\r\n         *\r\n         *  @example\r\n         *    // Initialisation with configuration options - in this case, disable\r\n         *    // pagination and sorting.\r\n         *    $(document).ready( function {\r\n\t *      $('#example').dataTable( {\r\n\t *        \"paginate\": false,\r\n\t *        \"sort\": false\r\n\t *      } );\r\n\t *    } );\r\n         */\r\n        var DataTable;\r\n\r\n\r\n        /*\r\n         * It is useful to have variables which are scoped locally so only the\r\n         * DataTables functions can access them and they don't leak into global space.\r\n         * At the same time these functions are often useful over multiple files in the\r\n         * core and API, so we list, or at least document, all variables which are used\r\n         * by DataTables as private variables here. This also ensures that there is no\r\n         * clashing of variable names and that they can easily referenced for reuse.\r\n         */\r\n\r\n\r\n        // Defined else where\r\n        //  _selector_run\r\n        //  _selector_opts\r\n        //  _selector_first\r\n        //  _selector_row_indexes\r\n\r\n        var _ext; // DataTable.ext\r\n        var _Api; // DataTable.Api\r\n        var _api_register; // DataTable.Api.register\r\n        var _api_registerPlural; // DataTable.Api.registerPlural\r\n\r\n        var _re_dic = {};\r\n        var _re_new_lines = /[\\r\\n]/g;\r\n        var _re_html = /<.*?>/g;\r\n        var _re_date_start = /^[\\d\\+\\-a-zA-Z]/;\r\n\r\n        // Escape regular expression special characters\r\n        var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\r\n\r\n        // U+2009 is thin space and U+202F is narrow no-break space, both used in many\r\n        // standards as thousands separators\r\n        var _re_formatted_numeric = /[',$£€¥%\\u2009\\u202F]/g;\r\n\r\n\r\n        var _empty = function ( d ) {\r\n            return !d || d === '-' ? true : false;\r\n        };\r\n\r\n\r\n        var _intVal = function ( s ) {\r\n            var integer = parseInt( s, 10 );\r\n            return !isNaN(integer) && isFinite(s) ? integer : null;\r\n        };\r\n\r\n        // Convert from a formatted number with characters other than `.` as the\r\n        // decimal place, to a Javascript number\r\n        var _numToDecimal = function ( num, decimalPoint ) {\r\n            // Cache created regular expressions for speed as this function is called often\r\n            if ( ! _re_dic[ decimalPoint ] ) {\r\n                _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\r\n            }\r\n            return typeof num === 'string' ?\r\n                num.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\r\n                num;\r\n        };\r\n\r\n\r\n        var _isNumber = function ( d, decimalPoint, formatted ) {\r\n            var strType = typeof d === 'string';\r\n\r\n            if ( decimalPoint && strType ) {\r\n                d = _numToDecimal( d, decimalPoint );\r\n            }\r\n\r\n            if ( formatted && strType ) {\r\n                d = d.replace( _re_formatted_numeric, '' );\r\n            }\r\n\r\n            return !d || d==='-' || (!isNaN( parseFloat(d) ) && isFinite( d ));\r\n        };\r\n\r\n\r\n        // A string without HTML in it can be considered to be HTML still\r\n        var _isHtml = function ( d ) {\r\n            return !d || typeof d === 'string';\r\n        };\r\n\r\n\r\n        var _htmlNumeric = function ( d, decimalPoint, formatted ) {\r\n            if ( _empty( d ) ) {\r\n                return true;\r\n            }\r\n\r\n            var html = _isHtml( d );\r\n            return ! html ?\r\n                null :\r\n                _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\r\n                    true :\r\n                    null;\r\n        };\r\n\r\n\r\n        var _pluck = function ( a, prop, prop2 ) {\r\n            var out = [];\r\n            var i=0, ien=a.length;\r\n\r\n            // Could have the test in the loop for slightly smaller code, but speed\r\n            // is essential here\r\n            if ( prop2 !== undefined ) {\r\n                for ( ; i<ien ; i++ ) {\r\n                    if ( a[i] && a[i][ prop ] ) {\r\n                        out.push( a[i][ prop ][ prop2 ] );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for ( ; i<ien ; i++ ) {\r\n                    if ( a[i] ) {\r\n                        out.push( a[i][ prop ] );\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        // Basically the same as _pluck, but rather than looping over `a` we use `order`\r\n        // as the indexes to pick from `a`\r\n        var _pluck_order = function ( a, order, prop, prop2 )\r\n        {\r\n            var out = [];\r\n            var i=0, ien=order.length;\r\n\r\n            // Could have the test in the loop for slightly smaller code, but speed\r\n            // is essential here\r\n            if ( prop2 !== undefined ) {\r\n                for ( ; i<ien ; i++ ) {\r\n                    out.push( a[ order[i] ][ prop ][ prop2 ] );\r\n                }\r\n            }\r\n            else {\r\n                for ( ; i<ien ; i++ ) {\r\n                    out.push( a[ order[i] ][ prop ] );\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _range = function ( len, start )\r\n        {\r\n            var out = [];\r\n            var end;\r\n\r\n            if ( start === undefined ) {\r\n                start = 0;\r\n                end = len;\r\n            }\r\n            else {\r\n                end = start;\r\n                start = len;\r\n            }\r\n\r\n            for ( var i=start ; i<end ; i++ ) {\r\n                out.push( i );\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _stripHtml = function ( d ) {\r\n            return d.replace( _re_html, '' );\r\n        };\r\n\r\n\r\n        /**\r\n         * Find the unique elements in a source array.\r\n         *\r\n         * @param  {array} src Source array\r\n         * @return {array} Array of unique items\r\n         * @ignore\r\n         */\r\n        var _unique = function ( src )\r\n        {\r\n            // A faster unique method is to use object keys to identify used values,\r\n            // but this doesn't work with arrays or objects, which we must also\r\n            // consider. See jsperf.com/compare-array-unique-versions/4 for more\r\n            // information.\r\n            var\r\n                out = [],\r\n                val,\r\n                i, ien=src.length,\r\n                j, k=0;\r\n\r\n            again: for ( i=0 ; i<ien ; i++ ) {\r\n                val = src[i];\r\n\r\n                for ( j=0 ; j<k ; j++ ) {\r\n                    if ( out[j] === val ) {\r\n                        continue again;\r\n                    }\r\n                }\r\n\r\n                out.push( val );\r\n                k++;\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Create a mapping object that allows camel case parameters to be looked up\r\n         * for their Hungarian counterparts. The mapping is stored in a private\r\n         * parameter called `_hungarianMap` which can be accessed on the source object.\r\n         *  @param {object} o\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnHungarianMap ( o )\r\n        {\r\n            var\r\n                hungarian = 'a aa ai ao as b fn i m o s ',\r\n                match,\r\n                newKey,\r\n                map = {};\r\n\r\n            $.each( o, function (key, val) {\r\n                match = key.match(/^([^A-Z]+?)([A-Z])/);\r\n\r\n                if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\r\n                {\r\n                    newKey = key.replace( match[0], match[2].toLowerCase() );\r\n                    map[ newKey ] = key;\r\n\r\n                    //console.log( key, match );\r\n                    if ( match[1] === 'o' )\r\n                    {\r\n                        _fnHungarianMap( o[key] );\r\n                    }\r\n                }\r\n            } );\r\n\r\n            o._hungarianMap = map;\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert from camel case parameters to Hungarian, based on a Hungarian map\r\n         * created by _fnHungarianMap.\r\n         *  @param {object} src The model object which holds all parameters that can be\r\n         *    mapped.\r\n         *  @param {object} user The object to convert from camel case to Hungarian.\r\n         *  @param {boolean} force When set to `true`, properties which already have a\r\n         *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n         *    won't be.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCamelToHungarian ( src, user, force )\r\n        {\r\n            if ( ! src._hungarianMap ) {\r\n                _fnHungarianMap( src );\r\n            }\r\n\r\n            var hungarianKey;\r\n\r\n            $.each( user, function (key, val) {\r\n                hungarianKey = src._hungarianMap[ key ];\r\n\r\n                if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\r\n                {\r\n                    // For objects, we need to buzz down into the object to copy parameters\r\n                    if ( hungarianKey.charAt(0) === 'o' )\r\n                    {\r\n                        // Copy the camelCase options over to the hungarian\r\n                        if ( ! user[ hungarianKey ] ) {\r\n                            user[ hungarianKey ] = {};\r\n                        }\r\n                        $.extend( true, user[hungarianKey], user[key] );\r\n\r\n                        _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\r\n                    }\r\n                    else {\r\n                        user[hungarianKey] = user[ key ];\r\n                    }\r\n                }\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Language compatibility - when certain options are given, and others aren't, we\r\n         * need to duplicate the values over, in order to provide backwards compatibility\r\n         * with older language files.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLanguageCompat( lang )\r\n        {\r\n            var defaults = DataTable.defaults.oLanguage;\r\n            var zeroRecords = lang.sZeroRecords;\r\n\r\n            /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\r\n             * sZeroRecords - assuming that is given.\r\n             */\r\n            if ( ! lang.sEmptyTable && zeroRecords &&\r\n                defaults.sEmptyTable === \"No data available in table\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\r\n            }\r\n\r\n            /* Likewise with loading records */\r\n            if ( ! lang.sLoadingRecords && zeroRecords &&\r\n                defaults.sLoadingRecords === \"Loading...\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\r\n            }\r\n\r\n            // Old parameter name of the thousands separator mapped onto the new\r\n            if ( lang.sInfoThousands ) {\r\n                lang.sThousands = lang.sInfoThousands;\r\n            }\r\n\r\n            var decimal = lang.sDecimal;\r\n            if ( decimal ) {\r\n                _addNumericSort( decimal );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Map one parameter onto another\r\n         *  @param {object} o Object to map\r\n         *  @param {*} knew The new parameter name\r\n         *  @param {*} old The old parameter name\r\n         */\r\n        var _fnCompatMap = function ( o, knew, old ) {\r\n            if ( o[ knew ] !== undefined ) {\r\n                o[ old ] = o[ knew ];\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Provide backwards compatibility for the main DT options. Note that the new\r\n         * options are mapped onto the old parameters, so this is an external interface\r\n         * change only.\r\n         *  @param {object} init Object to map\r\n         */\r\n        function _fnCompatOpts ( init )\r\n        {\r\n            _fnCompatMap( init, 'ordering',      'bSort' );\r\n            _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\r\n            _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\r\n            _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\r\n            _fnCompatMap( init, 'order',         'aaSorting' );\r\n            _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\r\n            _fnCompatMap( init, 'paging',        'bPaginate' );\r\n            _fnCompatMap( init, 'pagingType',    'sPaginationType' );\r\n            _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\r\n            _fnCompatMap( init, 'searching',     'bFilter' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Provide backwards compatibility for column options. Note that the new options\r\n         * are mapped onto the old parameters, so this is an external interface change\r\n         * only.\r\n         *  @param {object} init Object to map\r\n         */\r\n        function _fnCompatCols ( init )\r\n        {\r\n            _fnCompatMap( init, 'orderable',     'bSortable' );\r\n            _fnCompatMap( init, 'orderData',     'aDataSort' );\r\n            _fnCompatMap( init, 'orderSequence', 'asSorting' );\r\n            _fnCompatMap( init, 'orderDataType', 'sortDataType' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Browser feature detection for capabilities, quirks\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBrowserDetect( settings )\r\n        {\r\n            var browser = settings.oBrowser;\r\n\r\n            // Scrolling feature / quirks detection\r\n            var n = $('<div/>')\r\n                .css( {\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    height: 1,\r\n                    width: 1,\r\n                    overflow: 'hidden'\r\n                } )\r\n                .append(\r\n                    $('<div/>')\r\n                        .css( {\r\n                            position: 'absolute',\r\n                            top: 1,\r\n                            left: 1,\r\n                            width: 100,\r\n                            overflow: 'scroll'\r\n                        } )\r\n                        .append(\r\n                            $('<div class=\"test\"/>')\r\n                                .css( {\r\n                                    width: '100%',\r\n                                    height: 10\r\n                                } )\r\n                        )\r\n                )\r\n                .appendTo( 'body' );\r\n\r\n            var test = n.find('.test');\r\n\r\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\r\n            // include the width of the scrollbar, while other browsers ensure the inner\r\n            // element is contained without forcing scrolling\r\n            browser.bScrollOversize = test[0].offsetWidth === 100;\r\n\r\n            // In rtl text layout, some browsers (most, but not all) will place the\r\n            // scrollbar on the left, rather than the right.\r\n            browser.bScrollbarLeft = test.offset().left !== 1;\r\n\r\n            n.remove();\r\n        }\r\n\r\n\r\n        /**\r\n         * Array.prototype reduce[Right] method, used for browsers which don't support\r\n         * JS 1.6. Done this way to reduce code size, since we iterate either way\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnReduce ( that, fn, init, start, end, inc )\r\n        {\r\n            var\r\n                i = start,\r\n                value,\r\n                isSet = false;\r\n\r\n            if ( init !== undefined ) {\r\n                value = init;\r\n                isSet = true;\r\n            }\r\n\r\n            while ( i !== end ) {\r\n                if ( ! that.hasOwnProperty(i) ) {\r\n                    continue;\r\n                }\r\n\r\n                value = isSet ?\r\n                    fn( value, that[i], i, that ) :\r\n                    that[i];\r\n\r\n                isSet = true;\r\n                i += inc;\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        /**\r\n         * Add a column to the list used for the table with default values\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} nTh The th element for this column\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddColumn( oSettings, nTh )\r\n        {\r\n            // Add column to aoColumns array\r\n            var oDefaults = DataTable.defaults.column;\r\n            var iCol = oSettings.aoColumns.length;\r\n            var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\r\n                \"nTh\": nTh ? nTh : document.createElement('th'),\r\n                \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\r\n                \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\r\n                \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\r\n                idx: iCol\r\n            } );\r\n            oSettings.aoColumns.push( oCol );\r\n\r\n            // Add search object for column specific search. Note that the `searchCols[ iCol ]`\r\n            // passed into extend can be undefined. This allows the user to give a default\r\n            // with only some of the parameters defined, and also not give a default\r\n            var searchCols = oSettings.aoPreSearchCols;\r\n            searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\r\n\r\n            // Use the default column options function to initialise classes etc\r\n            _fnColumnOptions( oSettings, iCol, null );\r\n        }\r\n\r\n\r\n        /**\r\n         * Apply options for a column\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iCol column index to consider\r\n         *  @param {object} oOptions object with sType, bVisible and bSearchable etc\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnOptions( oSettings, iCol, oOptions )\r\n        {\r\n            var oCol = oSettings.aoColumns[ iCol ];\r\n            var oClasses = oSettings.oClasses;\r\n            var th = $(oCol.nTh);\r\n\r\n            // Try to get width information from the DOM. We can't get it from CSS\r\n            // as we'd need to parse the CSS stylesheet. `width` option can override\r\n            if ( ! oCol.sWidthOrig ) {\r\n                // Width attribute\r\n                oCol.sWidthOrig = th.attr('width') || null;\r\n\r\n                // Style attribute\r\n                var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%])/);\r\n                if ( t ) {\r\n                    oCol.sWidthOrig = t[1];\r\n                }\r\n            }\r\n\r\n            /* User specified column options */\r\n            if ( oOptions !== undefined && oOptions !== null )\r\n            {\r\n                // Backwards compatibility\r\n                _fnCompatCols( oOptions );\r\n\r\n                // Map camel case parameters to their Hungarian counterparts\r\n                _fnCamelToHungarian( DataTable.defaults.column, oOptions );\r\n\r\n                /* Backwards compatibility for mDataProp */\r\n                if ( oOptions.mDataProp !== undefined && !oOptions.mData )\r\n                {\r\n                    oOptions.mData = oOptions.mDataProp;\r\n                }\r\n\r\n                if ( oOptions.sType )\r\n                {\r\n                    oCol._sManualType = oOptions.sType;\r\n                }\r\n\r\n                // `class` is a reserved word in Javascript, so we need to provide\r\n                // the ability to use a valid name for the camel case input\r\n                if ( oOptions.className && ! oOptions.sClass )\r\n                {\r\n                    oOptions.sClass = oOptions.className;\r\n                }\r\n\r\n                $.extend( oCol, oOptions );\r\n                _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\r\n\r\n                /* iDataSort to be applied (backwards compatibility), but aDataSort will take\r\n                 * priority if defined\r\n                 */\r\n                if ( typeof oOptions.iDataSort === 'number' )\r\n                {\r\n                    oCol.aDataSort = [ oOptions.iDataSort ];\r\n                }\r\n                _fnMap( oCol, oOptions, \"aDataSort\" );\r\n            }\r\n\r\n            /* Cache the data get and set functions for speed */\r\n            var mDataSrc = oCol.mData;\r\n            var mData = _fnGetObjectDataFn( mDataSrc );\r\n            var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\r\n\r\n            var attrTest = function( src ) {\r\n                return typeof src === 'string' && src.indexOf('@') !== -1;\r\n            };\r\n            oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\r\n                attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\r\n                );\r\n\r\n            oCol.fnGetData = function (oData, sSpecific) {\r\n                var innerData = mData( oData, sSpecific );\r\n\r\n                if ( oCol.mRender && (sSpecific && sSpecific !== '') )\r\n                {\r\n                    return mRender( innerData, sSpecific, oData );\r\n                }\r\n                return innerData;\r\n            };\r\n            oCol.fnSetData = _fnSetObjectDataFn( mDataSrc );\r\n\r\n            /* Feature sorting overrides column specific when off */\r\n            if ( !oSettings.oFeatures.bSort )\r\n            {\r\n                oCol.bSortable = false;\r\n                th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\r\n            }\r\n\r\n            /* Check that the class assignment is correct for sorting */\r\n            var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\r\n            var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\r\n            if ( !oCol.bSortable || (!bAsc && !bDesc) )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableNone;\r\n                oCol.sSortingClassJUI = \"\";\r\n            }\r\n            else if ( bAsc && !bDesc )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableAsc;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\r\n            }\r\n            else if ( !bAsc && bDesc )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableDesc;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\r\n            }\r\n            else\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortable;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUI;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Adjust the table column widths for new data. Note: you would probably want to\r\n         * do a redraw after calling this function!\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAdjustColumnSizing ( settings )\r\n        {\r\n            /* Not interested in doing column width calculation if auto-width is disabled */\r\n            if ( settings.oFeatures.bAutoWidth !== false )\r\n            {\r\n                var columns = settings.aoColumns;\r\n\r\n                _fnCalculateColumnWidths( settings );\r\n                for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\r\n                {\r\n                    columns[i].nTh.style.width = columns[i].sWidth;\r\n                }\r\n            }\r\n\r\n            var scroll = settings.oScroll;\r\n            if ( scroll.sY !== '' || scroll.sX !== '')\r\n            {\r\n                _fnScrollDraw( settings );\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'column-sizing', [settings] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Covert the index of a visible column to the index in the data array (take account\r\n         * of hidden columns)\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iMatch Visible column index to lookup\r\n         *  @returns {int} i the data index\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnVisibleToColumnIndex( oSettings, iMatch )\r\n        {\r\n            var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n\r\n            return typeof aiVis[iMatch] === 'number' ?\r\n                aiVis[iMatch] :\r\n                null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Covert the index of an index in the data array and convert it to the visible\r\n         *   column index (take account of hidden columns)\r\n         *  @param {int} iMatch Column index to lookup\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {int} i the data index\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnIndexToVisible( oSettings, iMatch )\r\n        {\r\n            var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n            var iPos = $.inArray( iMatch, aiVis );\r\n\r\n            return iPos !== -1 ? iPos : null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the number of visible columns\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {int} i the number of visible columns\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnVisbleColumns( oSettings )\r\n        {\r\n            return _fnGetColumns( oSettings, 'bVisible' ).length;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get an array of column indexes that match a given property\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sParam Parameter in aoColumns to look for - typically\r\n         *    bVisible or bSearchable\r\n         *  @returns {array} Array of indexes with matched properties\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetColumns( oSettings, sParam )\r\n        {\r\n            var a = [];\r\n\r\n            $.map( oSettings.aoColumns, function(val, i) {\r\n                if ( val[sParam] ) {\r\n                    a.push( i );\r\n                }\r\n            } );\r\n\r\n            return a;\r\n        }\r\n\r\n\r\n        /**\r\n         * Calculate the 'type' of a column\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnTypes ( settings )\r\n        {\r\n            var columns = settings.aoColumns;\r\n            var data = settings.aoData;\r\n            var types = DataTable.ext.type.detect;\r\n            var i, ien, j, jen, k, ken;\r\n            var col, cell, detectedType, cache;\r\n\r\n            // For each column, spin over the \r\n            for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n                col = columns[i];\r\n                cache = [];\r\n\r\n                if ( ! col.sType && col._sManualType ) {\r\n                    col.sType = col._sManualType;\r\n                }\r\n                else if ( ! col.sType ) {\r\n                    for ( j=0, jen=types.length ; j<jen ; j++ ) {\r\n                        for ( k=0, ken=data.length ; k<ken ; k++ ) {\r\n                            // Use a cache array so we only need to get the type data\r\n                            // from the formatter once (when using multiple detectors)\r\n                            if ( cache[k] === undefined ) {\r\n                                cache[k] = _fnGetCellData( settings, k, i, 'type' );\r\n                            }\r\n\r\n                            detectedType = types[j]( cache[k], settings );\r\n\r\n                            // Doesn't match, so break early, since this type can't\r\n                            // apply to this column. Also, HTML is a special case since\r\n                            // it is so similar to `string`. Just a single match is\r\n                            // needed for a column to be html type\r\n                            if ( ! detectedType || detectedType === 'html' ) {\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // Type is valid for all data points in the column - use this\r\n                        // type\r\n                        if ( detectedType ) {\r\n                            col.sType = detectedType;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // Fall back - if no type was detected, always use string\r\n                    if ( ! col.sType ) {\r\n                        col.sType = 'string';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Take the column definitions and static columns arrays and calculate how\r\n         * they relate to column indexes. The callback function will then apply the\r\n         * definition found for a column to a suitable configuration object.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\r\n         *  @param {array} aoCols The aoColumns array that defines columns individually\r\n         *  @param {function} fn Callback function - takes two parameters, the calculated\r\n         *    column index and the definition for that column.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\r\n        {\r\n            var i, iLen, j, jLen, k, kLen, def;\r\n            var columns = oSettings.aoColumns;\r\n\r\n            // Column definitions with aTargets\r\n            if ( aoColDefs )\r\n            {\r\n                /* Loop over the definitions array - loop in reverse so first instance has priority */\r\n                for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\r\n                {\r\n                    def = aoColDefs[i];\r\n\r\n                    /* Each definition can target multiple columns, as it is an array */\r\n                    var aTargets = def.targets !== undefined ?\r\n                        def.targets :\r\n                        def.aTargets;\r\n\r\n                    if ( ! $.isArray( aTargets ) )\r\n                    {\r\n                        aTargets = [ aTargets ];\r\n                    }\r\n\r\n                    for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\r\n                    {\r\n                        if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\r\n                        {\r\n                            /* Add columns that we don't yet know about */\r\n                            while( columns.length <= aTargets[j] )\r\n                            {\r\n                                _fnAddColumn( oSettings );\r\n                            }\r\n\r\n                            /* Integer, basic index */\r\n                            fn( aTargets[j], def );\r\n                        }\r\n                        else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\r\n                        {\r\n                            /* Negative integer, right to left column counting */\r\n                            fn( columns.length+aTargets[j], def );\r\n                        }\r\n                        else if ( typeof aTargets[j] === 'string' )\r\n                        {\r\n                            /* Class name matching on TH element */\r\n                            for ( k=0, kLen=columns.length ; k<kLen ; k++ )\r\n                            {\r\n                                if ( aTargets[j] == \"_all\" ||\r\n                                    $(columns[k].nTh).hasClass( aTargets[j] ) )\r\n                                {\r\n                                    fn( k, def );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Statically defined columns array\r\n            if ( aoCols )\r\n            {\r\n                for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\r\n                {\r\n                    fn( i, aoCols[i] );\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add a data array to the table, creating DOM node etc. This is the parallel to\r\n         * _fnGatherData, but for adding rows from a Javascript source, rather than a\r\n         * DOM source.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {array} aData data array to be added\r\n         *  @param {node} [nTr] TR element to add to the table - optional. If not given,\r\n         *    DataTables will create a row automatically\r\n         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n         *    if nTr is.\r\n         *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddData ( oSettings, aDataIn, nTr, anTds )\r\n        {\r\n            /* Create the object for storing information about this new row */\r\n            var iRow = oSettings.aoData.length;\r\n            var oData = $.extend( true, {}, DataTable.models.oRow, {\r\n                src: nTr ? 'dom' : 'data'\r\n            } );\r\n\r\n            oData._aData = aDataIn;\r\n            oSettings.aoData.push( oData );\r\n\r\n            /* Create the cells */\r\n            var nTd, sThisType;\r\n            var columns = oSettings.aoColumns;\r\n            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                // When working with a row, the data source object must be populated. In\r\n                // all other cases, the data source object is already populated, so we\r\n                // don't overwrite it, which might break bindings etc\r\n                if ( nTr ) {\r\n                    _fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );\r\n                }\r\n                columns[i].sType = null;\r\n            }\r\n\r\n            /* Add to the display array */\r\n            oSettings.aiDisplayMaster.push( iRow );\r\n\r\n            /* Create the DOM information */\r\n            if ( !oSettings.oFeatures.bDeferRender )\r\n            {\r\n                _fnCreateTr( oSettings, iRow, nTr, anTds );\r\n            }\r\n\r\n            return iRow;\r\n        }\r\n\r\n\r\n        /**\r\n         * Add one or more TR elements to the table. Generally we'd expect to\r\n         * use this for reading data from a DOM sourced table, but it could be\r\n         * used for an TR element. Note that if a TR is given, it is used (i.e.\r\n         * it is not cloned).\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {array|node|jQuery} trs The TR element(s) to add to the table\r\n         *  @returns {array} Array of indexes for the added rows\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddTr( settings, trs )\r\n        {\r\n            var row;\r\n\r\n            // Allow an individual node to be passed in\r\n            if ( ! (trs instanceof $) ) {\r\n                trs = $(trs);\r\n            }\r\n\r\n            return trs.map( function (i, el) {\r\n                row = _fnGetRowElements( settings, el );\r\n                return _fnAddData( settings, row.data, el, row.cells );\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Take a TR element and convert it to an index in aoData\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} n the TR element to find\r\n         *  @returns {int} index if the node is found, null if not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnNodeToDataIndex( oSettings, n )\r\n        {\r\n            return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Take a TD element and convert it into a column data index (not the visible index)\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow The row number the TD/TH can be found in\r\n         *  @param {node} n The TD/TH element to find\r\n         *  @returns {int} index if the node is found, -1 if not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnNodeToColumnIndex( oSettings, iRow, n )\r\n        {\r\n            return $.inArray( n, oSettings.aoData[ iRow ].anCells );\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the data for a given cell from the internal cache, taking into account data mapping\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow aoData row id\r\n         *  @param {int} iCol Column index\r\n         *  @param {string} sSpecific data get type ('display', 'type' 'filter' 'sort')\r\n         *  @returns {*} Cell data\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetCellData( oSettings, iRow, iCol, sSpecific )\r\n        {\r\n            var oCol = oSettings.aoColumns[iCol];\r\n            var oData = oSettings.aoData[iRow]._aData;\r\n            var sData = oCol.fnGetData( oData, sSpecific );\r\n\r\n            if ( sData === undefined )\r\n            {\r\n                if ( oSettings.iDrawError != oSettings.iDraw && oCol.sDefaultContent === null )\r\n                {\r\n                    _fnLog( oSettings, 0, \"Requested unknown parameter \"+\r\n                        (typeof oCol.mData=='function' ? '{function}' : \"'\"+oCol.mData+\"'\")+\r\n                        \" for row \"+iRow, 4 );\r\n                    oSettings.iDrawError = oSettings.iDraw;\r\n                }\r\n                return oCol.sDefaultContent;\r\n            }\r\n\r\n            /* When the data source is null, we can use default column data */\r\n            if ( (sData === oData || sData === null) && oCol.sDefaultContent !== null )\r\n            {\r\n                sData = oCol.sDefaultContent;\r\n            }\r\n            else if ( typeof sData === 'function' )\r\n            {\r\n                // If the data source is a function, then we run it and use the return\r\n                return sData();\r\n            }\r\n\r\n            if ( sData === null && sSpecific == 'display' )\r\n            {\r\n                return '';\r\n            }\r\n            return sData;\r\n        }\r\n\r\n\r\n        /**\r\n         * Set the value for a specific cell, into the internal data cache\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow aoData row id\r\n         *  @param {int} iCol Column index\r\n         *  @param {*} val Value to set\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSetCellData( oSettings, iRow, iCol, val )\r\n        {\r\n            var oCol = oSettings.aoColumns[iCol];\r\n            var oData = oSettings.aoData[iRow]._aData;\r\n\r\n            oCol.fnSetData( oData, val );\r\n        }\r\n\r\n\r\n        // Private variable that is used to match action syntax in the data property object\r\n        var __reArray = /\\[.*?\\]$/;\r\n        var __reFn = /\\(\\)$/;\r\n\r\n        /**\r\n         * Split string on periods, taking into account escaped periods\r\n         * @param  {string} str String to split\r\n         * @return {array} Split string\r\n         */\r\n        function _fnSplitObjNotation( str )\r\n        {\r\n            return $.map( str.match(/(\\\\.|[^\\.])+/g), function ( s ) {\r\n                return s.replace('\\\\.', '.');\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Return a function that can be used to get data from a source object, taking\r\n         * into account the ability to use nested objects as a source\r\n         *  @param {string|int|function} mSource The data source for the object\r\n         *  @returns {function} Data get function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetObjectDataFn( mSource )\r\n        {\r\n            if ( $.isPlainObject( mSource ) )\r\n            {\r\n                /* Build an object of get functions, and wrap them in a single call */\r\n                var o = {};\r\n                $.each( mSource, function (key, val) {\r\n                    if ( val ) {\r\n                        o[key] = _fnGetObjectDataFn( val );\r\n                    }\r\n                } );\r\n\r\n                return function (data, type, extra) {\r\n                    var t = o[type] || o._;\r\n                    return t !== undefined ?\r\n                        t(data, type, extra) :\r\n                        data;\r\n                };\r\n            }\r\n            else if ( mSource === null )\r\n            {\r\n                /* Give an empty string for rendering / sorting etc */\r\n                return function (data, type) {\r\n                    return data;\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'function' )\r\n            {\r\n                return function (data, type, extra) {\r\n                    return mSource( data, type, extra );\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n            {\r\n                /* If there is a . in the source string then the data source is in a\r\n                 * nested object so we loop over the data for each level to get the next\r\n                 * level down. On each loop we test for undefined, and if found immediately\r\n                 * return. This allows entire objects to be missing and sDefaultContent to\r\n                 * be used if defined, rather than throwing an error\r\n                 */\r\n                var fetchData = function (data, type, src) {\r\n                    var arrayNotation, funcNotation, out, innerSrc;\r\n\r\n                    if ( src !== \"\" )\r\n                    {\r\n                        var a = _fnSplitObjNotation( src );\r\n\r\n                        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n                        {\r\n                            // Check if we are dealing with special notation\r\n                            arrayNotation = a[i].match(__reArray);\r\n                            funcNotation = a[i].match(__reFn);\r\n\r\n                            if ( arrayNotation )\r\n                            {\r\n                                // Array notation\r\n                                a[i] = a[i].replace(__reArray, '');\r\n\r\n                                // Condition allows simply [] to be passed in\r\n                                if ( a[i] !== \"\" ) {\r\n                                    data = data[ a[i] ];\r\n                                }\r\n                                out = [];\r\n\r\n                                // Get the remainder of the nested object to get\r\n                                a.splice( 0, i+1 );\r\n                                innerSrc = a.join('.');\r\n\r\n                                // Traverse each entry in the array getting the properties requested\r\n                                for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\r\n                                    out.push( fetchData( data[j], type, innerSrc ) );\r\n                                }\r\n\r\n                                // If a string is given in between the array notation indicators, that\r\n                                // is used to join the strings together, otherwise an array is returned\r\n                                var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\r\n                                data = (join===\"\") ? out : out.join(join);\r\n\r\n                                // The inner call to fetchData has already traversed through the remainder\r\n                                // of the source requested, so we exit from the loop\r\n                                break;\r\n                            }\r\n                            else if ( funcNotation )\r\n                            {\r\n                                // Function call\r\n                                a[i] = a[i].replace(__reFn, '');\r\n                                data = data[ a[i] ]();\r\n                                continue;\r\n                            }\r\n\r\n                            if ( data === null || data[ a[i] ] === undefined )\r\n                            {\r\n                                return undefined;\r\n                            }\r\n                            data = data[ a[i] ];\r\n                        }\r\n                    }\r\n\r\n                    return data;\r\n                };\r\n\r\n                return function (data, type) {\r\n                    return fetchData( data, type, mSource );\r\n                };\r\n            }\r\n            else\r\n            {\r\n                /* Array or flat object mapping */\r\n                return function (data, type) {\r\n                    return data[mSource];\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Return a function that can be used to set data from a source object, taking\r\n         * into account the ability to use nested objects as a source\r\n         *  @param {string|int|function} mSource The data source for the object\r\n         *  @returns {function} Data set function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSetObjectDataFn( mSource )\r\n        {\r\n            if ( $.isPlainObject( mSource ) )\r\n            {\r\n                /* Unlike get, only the underscore (global) option is used for for\r\n                 * setting data since we don't know the type here. This is why an object\r\n                 * option is not documented for `mData` (which is read/write), but it is\r\n                 * for `mRender` which is read only.\r\n                 */\r\n                return _fnSetObjectDataFn( mSource._ );\r\n            }\r\n            else if ( mSource === null )\r\n            {\r\n                /* Nothing to do when the data source is null */\r\n                return function (data, val) {};\r\n            }\r\n            else if ( typeof mSource === 'function' )\r\n            {\r\n                return function (data, val) {\r\n                    mSource( data, 'set', val );\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n            {\r\n                /* Like the get, we need to get data from a nested object */\r\n                var setData = function (data, val, src) {\r\n                    var a = _fnSplitObjNotation( src ), b;\r\n                    var aLast = a[a.length-1];\r\n                    var arrayNotation, funcNotation, o, innerSrc;\r\n\r\n                    for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\r\n                    {\r\n                        // Check if we are dealing with an array notation request\r\n                        arrayNotation = a[i].match(__reArray);\r\n                        funcNotation = a[i].match(__reFn);\r\n\r\n                        if ( arrayNotation )\r\n                        {\r\n                            a[i] = a[i].replace(__reArray, '');\r\n                            data[ a[i] ] = [];\r\n\r\n                            // Get the remainder of the nested object to set so we can recurse\r\n                            b = a.slice();\r\n                            b.splice( 0, i+1 );\r\n                            innerSrc = b.join('.');\r\n\r\n                            // Traverse each entry in the array setting the properties requested\r\n                            for ( var j=0, jLen=val.length ; j<jLen ; j++ )\r\n                            {\r\n                                o = {};\r\n                                setData( o, val[j], innerSrc );\r\n                                data[ a[i] ].push( o );\r\n                            }\r\n\r\n                            // The inner call to setData has already traversed through the remainder\r\n                            // of the source and has set the data, thus we can exit here\r\n                            return;\r\n                        }\r\n                        else if ( funcNotation )\r\n                        {\r\n                            // Function call\r\n                            a[i] = a[i].replace(__reFn, '');\r\n                            data = data[ a[i] ]( val );\r\n                        }\r\n\r\n                        // If the nested object doesn't currently exist - since we are\r\n                        // trying to set the value - create it\r\n                        if ( data[ a[i] ] === null || data[ a[i] ] === undefined )\r\n                        {\r\n                            data[ a[i] ] = {};\r\n                        }\r\n                        data = data[ a[i] ];\r\n                    }\r\n\r\n                    // Last item in the input - i.e, the actual set\r\n                    if ( aLast.match(__reFn ) )\r\n                    {\r\n                        // Function call\r\n                        data = data[ aLast.replace(__reFn, '') ]( val );\r\n                    }\r\n                    else\r\n                    {\r\n                        // If array notation is used, we just want to strip it and use the property name\r\n                        // and assign the value. If it isn't used, then we get the result we want anyway\r\n                        data[ aLast.replace(__reArray, '') ] = val;\r\n                    }\r\n                };\r\n\r\n                return function (data, val) {\r\n                    return setData( data, val, mSource );\r\n                };\r\n            }\r\n            else\r\n            {\r\n                /* Array or flat object mapping */\r\n                return function (data, val) {\r\n                    data[mSource] = val;\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Return an array with the full table data\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns array {array} aData Master data array\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetDataMaster ( settings )\r\n        {\r\n            return _pluck( settings.aoData, '_aData' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Nuke the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnClearTable( settings )\r\n        {\r\n            settings.aoData.length = 0;\r\n            settings.aiDisplayMaster.length = 0;\r\n            settings.aiDisplay.length = 0;\r\n        }\r\n\r\n\r\n        /**\r\n         * Take an array of integers (index array) and remove a target integer (value - not\r\n         * the key!)\r\n         *  @param {array} a Index array to target\r\n         *  @param {int} iTarget value to find\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDeleteIndex( a, iTarget, splice )\r\n        {\r\n            var iTargetIndex = -1;\r\n\r\n            for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n            {\r\n                if ( a[i] == iTarget )\r\n                {\r\n                    iTargetIndex = i;\r\n                }\r\n                else if ( a[i] > iTarget )\r\n                {\r\n                    a[i]--;\r\n                }\r\n            }\r\n\r\n            if ( iTargetIndex != -1 && splice === undefined )\r\n            {\r\n                a.splice( iTargetIndex, 1 );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Mark cached data as invalid such that a re-read of the data will occur when\r\n         * the cached data is next requested. Also update from the data source object.\r\n         *\r\n         * @param {object} settings DataTables settings object\r\n         * @param  {int}    rowIdx   Row index to invalidate\r\n         * @memberof DataTable#oApi\r\n         *\r\n         * @todo For the modularisation of v1.11 this will need to become a callback, so\r\n         *   the sort and filter methods can subscribe to it. That will required\r\n         *   initialisation options for sorting, which is why it is not already baked in\r\n         */\r\n        function _fnInvalidateRow( settings, rowIdx, src, column )\r\n        {\r\n            var row = settings.aoData[ rowIdx ];\r\n            var i, ien;\r\n\r\n            // Are we reading last data from DOM or the data object?\r\n            if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\r\n                // Read the data from the DOM\r\n                row._aData = _fnGetRowElements( settings, row ).data;\r\n            }\r\n            else {\r\n                // Reading from data object, update the DOM\r\n                var cells = row.anCells;\r\n\r\n                if ( cells ) {\r\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                        cells[i].innerHTML = _fnGetCellData( settings, rowIdx, i, 'display' );\r\n                    }\r\n                }\r\n            }\r\n\r\n            row._aSortData = null;\r\n            row._aFilterData = null;\r\n\r\n            // Invalidate the type for a specific column (if given) or all columns since\r\n            // the data might have changed\r\n            var cols = settings.aoColumns;\r\n            if ( column !== undefined ) {\r\n                cols[ column ].sType = null;\r\n            }\r\n            else {\r\n                for ( i=0, ien=cols.length ; i<ien ; i++ ) {\r\n                    cols[i].sType = null;\r\n                }\r\n            }\r\n\r\n            // Update DataTables special `DT_*` attributes for the row\r\n            _fnRowAttributes( row );\r\n        }\r\n\r\n\r\n        /**\r\n         * Build a data source object from an HTML row, reading the contents of the\r\n         * cells that are in the row.\r\n         *\r\n         * @param {object} settings DataTables settings object\r\n         * @param {node|object} TR element from which to read data or existing row\r\n         *   object from which to re-read the data from the cells\r\n         * @returns {object} Object with two parameters: `data` the data read, in\r\n         *   document order, and `cells` and array of nodes (they can be useful to the\r\n         *   caller, so rather than needing a second traversal to get them, just return\r\n         *   them from here).\r\n         * @memberof DataTable#oApi\r\n         */\r\n        function _fnGetRowElements( settings, row )\r\n        {\r\n            var\r\n                d = [],\r\n                tds = [],\r\n                td = row.firstChild,\r\n                name, col, o, i=0, contents,\r\n                columns = settings.aoColumns;\r\n\r\n            var attr = function ( str, data, td  ) {\r\n                if ( typeof str === 'string' ) {\r\n                    var idx = str.indexOf('@');\r\n\r\n                    if ( idx !== -1 ) {\r\n                        var src = str.substring( idx+1 );\r\n                        o[ '@'+src ] = td.getAttribute( src );\r\n                    }\r\n                }\r\n            };\r\n\r\n            var cellProcess = function ( cell ) {\r\n                col = columns[i];\r\n                contents = $.trim(cell.innerHTML);\r\n\r\n                if ( col && col._bAttrSrc ) {\r\n                    o = {\r\n                        display: contents\r\n                    };\r\n\r\n                    attr( col.mData.sort, o, cell );\r\n                    attr( col.mData.type, o, cell );\r\n                    attr( col.mData.filter, o, cell );\r\n\r\n                    d.push( o );\r\n                }\r\n                else {\r\n                    d.push( contents );\r\n                }\r\n\r\n                tds.push( cell );\r\n                i++;\r\n            };\r\n\r\n            if ( td ) {\r\n                // `tr` element passed in\r\n                while ( td ) {\r\n                    name = td.nodeName.toUpperCase();\r\n\r\n                    if ( name == \"TD\" || name == \"TH\" ) {\r\n                        cellProcess( td );\r\n                    }\r\n\r\n                    td = td.nextSibling;\r\n                }\r\n            }\r\n            else {\r\n                // Existing row object passed in\r\n                tds = row.anCells;\r\n\r\n                for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\r\n                    cellProcess( tds[j] );\r\n                }\r\n            }\r\n\r\n            return {\r\n                data: d,\r\n                cells: tds\r\n            };\r\n        }\r\n        /**\r\n         * Create a new TR element (and it's TD children) for a row\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow Row to consider\r\n         *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\r\n         *    DataTables will create a row automatically\r\n         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n         *    if nTr is.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\r\n        {\r\n            var\r\n                row = oSettings.aoData[iRow],\r\n                rowData = row._aData,\r\n                cells = [],\r\n                nTr, nTd, oCol,\r\n                i, iLen;\r\n\r\n            if ( row.nTr === null )\r\n            {\r\n                nTr = nTrIn || document.createElement('tr');\r\n\r\n                row.nTr = nTr;\r\n                row.anCells = cells;\r\n\r\n                /* Use a private property on the node to allow reserve mapping from the node\r\n                 * to the aoData array for fast look up\r\n                 */\r\n                nTr._DT_RowIndex = iRow;\r\n\r\n                /* Special parameters can be given by the data source to be used on the row */\r\n                _fnRowAttributes( row );\r\n\r\n                /* Process each column */\r\n                for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\r\n                {\r\n                    oCol = oSettings.aoColumns[i];\r\n\r\n                    nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\r\n                    cells.push( nTd );\r\n\r\n                    // Need to create the HTML if new, or if a rendering function is defined\r\n                    if ( !nTrIn || oCol.mRender || oCol.mData !== i )\r\n                    {\r\n                        nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\r\n                    }\r\n\r\n                    /* Add user defined class */\r\n                    if ( oCol.sClass )\r\n                    {\r\n                        nTd.className += ' '+oCol.sClass;\r\n                    }\r\n\r\n                    // Visibility - add or remove as required\r\n                    if ( oCol.bVisible && ! nTrIn )\r\n                    {\r\n                        nTr.appendChild( nTd );\r\n                    }\r\n                    else if ( ! oCol.bVisible && nTrIn )\r\n                    {\r\n                        nTd.parentNode.removeChild( nTd );\r\n                    }\r\n\r\n                    if ( oCol.fnCreatedCell )\r\n                    {\r\n                        oCol.fnCreatedCell.call( oSettings.oInstance,\r\n                            nTd, _fnGetCellData( oSettings, iRow, i, 'display' ), rowData, iRow, i\r\n                        );\r\n                    }\r\n                }\r\n\r\n                _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\r\n            }\r\n\r\n            // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\r\n            // and deployed\r\n            row.nTr.setAttribute( 'role', 'row' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Add attributes to a row based on the special `DT_*` parameters in a data\r\n         * source object.\r\n         *  @param {object} DataTables row object for the row to be modified\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnRowAttributes( row )\r\n        {\r\n            var tr = row.nTr;\r\n            var data = row._aData;\r\n\r\n            if ( tr ) {\r\n                if ( data.DT_RowId ) {\r\n                    tr.id = data.DT_RowId;\r\n                }\r\n\r\n                if ( data.DT_RowClass ) {\r\n                    // Remove any classes added by DT_RowClass before\r\n                    var a = data.DT_RowClass.split(' ');\r\n                    row.__rowc = row.__rowc ?\r\n                        _unique( row.__rowc.concat( a ) ) :\r\n                        a;\r\n\r\n                    $(tr)\r\n                        .removeClass( row.__rowc.join(' ') )\r\n                        .addClass( data.DT_RowClass );\r\n                }\r\n\r\n                if ( data.DT_RowData ) {\r\n                    $(tr).data( data.DT_RowData );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Create the HTML header for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBuildHead( oSettings )\r\n        {\r\n            var i, ien, cell, row, column;\r\n            var thead = oSettings.nTHead;\r\n            var tfoot = oSettings.nTFoot;\r\n            var createHeader = $('th, td', thead).length === 0;\r\n            var classes = oSettings.oClasses;\r\n            var columns = oSettings.aoColumns;\r\n\r\n            if ( createHeader ) {\r\n                row = $('<tr/>').appendTo( thead );\r\n            }\r\n\r\n            for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n                column = columns[i];\r\n                cell = $( column.nTh ).addClass( column.sClass );\r\n\r\n                if ( createHeader ) {\r\n                    cell.appendTo( row );\r\n                }\r\n\r\n                // 1.11 move into sorting\r\n                if ( oSettings.oFeatures.bSort ) {\r\n                    cell.addClass( column.sSortingClass );\r\n\r\n                    if ( column.bSortable !== false ) {\r\n                        cell\r\n                            .attr( 'tabindex', oSettings.iTabIndex )\r\n                            .attr( 'aria-controls', oSettings.sTableId );\r\n\r\n                        _fnSortAttachListener( oSettings, column.nTh, i );\r\n                    }\r\n                }\r\n\r\n                if ( column.sTitle != cell.html() ) {\r\n                    cell.html( column.sTitle );\r\n                }\r\n\r\n                _fnRenderer( oSettings, 'header' )(\r\n                    oSettings, cell, column, classes\r\n                );\r\n            }\r\n\r\n            if ( createHeader ) {\r\n                _fnDetectHeader( oSettings.aoHeader, thead );\r\n            }\r\n\r\n            /* ARIA role for the rows */\r\n            $(thead).find('>tr').attr('role', 'row');\r\n\r\n            /* Deal with the footer - add classes if required */\r\n            $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\r\n            $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\r\n\r\n            // Cache the footer cells. Note that we only take the cells from the first\r\n            // row in the footer. If there is more than one row the user wants to\r\n            // interact with, they need to use the table().foot() method. Note also this\r\n            // allows cells to be used for multiple columns using colspan\r\n            if ( tfoot !== null ) {\r\n                var cells = oSettings.aoFooter[0];\r\n\r\n                for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                    column = columns[i];\r\n                    column.nTf = cells[i].cell;\r\n\r\n                    if ( column.sClass ) {\r\n                        $(column.nTf).addClass( column.sClass );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Draw the header (or footer) element based on the column visibility states. The\r\n         * methodology here is to use the layout array from _fnDetectHeader, modified for\r\n         * the instantaneous column visibility, to construct the new layout. The grid is\r\n         * traversed over cell at a time in a rows x columns grid fashion, although each\r\n         * cell insert can cover multiple elements in the grid - which is tracks using the\r\n         * aApplied array. Cell inserts in the grid will only occur where there isn't\r\n         * already a cell in that position.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param array {objects} aoSource Layout array from _fnDetectHeader\r\n         *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\r\n        {\r\n            var i, iLen, j, jLen, k, kLen, n, nLocalTr;\r\n            var aoLocal = [];\r\n            var aApplied = [];\r\n            var iColumns = oSettings.aoColumns.length;\r\n            var iRowspan, iColspan;\r\n\r\n            if ( ! aoSource )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (  bIncludeHidden === undefined )\r\n            {\r\n                bIncludeHidden = false;\r\n            }\r\n\r\n            /* Make a copy of the master layout array, but without the visible columns in it */\r\n            for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\r\n            {\r\n                aoLocal[i] = aoSource[i].slice();\r\n                aoLocal[i].nTr = aoSource[i].nTr;\r\n\r\n                /* Remove any columns which are currently hidden */\r\n                for ( j=iColumns-1 ; j>=0 ; j-- )\r\n                {\r\n                    if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\r\n                    {\r\n                        aoLocal[i].splice( j, 1 );\r\n                    }\r\n                }\r\n\r\n                /* Prep the applied array - it needs an element for each row */\r\n                aApplied.push( [] );\r\n            }\r\n\r\n            for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\r\n            {\r\n                nLocalTr = aoLocal[i].nTr;\r\n\r\n                /* All cells are going to be replaced, so empty out the row */\r\n                if ( nLocalTr )\r\n                {\r\n                    while( (n = nLocalTr.firstChild) )\r\n                    {\r\n                        nLocalTr.removeChild( n );\r\n                    }\r\n                }\r\n\r\n                for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\r\n                {\r\n                    iRowspan = 1;\r\n                    iColspan = 1;\r\n\r\n                    /* Check to see if there is already a cell (row/colspan) covering our target\r\n                     * insert point. If there is, then there is nothing to do.\r\n                     */\r\n                    if ( aApplied[i][j] === undefined )\r\n                    {\r\n                        nLocalTr.appendChild( aoLocal[i][j].cell );\r\n                        aApplied[i][j] = 1;\r\n\r\n                        /* Expand the cell to cover as many rows as needed */\r\n                        while ( aoLocal[i+iRowspan] !== undefined &&\r\n                            aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\r\n                        {\r\n                            aApplied[i+iRowspan][j] = 1;\r\n                            iRowspan++;\r\n                        }\r\n\r\n                        /* Expand the cell to cover as many columns as needed */\r\n                        while ( aoLocal[i][j+iColspan] !== undefined &&\r\n                            aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\r\n                        {\r\n                            /* Must update the applied array over the rows for the columns */\r\n                            for ( k=0 ; k<iRowspan ; k++ )\r\n                            {\r\n                                aApplied[i+k][j+iColspan] = 1;\r\n                            }\r\n                            iColspan++;\r\n                        }\r\n\r\n                        /* Do the actual expansion in the DOM */\r\n                        $(aoLocal[i][j].cell)\r\n                            .attr('rowspan', iRowspan)\r\n                            .attr('colspan', iColspan);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Insert the required TR nodes into the table for display\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDraw( oSettings )\r\n        {\r\n            /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\r\n            var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\r\n            if ( $.inArray( false, aPreDraw ) !== -1 )\r\n            {\r\n                _fnProcessingDisplay( oSettings, false );\r\n                return;\r\n            }\r\n\r\n            var i, iLen, n;\r\n            var anRows = [];\r\n            var iRowCount = 0;\r\n            var asStripeClasses = oSettings.asStripeClasses;\r\n            var iStripes = asStripeClasses.length;\r\n            var iOpenRows = oSettings.aoOpenRows.length;\r\n            var oLang = oSettings.oLanguage;\r\n            var iInitDisplayStart = oSettings.iInitDisplayStart;\r\n            var bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n            var aiDisplay = oSettings.aiDisplay;\r\n\r\n            oSettings.bDrawing = true;\r\n\r\n            /* Check and see if we have an initial draw position from state saving */\r\n            if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\r\n            {\r\n                oSettings._iDisplayStart = bServerSide ?\r\n                    iInitDisplayStart :\r\n                    iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\r\n                        0 :\r\n                        iInitDisplayStart;\r\n\r\n                oSettings.iInitDisplayStart = -1;\r\n            }\r\n\r\n            var iDisplayStart = oSettings._iDisplayStart;\r\n            var iDisplayEnd = oSettings.fnDisplayEnd();\r\n\r\n            /* Server-side processing draw intercept */\r\n            if ( oSettings.bDeferLoading )\r\n            {\r\n                oSettings.bDeferLoading = false;\r\n                oSettings.iDraw++;\r\n                _fnProcessingDisplay( oSettings, false );\r\n            }\r\n            else if ( !bServerSide )\r\n            {\r\n                oSettings.iDraw++;\r\n            }\r\n            else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if ( aiDisplay.length !== 0 )\r\n            {\r\n                var iStart = bServerSide ? 0 : iDisplayStart;\r\n                var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\r\n\r\n                for ( var j=iStart ; j<iEnd ; j++ )\r\n                {\r\n                    var iDataIndex = aiDisplay[j];\r\n                    var aoData = oSettings.aoData[ iDataIndex ];\r\n                    if ( aoData.nTr === null )\r\n                    {\r\n                        _fnCreateTr( oSettings, iDataIndex );\r\n                    }\r\n\r\n                    var nRow = aoData.nTr;\r\n\r\n                    /* Remove the old striping classes and then add the new one */\r\n                    if ( iStripes !== 0 )\r\n                    {\r\n                        var sStripe = asStripeClasses[ iRowCount % iStripes ];\r\n                        if ( aoData._sRowStripe != sStripe )\r\n                        {\r\n                            $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\r\n                            aoData._sRowStripe = sStripe;\r\n                        }\r\n                    }\r\n\r\n                    /* Row callback functions - might want to manipulate the row */\r\n                    _fnCallbackFire( oSettings, 'aoRowCallback', null,\r\n                        [nRow, aoData._aData, iRowCount, j] );\r\n\r\n                    anRows.push( nRow );\r\n                    iRowCount++;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                /* Table is empty - create a row with an empty message in it */\r\n                var sZero = oLang.sZeroRecords;\r\n                if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\r\n                {\r\n                    sZero = oLang.sLoadingRecords;\r\n                }\r\n                else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\r\n                {\r\n                    sZero = oLang.sEmptyTable;\r\n                }\r\n\r\n                anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\r\n                    .append( $('<td />', {\r\n                        'valign':  'top',\r\n                        'colSpan': _fnVisbleColumns( oSettings ),\r\n                        'class':   oSettings.oClasses.sRowEmpty\r\n                    } ).html( sZero ) )[0];\r\n            }\r\n\r\n            /* Header and footer callbacks */\r\n            _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\r\n                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\r\n            _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\r\n                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\r\n            var body = $(oSettings.nTBody);\r\n\r\n            body.children().detach();\r\n            body.append( $(anRows) );\r\n\r\n            /* Call all required callback functions for the end of a draw */\r\n            _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\r\n\r\n            /* Draw is complete, sorting and filtering must be as well */\r\n            oSettings.bSorted = false;\r\n            oSettings.bFiltered = false;\r\n            oSettings.bDrawing = false;\r\n        }\r\n\r\n\r\n        /**\r\n         * Redraw the table - taking account of the various features which are enabled\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {boolean} [holdPosition] Keep the current paging position. By default\r\n         *    the paging is reset to the first page\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnReDraw( settings, holdPosition )\r\n        {\r\n            var\r\n                features = settings.oFeatures,\r\n                sort     = features.bSort,\r\n                filter   = features.bFilter;\r\n\r\n            if ( sort ) {\r\n                _fnSort( settings );\r\n            }\r\n\r\n            if ( filter ) {\r\n                _fnFilterComplete( settings, settings.oPreviousSearch );\r\n            }\r\n            else {\r\n                // No filtering, so we want to just use the display master\r\n                settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n            }\r\n\r\n            if ( holdPosition !== true ) {\r\n                settings._iDisplayStart = 0;\r\n            }\r\n\r\n            _fnDraw( settings );\r\n        }\r\n\r\n\r\n        /**\r\n         * Add the options to the page HTML for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddOptionsHtml ( oSettings )\r\n        {\r\n            var classes = oSettings.oClasses;\r\n            var table = $(oSettings.nTable);\r\n            var holding = $('<div/>').insertBefore( table ); // Holding element for speed\r\n            var features = oSettings.oFeatures;\r\n\r\n            // All DataTables are wrapped in a div\r\n            var insert = $('<div/>', {\r\n                id:      oSettings.sTableId+'_wrapper',\r\n                'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\r\n            } );\r\n\r\n            oSettings.nHolding = holding[0];\r\n            oSettings.nTableWrapper = insert[0];\r\n            oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\r\n\r\n            /* Loop over the user set positioning and place the elements as needed */\r\n            var aDom = oSettings.sDom.split('');\r\n            var featureNode, cOption, nNewNode, cNext, sAttr, j;\r\n            for ( var i=0 ; i<aDom.length ; i++ )\r\n            {\r\n                featureNode = null;\r\n                cOption = aDom[i];\r\n\r\n                if ( cOption == '<' )\r\n                {\r\n                    /* New container div */\r\n                    nNewNode = $('<div/>')[0];\r\n\r\n                    /* Check to see if we should append an id and/or a class name to the container */\r\n                    cNext = aDom[i+1];\r\n                    if ( cNext == \"'\" || cNext == '\"' )\r\n                    {\r\n                        sAttr = \"\";\r\n                        j = 2;\r\n                        while ( aDom[i+j] != cNext )\r\n                        {\r\n                            sAttr += aDom[i+j];\r\n                            j++;\r\n                        }\r\n\r\n                        /* Replace jQuery UI constants @todo depreciated */\r\n                        if ( sAttr == \"H\" )\r\n                        {\r\n                            sAttr = classes.sJUIHeader;\r\n                        }\r\n                        else if ( sAttr == \"F\" )\r\n                        {\r\n                            sAttr = classes.sJUIFooter;\r\n                        }\r\n\r\n                        /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\r\n                         * breaks the string into parts and applies them as needed\r\n                         */\r\n                        if ( sAttr.indexOf('.') != -1 )\r\n                        {\r\n                            var aSplit = sAttr.split('.');\r\n                            nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\r\n                            nNewNode.className = aSplit[1];\r\n                        }\r\n                        else if ( sAttr.charAt(0) == \"#\" )\r\n                        {\r\n                            nNewNode.id = sAttr.substr(1, sAttr.length-1);\r\n                        }\r\n                        else\r\n                        {\r\n                            nNewNode.className = sAttr;\r\n                        }\r\n\r\n                        i += j; /* Move along the position array */\r\n                    }\r\n\r\n                    insert.append( nNewNode );\r\n                    insert = $(nNewNode);\r\n                }\r\n                else if ( cOption == '>' )\r\n                {\r\n                    /* End container div */\r\n                    insert = insert.parent();\r\n                }\r\n                // @todo Move options into their own plugins?\r\n                else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\r\n                {\r\n                    /* Length */\r\n                    featureNode = _fnFeatureHtmlLength( oSettings );\r\n                }\r\n                else if ( cOption == 'f' && features.bFilter )\r\n                {\r\n                    /* Filter */\r\n                    featureNode = _fnFeatureHtmlFilter( oSettings );\r\n                }\r\n                else if ( cOption == 'r' && features.bProcessing )\r\n                {\r\n                    /* pRocessing */\r\n                    featureNode = _fnFeatureHtmlProcessing( oSettings );\r\n                }\r\n                else if ( cOption == 't' )\r\n                {\r\n                    /* Table */\r\n                    featureNode = _fnFeatureHtmlTable( oSettings );\r\n                }\r\n                else if ( cOption ==  'i' && features.bInfo )\r\n                {\r\n                    /* Info */\r\n                    featureNode = _fnFeatureHtmlInfo( oSettings );\r\n                }\r\n                else if ( cOption == 'p' && features.bPaginate )\r\n                {\r\n                    /* Pagination */\r\n                    featureNode = _fnFeatureHtmlPaginate( oSettings );\r\n                }\r\n                else if ( DataTable.ext.feature.length !== 0 )\r\n                {\r\n                    /* Plug-in features */\r\n                    var aoFeatures = DataTable.ext.feature;\r\n                    for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\r\n                    {\r\n                        if ( cOption == aoFeatures[k].cFeature )\r\n                        {\r\n                            featureNode = aoFeatures[k].fnInit( oSettings );\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /* Add to the 2D features array */\r\n                if ( featureNode )\r\n                {\r\n                    var aanFeatures = oSettings.aanFeatures;\r\n\r\n                    if ( ! aanFeatures[cOption] )\r\n                    {\r\n                        aanFeatures[cOption] = [];\r\n                    }\r\n\r\n                    aanFeatures[cOption].push( featureNode );\r\n                    insert.append( featureNode );\r\n                }\r\n            }\r\n\r\n            /* Built our DOM structure - replace the holding div with what we want */\r\n            holding.replaceWith( insert );\r\n        }\r\n\r\n\r\n        /**\r\n         * Use the DOM source to create up an array of header cells. The idea here is to\r\n         * create a layout grid (array) of rows x columns, which contains a reference\r\n         * to the cell that that point in the grid (regardless of col/rowspan), such that\r\n         * any column / row could be removed and the new grid constructed\r\n         *  @param array {object} aLayout Array to store the calculated layout in\r\n         *  @param {node} nThead The header/footer element for the table\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDetectHeader ( aLayout, nThead )\r\n        {\r\n            var nTrs = $(nThead).children('tr');\r\n            var nTr, nCell;\r\n            var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\r\n            var bUnique;\r\n            var fnShiftCol = function ( a, i, j ) {\r\n                var k = a[i];\r\n                while ( k[j] ) {\r\n                    j++;\r\n                }\r\n                return j;\r\n            };\r\n\r\n            aLayout.splice( 0, aLayout.length );\r\n\r\n            /* We know how many rows there are in the layout - so prep it */\r\n            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n            {\r\n                aLayout.push( [] );\r\n            }\r\n\r\n            /* Calculate a layout array */\r\n            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n            {\r\n                nTr = nTrs[i];\r\n                iColumn = 0;\r\n\r\n                /* For every cell in the row... */\r\n                nCell = nTr.firstChild;\r\n                while ( nCell ) {\r\n                    if ( nCell.nodeName.toUpperCase() == \"TD\" ||\r\n                        nCell.nodeName.toUpperCase() == \"TH\" )\r\n                    {\r\n                        /* Get the col and rowspan attributes from the DOM and sanitise them */\r\n                        iColspan = nCell.getAttribute('colspan') * 1;\r\n                        iRowspan = nCell.getAttribute('rowspan') * 1;\r\n                        iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\r\n                        iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\r\n\r\n                        /* There might be colspan cells already in this row, so shift our target\r\n                         * accordingly\r\n                         */\r\n                        iColShifted = fnShiftCol( aLayout, i, iColumn );\r\n\r\n                        /* Cache calculation for unique columns */\r\n                        bUnique = iColspan === 1 ? true : false;\r\n\r\n                        /* If there is col / rowspan, copy the information into the layout grid */\r\n                        for ( l=0 ; l<iColspan ; l++ )\r\n                        {\r\n                            for ( k=0 ; k<iRowspan ; k++ )\r\n                            {\r\n                                aLayout[i+k][iColShifted+l] = {\r\n                                    \"cell\": nCell,\r\n                                    \"unique\": bUnique\r\n                                };\r\n                                aLayout[i+k].nTr = nTr;\r\n                            }\r\n                        }\r\n                    }\r\n                    nCell = nCell.nextSibling;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Get an array of unique th elements, one for each column\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} nHeader automatically detect the layout from this node - optional\r\n         *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\r\n         *  @returns array {node} aReturn list of unique th's\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\r\n        {\r\n            var aReturn = [];\r\n            if ( !aLayout )\r\n            {\r\n                aLayout = oSettings.aoHeader;\r\n                if ( nHeader )\r\n                {\r\n                    aLayout = [];\r\n                    _fnDetectHeader( aLayout, nHeader );\r\n                }\r\n            }\r\n\r\n            for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\r\n            {\r\n                for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\r\n                {\r\n                    if ( aLayout[i][j].unique &&\r\n                        (!aReturn[j] || !oSettings.bSortCellsTop) )\r\n                    {\r\n                        aReturn[j] = aLayout[i][j].cell;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return aReturn;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Create an Ajax call based on the table's settings, taking into account that\r\n         * parameters can have multiple forms, and backwards compatibility.\r\n         *\r\n         * @param {object} oSettings dataTables settings object\r\n         * @param {array} data Data to send to the server, required by\r\n         *     DataTables - may be augmented by developer callbacks\r\n         * @param {function} fn Callback function to run when data is obtained\r\n         */\r\n        function _fnBuildAjax( oSettings, data, fn )\r\n        {\r\n            // Compatibility with 1.9-, allow fnServerData and event to manipulate\r\n            _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\r\n\r\n            // Convert to object based for 1.10+ if using the old array scheme which can\r\n            // come from server-side processing or serverParams\r\n            if ( data && $.isArray(data) ) {\r\n                var tmp = {};\r\n                var rbracket = /(.*?)\\[\\]$/;\r\n\r\n                $.each( data, function (key, val) {\r\n                    var match = val.name.match(rbracket);\r\n\r\n                    if ( match ) {\r\n                        // Support for arrays\r\n                        var name = match[0];\r\n\r\n                        if ( ! tmp[ name ] ) {\r\n                            tmp[ name ] = [];\r\n                        }\r\n                        tmp[ name ].push( val.value );\r\n                    }\r\n                    else {\r\n                        tmp[val.name] = val.value;\r\n                    }\r\n                } );\r\n                data = tmp;\r\n            }\r\n\r\n            var ajaxData;\r\n            var ajax = oSettings.ajax;\r\n            var instance = oSettings.oInstance;\r\n\r\n            if ( $.isPlainObject( ajax ) && ajax.data )\r\n            {\r\n                ajaxData = ajax.data;\r\n\r\n                var newData = $.isFunction( ajaxData ) ?\r\n                    ajaxData( data ) :  // fn can manipulate data or return an object\r\n                    ajaxData;           // object or array to merge\r\n\r\n                // If the function returned an object, use that alone\r\n                data = $.isFunction( ajaxData ) && newData ?\r\n                    newData :\r\n                    $.extend( true, data, newData );\r\n\r\n                // Remove the data property as we've resolved it already and don't want\r\n                // jQuery to do it again (it is restored at the end of the function)\r\n                delete ajax.data;\r\n            }\r\n\r\n            var baseAjax = {\r\n                \"data\": data,\r\n                \"success\": function (json) {\r\n                    var error = json.error || json.sError;\r\n                    if ( error ) {\r\n                        oSettings.oApi._fnLog( oSettings, 0, error );\r\n                    }\r\n\r\n                    oSettings.json = json;\r\n                    _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json] );\r\n                    fn( json );\r\n                },\r\n                \"dataType\": \"json\",\r\n                \"cache\": false,\r\n                \"type\": oSettings.sServerMethod,\r\n                \"error\": function (xhr, error, thrown) {\r\n                    var log = oSettings.oApi._fnLog;\r\n\r\n                    if ( error == \"parsererror\" ) {\r\n                        log( oSettings, 0, 'Invalid JSON response', 1 );\r\n                    }\r\n                    else if ( xhr.readyState === 4 ) {\r\n                        log( oSettings, 0, 'Ajax error', 7 );\r\n                    }\r\n\r\n                    _fnProcessingDisplay( oSettings, false );\r\n                }\r\n            };\r\n\r\n            // Store the data submitted for the API\r\n            oSettings.oAjaxData = data;\r\n\r\n            // Allow plug-ins and external processes to modify the data\r\n            _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\r\n\r\n            if ( oSettings.fnServerData )\r\n            {\r\n                // DataTables 1.9- compatibility\r\n                oSettings.fnServerData.call( instance,\r\n                    oSettings.sAjaxSource,\r\n                    $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\r\n                        return { name: key, value: val };\r\n                    } ),\r\n                    fn,\r\n                    oSettings\r\n                );\r\n            }\r\n            else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\r\n            {\r\n                // DataTables 1.9- compatibility\r\n                oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\r\n                    url: ajax || oSettings.sAjaxSource\r\n                } ) );\r\n            }\r\n            else if ( $.isFunction( ajax ) )\r\n            {\r\n                // Is a function - let the caller define what needs to be done\r\n                oSettings.jqXHR = ajax.call( instance, data, fn, oSettings );\r\n            }\r\n            else\r\n            {\r\n                // Object to extend the base settings\r\n                oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\r\n\r\n                // Restore for next time around\r\n                ajax.data = ajaxData;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Update the table using an Ajax call\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {boolean} Block the table drawing or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxUpdate( oSettings )\r\n        {\r\n            if ( oSettings.bAjaxDataGet )\r\n            {\r\n                oSettings.iDraw++;\r\n                _fnProcessingDisplay( oSettings, true );\r\n                var iColumns = oSettings.aoColumns.length;\r\n                var aoData = _fnAjaxParameters( oSettings );\r\n\r\n                _fnBuildAjax( oSettings, aoData, function(json) {\r\n                    _fnAjaxUpdateDraw( oSettings, json );\r\n                }, oSettings );\r\n\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n\r\n        /**\r\n         * Build up the parameters in an object needed for a server-side processing\r\n         * request. Note that this is basically done twice, is different ways - a modern\r\n         * method which is used by default in DataTables 1.10 which uses objects and\r\n         * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\r\n         * the sAjaxSource option is used in the initialisation, or the legacyAjax\r\n         * option is set.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {bool} block the table drawing or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxParameters( settings )\r\n        {\r\n            var\r\n                columns = settings.aoColumns,\r\n                columnCount = columns.length,\r\n                features = settings.oFeatures,\r\n                preSearch = settings.oPreviousSearch,\r\n                preColSearch = settings.aoPreSearchCols,\r\n                i, data = [], dataProp, column, columnSearch,\r\n                sort = _fnSortFlatten( settings ),\r\n                displayStart = settings._iDisplayStart,\r\n                displayLength = features.bPaginate !== false ?\r\n                    settings._iDisplayLength :\r\n                    -1;\r\n\r\n            var param = function ( name, value ) {\r\n                data.push( { 'name': name, 'value': value } );\r\n            };\r\n\r\n            // DataTables 1.9- compatible method\r\n            param( 'sEcho',          settings.iDraw );\r\n            param( 'iColumns',       columnCount );\r\n            param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\r\n            param( 'iDisplayStart',  displayStart );\r\n            param( 'iDisplayLength', displayLength );\r\n\r\n            // DataTables 1.10+ method\r\n            var d = {\r\n                draw:    settings.iDraw,\r\n                columns: [],\r\n                order:   [],\r\n                start:   displayStart,\r\n                length:  displayLength,\r\n                search:  {\r\n                    value: preSearch.sSearch,\r\n                    regex: preSearch.bRegex\r\n                }\r\n            };\r\n\r\n            for ( i=0 ; i<columnCount ; i++ ) {\r\n                column = columns[i];\r\n                columnSearch = preColSearch[i];\r\n                dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\r\n\r\n                d.columns.push( {\r\n                    data:       dataProp,\r\n                    name:       column.sName,\r\n                    searchable: column.bSearchable,\r\n                    orderable:  column.bSortable,\r\n                    search:     {\r\n                        value: columnSearch.sSearch,\r\n                        regex: columnSearch.bRegex\r\n                    }\r\n                } );\r\n\r\n                param( \"mDataProp_\"+i, dataProp );\r\n\r\n                if ( features.bFilter ) {\r\n                    param( 'sSearch_'+i,     columnSearch.sSearch );\r\n                    param( 'bRegex_'+i,      columnSearch.bRegex );\r\n                    param( 'bSearchable_'+i, column.bSearchable );\r\n                }\r\n\r\n                if ( features.bSort ) {\r\n                    param( 'bSortable_'+i, column.bSortable );\r\n                }\r\n            }\r\n\r\n            if ( features.bFilter ) {\r\n                param( 'sSearch', preSearch.sSearch );\r\n                param( 'bRegex', preSearch.bRegex );\r\n            }\r\n\r\n            if ( features.bSort ) {\r\n                $.each( sort, function ( i, val ) {\r\n                    d.order.push( { column: val.col, dir: val.dir } );\r\n\r\n                    param( 'iSortCol_'+i, val.col );\r\n                    param( 'sSortDir_'+i, val.dir );\r\n                } );\r\n\r\n                param( 'iSortingCols', sort.length );\r\n            }\r\n\r\n            // If the legacy.ajax parameter is null, then we automatically decide which\r\n            // form to use, based on sAjaxSource\r\n            var legacy = DataTable.ext.legacy.ajax;\r\n            if ( legacy === null ) {\r\n                return settings.sAjaxSource ? data : d;\r\n            }\r\n\r\n            // Otherwise, if legacy has been specified then we use that to decide on the\r\n            // form\r\n            return legacy ? data : d;\r\n        }\r\n\r\n\r\n        /**\r\n         * Data the data from the server (nuking the old) and redraw the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} json json data return from the server.\r\n         *  @param {string} json.sEcho Tracking flag for DataTables to match requests\r\n         *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\r\n         *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\r\n         *  @param {array} json.aaData The data to display on this page\r\n         *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxUpdateDraw ( settings, json )\r\n        {\r\n            // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\r\n            // Support both\r\n            var compat = function ( old, modern ) {\r\n                return json[old] !== undefined ? json[old] : json[modern];\r\n            };\r\n\r\n            var draw            = compat( 'sEcho',                'draw' );\r\n            var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\r\n            var rocordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\r\n\r\n            if ( draw ) {\r\n                // Protect against out of sequence returns\r\n                if ( draw*1 < settings.iDraw ) {\r\n                    return;\r\n                }\r\n                settings.iDraw = draw * 1;\r\n            }\r\n\r\n            _fnClearTable( settings );\r\n            settings._iRecordsTotal   = parseInt(recordsTotal, 10);\r\n            settings._iRecordsDisplay = parseInt(rocordsFiltered, 10);\r\n\r\n            var data = _fnAjaxDataSrc( settings, json );\r\n            for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                _fnAddData( settings, data[i] );\r\n            }\r\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n\r\n            settings.bAjaxDataGet = false;\r\n            _fnDraw( settings );\r\n\r\n            if ( ! settings._bInitComplete ) {\r\n                _fnInitComplete( settings, json );\r\n            }\r\n\r\n            settings.bAjaxDataGet = true;\r\n            _fnProcessingDisplay( settings, false );\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the data from the JSON data source to use for drawing a table. Using\r\n         * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\r\n         * source object, or from a processing function.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param  {object} json Data source object / array from the server\r\n         *  @return {array} Array of data to use\r\n         */\r\n        function _fnAjaxDataSrc ( oSettings, json )\r\n        {\r\n            var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\r\n                oSettings.ajax.dataSrc :\r\n                oSettings.sAjaxDataProp; // Compatibility with 1.9-.\r\n\r\n            // Compatibility with 1.9-. In order to read from aaData, check if the\r\n            // default has been changed, if not, check for aaData\r\n            if ( dataSrc === 'data' ) {\r\n                return json.aaData || json[dataSrc];\r\n            }\r\n\r\n            return dataSrc !== \"\" ?\r\n                _fnGetObjectDataFn( dataSrc )( json ) :\r\n                json;\r\n        }\r\n\r\n\r\n        /**\r\n         * Generate the node required for filtering text\r\n         *  @returns {node} Filter control element\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlFilter ( settings )\r\n        {\r\n            var classes = settings.oClasses;\r\n            var tableId = settings.sTableId;\r\n            var previousSearch = settings.oPreviousSearch;\r\n            var features = settings.aanFeatures;\r\n            var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\r\n\r\n            var str = settings.oLanguage.sSearch;\r\n            str = str.match(/_INPUT_/) ?\r\n                str.replace('_INPUT_', input) :\r\n                str+input;\r\n\r\n            var filter = $('<div/>', {\r\n                'id': ! features.f ? tableId+'_filter' : null,\r\n                'class': classes.sFilter\r\n            } )\r\n                .append( $('<label/>' ).append( str ) );\r\n\r\n            var searchFn = function() {\r\n                /* Update all other filter input elements for the new display */\r\n                var n = features.f;\r\n                var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\r\n\r\n                /* Now do the filter */\r\n                if ( val != previousSearch.sSearch ) {\r\n                    _fnFilterComplete( settings, {\r\n                        \"sSearch\": val,\r\n                        \"bRegex\": previousSearch.bRegex,\r\n                        \"bSmart\": previousSearch.bSmart ,\r\n                        \"bCaseInsensitive\": previousSearch.bCaseInsensitive\r\n                    } );\r\n\r\n                    // Need to redraw, without resorting\r\n                    settings._iDisplayStart = 0;\r\n                    _fnDraw( settings );\r\n                }\r\n            };\r\n            var jqFilter = $('input', filter)\r\n                .val( previousSearch.sSearch.replace('\"','&quot;') )\r\n                .bind(\r\n                    'keyup.DT search.DT input.DT paste.DT cut.DT',\r\n                    _fnDataSource( settings ) === 'ssp' ?\r\n                        _fnThrottle( searchFn, 400 ):\r\n                        searchFn\r\n                )\r\n                .bind( 'keypress.DT', function(e) {\r\n                    /* Prevent form submission */\r\n                    if ( e.keyCode == 13 ) {\r\n                        return false;\r\n                    }\r\n                } )\r\n                .attr('aria-controls', tableId);\r\n\r\n            // Update the input elements whenever the table is filtered\r\n            $(settings.nTable).on( 'filter.DT', function () {\r\n                // IE9 throws an 'unknown error' if document.activeElement is used\r\n                // inside an iframe or frame...\r\n                try {\r\n                    if ( jqFilter[0] !== document.activeElement ) {\r\n                        jqFilter.val( previousSearch.sSearch );\r\n                    }\r\n                }\r\n                catch ( e ) {}\r\n            } );\r\n\r\n            return filter[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the table using both the global filter and column based filtering\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} oSearch search information\r\n         *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterComplete ( oSettings, oInput, iForce )\r\n        {\r\n            var oPrevSearch = oSettings.oPreviousSearch;\r\n            var aoPrevSearch = oSettings.aoPreSearchCols;\r\n            var fnSaveFilter = function ( oFilter ) {\r\n                /* Save the filtering values */\r\n                oPrevSearch.sSearch = oFilter.sSearch;\r\n                oPrevSearch.bRegex = oFilter.bRegex;\r\n                oPrevSearch.bSmart = oFilter.bSmart;\r\n                oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\r\n            };\r\n            var fnRegex = function ( o ) {\r\n                // Backwards compatibility with the bEscapeRegex option\r\n                return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\r\n            };\r\n\r\n            // Resolve any column types that are unknown due to addition or invalidation\r\n            // @todo As per sort - can this be moved into an event handler?\r\n            _fnColumnTypes( oSettings );\r\n\r\n            /* In server-side processing all filtering is done by the server, so no point hanging around here */\r\n            if ( _fnDataSource( oSettings ) != 'ssp' )\r\n            {\r\n                /* Global filter */\r\n                _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\r\n                fnSaveFilter( oInput );\r\n\r\n                /* Now do the individual column filter */\r\n                for ( var i=0 ; i<aoPrevSearch.length ; i++ )\r\n                {\r\n                    _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\r\n                        aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\r\n                }\r\n\r\n                /* Custom filtering */\r\n                _fnFilterCustom( oSettings );\r\n            }\r\n            else\r\n            {\r\n                fnSaveFilter( oInput );\r\n            }\r\n\r\n            /* Tell the draw function we have been filtering */\r\n            oSettings.bFiltered = true;\r\n            _fnCallbackFire( oSettings, null, 'search', [oSettings] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Apply custom filtering functions\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterCustom( settings )\r\n        {\r\n            var filters = DataTable.ext.search;\r\n            var displayRows = settings.aiDisplay;\r\n            var row, rowIdx;\r\n\r\n            for ( var i=0, iLen=filters.length ; i<iLen ; i++ ) {\r\n                for ( var j=displayRows.length-1 ; j>=0 ; j-- ) {\r\n                    rowIdx = displayRows[ j ];\r\n                    row = settings.aoData[ rowIdx ];\r\n\r\n                    if ( ! filters[i]( settings, row._aFilterData, rowIdx, row._aData ) ) {\r\n                        displayRows.splice( j, 1 );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the table on a per-column basis\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sInput string to filter on\r\n         *  @param {int} iColumn column to filter\r\n         *  @param {bool} bRegex treat search string as a regular expression or not\r\n         *  @param {bool} bSmart use smart filtering or not\r\n         *  @param {bool} bCaseInsensitive Do case insenstive matching or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\r\n        {\r\n            if ( searchStr === '' ) {\r\n                return;\r\n            }\r\n\r\n            var data;\r\n            var display = settings.aiDisplay;\r\n            var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\r\n\r\n            for ( var i=display.length-1 ; i>=0 ; i-- ) {\r\n                data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\r\n\r\n                if ( ! rpSearch.test( data ) ) {\r\n                    display.splice( i, 1 );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the data table based on user input and draw the table\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {string} input string to filter on\r\n         *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\r\n         *  @param {bool} regex treat as a regular expression or not\r\n         *  @param {bool} smart perform smart filtering or not\r\n         *  @param {bool} caseInsensitive Do case insenstive matching or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\r\n        {\r\n            var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\r\n            var prevSearch = settings.oPreviousSearch.sSearch;\r\n            var displayMaster = settings.aiDisplayMaster;\r\n            var display, invalidated, i;\r\n\r\n            // Need to take account of custom filtering functions - always filter\r\n            if ( DataTable.ext.search.length !== 0 ) {\r\n                force = true;\r\n            }\r\n\r\n            // Check if any of the rows were invalidated\r\n            invalidated = _fnFilterData( settings );\r\n\r\n            // If the input is blank - we just want the full data set\r\n            if ( input.length <= 0 ) {\r\n                settings.aiDisplay = displayMaster.slice();\r\n            }\r\n            else {\r\n                // New search - start from the master array\r\n                if ( invalidated ||\r\n                    force ||\r\n                    prevSearch.length > input.length ||\r\n                    input.indexOf(prevSearch) !== 0 ||\r\n                    settings.bSorted // On resort, the display master needs to be\r\n                // re-filtered since indexes will have changed\r\n                    ) {\r\n                    settings.aiDisplay = displayMaster.slice();\r\n                }\r\n\r\n                // Search the display array\r\n                display = settings.aiDisplay;\r\n\r\n                for ( i=display.length-1 ; i>=0 ; i-- ) {\r\n                    if ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\r\n                        display.splice( i, 1 );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Build a regular expression object suitable for searching a table\r\n         *  @param {string} sSearch string to search for\r\n         *  @param {bool} bRegex treat as a regular expression or not\r\n         *  @param {bool} bSmart perform smart filtering or not\r\n         *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n         *  @returns {RegExp} constructed object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\r\n        {\r\n            search = regex ?\r\n                search :\r\n                _fnEscapeRegex( search );\r\n\r\n            if ( smart ) {\r\n                /* For smart filtering we want to allow the search to work regardless of\r\n                 * word order. We also want double quoted text to be preserved, so word\r\n                 * order is important - a la google. So this is what we want to\r\n                 * generate:\r\n                 * \r\n                 * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\r\n                 */\r\n                var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || '', function ( word ) {\r\n                    return word.charAt(0) === '\"' ?\r\n                        word.match( /^\"(.*)\"$/ )[1] :\r\n                        word;\r\n                } );\r\n\r\n                search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\r\n            }\r\n\r\n            return new RegExp( search, caseInsensitive ? 'i' : '' );\r\n        }\r\n\r\n\r\n        /**\r\n         * scape a string such that it can be used in a regular expression\r\n         *  @param {string} sVal string to escape\r\n         *  @returns {string} escaped string\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnEscapeRegex ( sVal )\r\n        {\r\n            return sVal.replace( _re_escape_regex, '\\\\$1' );\r\n        }\r\n\r\n\r\n\r\n        var __filter_div = $('<div>')[0];\r\n        var __filter_div_textContent = __filter_div.textContent !== undefined;\r\n\r\n        // Update the filtering data for each row if needed (by invalidation or first run)\r\n        function _fnFilterData ( settings )\r\n        {\r\n            var columns = settings.aoColumns;\r\n            var column;\r\n            var i, j, ien, jen, filterData, cellData, row;\r\n            var fomatters = DataTable.ext.type.search;\r\n            var wasInvalidated = false;\r\n\r\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                row = settings.aoData[i];\r\n\r\n                if ( ! row._aFilterData ) {\r\n                    filterData = [];\r\n\r\n                    for ( j=0, jen=columns.length ; j<jen ; j++ ) {\r\n                        column = columns[j];\r\n\r\n                        if ( column.bSearchable ) {\r\n                            cellData = _fnGetCellData( settings, i, j, 'filter' );\r\n\r\n                            cellData = fomatters[ column.sType ] ?\r\n                                fomatters[ column.sType ]( cellData ) :\r\n                                cellData !== null ?\r\n                                    cellData :\r\n                                    '';\r\n                        }\r\n                        else {\r\n                            cellData = '';\r\n                        }\r\n\r\n                        // If it looks like there is an HTML entity in the string,\r\n                        // attempt to decode it so sorting works as expected. Note that\r\n                        // we could use a single line of jQuery to do this, but the DOM\r\n                        // method used here is much faster http://jsperf.com/html-decode\r\n                        if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\r\n                            __filter_div.innerHTML = cellData;\r\n                            cellData = __filter_div_textContent ?\r\n                                __filter_div.textContent :\r\n                                __filter_div.innerText;\r\n                        }\r\n\r\n                        if ( cellData.replace ) {\r\n                            cellData = cellData.replace(/[\\r\\n]/g, '');\r\n                        }\r\n\r\n                        filterData.push( cellData );\r\n                    }\r\n\r\n                    row._aFilterData = filterData;\r\n                    row._sFilterRow = filterData.join('  ');\r\n                    wasInvalidated = true;\r\n                }\r\n            }\r\n\r\n            return wasInvalidated;\r\n        }\r\n\r\n        /**\r\n         * Generate the node required for the info display\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {node} Information element\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlInfo ( settings )\r\n        {\r\n            var\r\n                tid = settings.sTableId,\r\n                nodes = settings.aanFeatures.i,\r\n                n = $('<div/>', {\r\n                    'class': settings.oClasses.sInfo,\r\n                    'id': ! nodes ? tid+'_info' : null\r\n                } );\r\n\r\n            if ( ! nodes ) {\r\n                // Update display on each draw\r\n                settings.aoDrawCallback.push( {\r\n                    \"fn\": _fnUpdateInfo,\r\n                    \"sName\": \"information\"\r\n                } );\r\n\r\n                n\r\n                    .attr( 'role', 'status' )\r\n                    .attr( 'aria-live', 'polite' );\r\n\r\n                // Table is described by our info div\r\n                $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\r\n            }\r\n\r\n            return n[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Update the information elements in the display\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnUpdateInfo ( settings )\r\n        {\r\n            /* Show information about the table */\r\n            var nodes = settings.aanFeatures.i;\r\n            if ( nodes.length === 0 ) {\r\n                return;\r\n            }\r\n\r\n            var\r\n                lang  = settings.oLanguage,\r\n                start = settings._iDisplayStart+1,\r\n                end   = settings.fnDisplayEnd(),\r\n                max   = settings.fnRecordsTotal(),\r\n                total = settings.fnRecordsDisplay(),\r\n                out   = total ?\r\n                    lang.sInfo :\r\n                    lang.sInfoEmpty;\r\n\r\n            if ( total !== max ) {\r\n                /* Record set after filtering */\r\n                out += ' ' + lang.sInfoFiltered;\r\n            }\r\n\r\n            // Convert the macros\r\n            out += lang.sInfoPostFix;\r\n            out = _fnInfoMacros( settings, out );\r\n\r\n            var callback = lang.fnInfoCallback;\r\n            if ( callback !== null ) {\r\n                out = callback.call( settings.oInstance,\r\n                    settings, start, end, max, total, out\r\n                );\r\n            }\r\n\r\n            $(nodes).html( out );\r\n        }\r\n\r\n\r\n        function _fnInfoMacros ( settings, str )\r\n        {\r\n            // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\r\n            // internally\r\n            var\r\n                formatter  = settings.fnFormatNumber,\r\n                start      = settings._iDisplayStart+1,\r\n                len        = settings._iDisplayLength,\r\n                vis        = settings.fnRecordsDisplay(),\r\n                all        = len === -1;\r\n\r\n            return str.\r\n                replace(/_START_/g, formatter.call( settings, start ) ).\r\n                replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\r\n                replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\r\n                replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\r\n                replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\r\n                replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Draw the table for the first time, adding all required features\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnInitialise ( settings )\r\n        {\r\n            var i, iLen, iAjaxStart=settings.iInitDisplayStart;\r\n            var columns = settings.aoColumns, column;\r\n            var features = settings.oFeatures;\r\n\r\n            /* Ensure that the table data is fully initialised */\r\n            if ( ! settings.bInitialised ) {\r\n                setTimeout( function(){ _fnInitialise( settings ); }, 200 );\r\n                return;\r\n            }\r\n\r\n            /* Show the display HTML options */\r\n            _fnAddOptionsHtml( settings );\r\n\r\n            /* Build and draw the header / footer for the table */\r\n            _fnBuildHead( settings );\r\n            _fnDrawHead( settings, settings.aoHeader );\r\n            _fnDrawHead( settings, settings.aoFooter );\r\n\r\n            /* Okay to show that something is going on now */\r\n            _fnProcessingDisplay( settings, true );\r\n\r\n            /* Calculate sizes for columns */\r\n            if ( features.bAutoWidth ) {\r\n                _fnCalculateColumnWidths( settings );\r\n            }\r\n\r\n            for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\r\n                column = columns[i];\r\n\r\n                if ( column.sWidth ) {\r\n                    column.nTh.style.width = _fnStringToCss( column.sWidth );\r\n                }\r\n            }\r\n\r\n            // If there is default sorting required - let's do it. The sort function\r\n            // will do the drawing for us. Otherwise we draw the table regardless of the\r\n            // Ajax source - this allows the table to look initialised for Ajax sourcing\r\n            // data (show 'loading' message possibly)\r\n            _fnReDraw( settings );\r\n\r\n            // Server-side processing init complete is done by _fnAjaxUpdateDraw\r\n            var dataSrc = _fnDataSource( settings );\r\n            if ( dataSrc != 'ssp' ) {\r\n                // if there is an ajax source load the data\r\n                if ( dataSrc == 'ajax' ) {\r\n                    _fnBuildAjax( settings, [], function(json) {\r\n                        var aData = _fnAjaxDataSrc( settings, json );\r\n\r\n                        // Got the data - add it to the table\r\n                        for ( i=0 ; i<aData.length ; i++ ) {\r\n                            _fnAddData( settings, aData[i] );\r\n                        }\r\n\r\n                        // Reset the init display for cookie saving. We've already done\r\n                        // a filter, and therefore cleared it before. So we need to make\r\n                        // it appear 'fresh'\r\n                        settings.iInitDisplayStart = iAjaxStart;\r\n\r\n                        _fnReDraw( settings );\r\n\r\n                        _fnProcessingDisplay( settings, false );\r\n                        _fnInitComplete( settings, json );\r\n                    }, settings );\r\n                }\r\n                else {\r\n                    _fnProcessingDisplay( settings, false );\r\n                    _fnInitComplete( settings );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Draw the table for the first time, adding all required features\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\r\n         *    with client-side processing (optional)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnInitComplete ( settings, json )\r\n        {\r\n            settings._bInitComplete = true;\r\n\r\n            // On an Ajax load we now have data and therefore want to apply the column\r\n            // sizing\r\n            if ( json ) {\r\n                _fnAdjustColumnSizing( settings );\r\n            }\r\n\r\n            _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\r\n        }\r\n\r\n\r\n        function _fnLengthChange ( settings, val )\r\n        {\r\n            var len = parseInt( val, 10 );\r\n            settings._iDisplayLength = len;\r\n\r\n            _fnLengthOverflow( settings );\r\n\r\n            // Fire length change event\r\n            _fnCallbackFire( settings, null, 'length', [settings, len] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Generate the node required for user display length changing\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Display length feature node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlLength ( settings )\r\n        {\r\n            var\r\n                classes  = settings.oClasses,\r\n                tableId  = settings.sTableId,\r\n                menu     = settings.aLengthMenu,\r\n                d2       = $.isArray( menu[0] ),\r\n                lengths  = d2 ? menu[0] : menu,\r\n                language = d2 ? menu[1] : menu;\r\n\r\n            var select = $('<select/>', {\r\n                'name':          tableId+'_length',\r\n                'aria-controls': tableId,\r\n                'class':         classes.sLengthSelect\r\n            } );\r\n\r\n            for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\r\n                select[0][ i ] = new Option( language[i], lengths[i] );\r\n            }\r\n\r\n            var div = $('<div><label/></div>').addClass( classes.sLength );\r\n            if ( ! settings.aanFeatures.l ) {\r\n                div[0].id = tableId+'_length';\r\n            }\r\n\r\n            var a = settings.oLanguage.sLengthMenu.split(/(_MENU_)/);\r\n            div.children().append( a.length > 1 ?\r\n                [ a[0], select, a[2] ] :\r\n                a[0]\r\n            );\r\n\r\n            // Can't use `select` variable, as user might provide their own select menu\r\n            $('select', div)\r\n                .val( settings._iDisplayLength )\r\n                .bind( 'change.DT', function(e) {\r\n                    _fnLengthChange( settings, $(this).val() );\r\n                    _fnDraw( settings );\r\n                } );\r\n\r\n            // Update node value whenever anything changes the table's length\r\n            $(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {\r\n                $('select', div).val( len );\r\n            } );\r\n\r\n            return div[0];\r\n        }\r\n\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Note that most of the paging logic is done in\r\n         * DataTable.ext.pager\r\n         */\r\n\r\n        /**\r\n         * Generate the node required for default pagination\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {node} Pagination feature node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlPaginate ( settings )\r\n        {\r\n            var\r\n                type   = settings.sPaginationType,\r\n                plugin = DataTable.ext.pager[ type ],\r\n                modern = typeof plugin === 'function',\r\n                redraw = function( settings ) {\r\n                    _fnDraw( settings );\r\n                },\r\n                node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\r\n                features = settings.aanFeatures;\r\n\r\n            if ( ! modern ) {\r\n                plugin.fnInit( settings, node, redraw );\r\n            }\r\n\r\n            /* Add a draw callback for the pagination on first instance, to update the paging display */\r\n            if ( ! features.p )\r\n            {\r\n                node.id = settings.sTableId+'_paginate';\r\n\r\n                settings.aoDrawCallback.push( {\r\n                    \"fn\": function( settings ) {\r\n                        if ( modern ) {\r\n                            var\r\n                                start      = settings._iDisplayStart,\r\n                                len        = settings._iDisplayLength,\r\n                                visRecords = settings.fnRecordsDisplay(),\r\n                                all        = len === -1,\r\n                                page = all ? 0 : Math.ceil( start / len ),\r\n                                pages = all ? 1 : Math.ceil( visRecords / len ),\r\n                                buttons = plugin(page, pages),\r\n                                i, ien;\r\n\r\n                            for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\r\n                                _fnRenderer( settings, 'pageButton' )(\r\n                                    settings, features.p[i], i, buttons, page, pages\r\n                                );\r\n                            }\r\n                        }\r\n                        else {\r\n                            plugin.fnUpdate( settings, redraw );\r\n                        }\r\n                    },\r\n                    \"sName\": \"pagination\"\r\n                } );\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n\r\n        /**\r\n         * Alter the display settings to change the page\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {string|int} action Paging action to take: \"first\", \"previous\",\r\n         *    \"next\" or \"last\" or page number to jump to (integer)\r\n         *  @param [bool] redraw Automatically draw the update or not\r\n         *  @returns {bool} true page has changed, false - no change\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnPageChange ( settings, action, redraw )\r\n        {\r\n            var\r\n                start     = settings._iDisplayStart,\r\n                len       = settings._iDisplayLength,\r\n                records   = settings.fnRecordsDisplay();\r\n\r\n            if ( records === 0 || len === -1 )\r\n            {\r\n                start = 0;\r\n            }\r\n            else if ( typeof action === \"number\" )\r\n            {\r\n                start = action * len;\r\n\r\n                if ( start > records )\r\n                {\r\n                    start = 0;\r\n                }\r\n            }\r\n            else if ( action == \"first\" )\r\n            {\r\n                start = 0;\r\n            }\r\n            else if ( action == \"previous\" )\r\n            {\r\n                start = len >= 0 ?\r\n                    start - len :\r\n                    0;\r\n\r\n                if ( start < 0 )\r\n                {\r\n                    start = 0;\r\n                }\r\n            }\r\n            else if ( action == \"next\" )\r\n            {\r\n                if ( start + len < records )\r\n                {\r\n                    start += len;\r\n                }\r\n            }\r\n            else if ( action == \"last\" )\r\n            {\r\n                start = Math.floor( (records-1) / len) * len;\r\n            }\r\n            else\r\n            {\r\n                _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\r\n            }\r\n\r\n            var changed = settings._iDisplayStart !== start;\r\n            settings._iDisplayStart = start;\r\n\r\n            if ( changed ) {\r\n                _fnCallbackFire( settings, null, 'page', [settings] );\r\n\r\n                if ( redraw ) {\r\n                    _fnDraw( settings );\r\n                }\r\n            }\r\n\r\n            return changed;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Generate the node required for the processing node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Processing element\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlProcessing ( settings )\r\n        {\r\n            return $('<div/>', {\r\n                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\r\n                'class': settings.oClasses.sProcessing\r\n            } )\r\n                .html( settings.oLanguage.sProcessing )\r\n                .insertBefore( settings.nTable )[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Display or hide the processing indicator\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {bool} show Show the processing indicator (true) or not (false)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnProcessingDisplay ( settings, show )\r\n        {\r\n            if ( settings.oFeatures.bProcessing ) {\r\n                $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'processing', [settings, show] );\r\n        }\r\n\r\n        /**\r\n         * Add any control elements for the table - specifically scrolling\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Node to add to the DOM\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlTable ( settings )\r\n        {\r\n            var table = $(settings.nTable);\r\n\r\n            // Add the ARIA grid role to the table\r\n            table.attr( 'role', 'grid' );\r\n\r\n            // Scrolling from here on in\r\n            var scroll = settings.oScroll;\r\n\r\n            if ( scroll.sX === '' && scroll.sY === '' ) {\r\n                return settings.nTable;\r\n            }\r\n\r\n            var scrollX = scroll.sX;\r\n            var scrollY = scroll.sY;\r\n            var classes = settings.oClasses;\r\n            var caption = table.children('caption');\r\n            var captionSide = caption.length ? caption[0]._captionSide : null;\r\n            var headerClone = $( table[0].cloneNode(false) );\r\n            var footerClone = $( table[0].cloneNode(false) );\r\n            var footer = table.children('tfoot');\r\n            var _div = '<div/>';\r\n            var size = function ( s ) {\r\n                return !s ? null : _fnStringToCss( s );\r\n            };\r\n\r\n            // This is fairly messy, but with x scrolling enabled, if the table has a\r\n            // width attribute, regardless of any width applied using the column width\r\n            // options, the browser will shrink or grow the table as needed to fit into\r\n            // that 100%. That would make the width options useless. So we remove it.\r\n            // This is okay, under the assumption that width:100% is applied to the\r\n            // table in CSS (it is in the default stylesheet) which will set the table\r\n            // width as appropriate (the attribute and css behave differently...)\r\n            if ( scroll.sX && table.attr('width') === '100%' ) {\r\n                table.removeAttr('width');\r\n            }\r\n\r\n            if ( ! footer.length ) {\r\n                footer = null;\r\n            }\r\n\r\n            /*\r\n             * The HTML structure that we want to generate in this function is:\r\n             *  div - scroller\r\n             *    div - scroll head\r\n             *      div - scroll head inner\r\n             *        table - scroll head table\r\n             *          thead - thead\r\n             *    div - scroll body\r\n             *      table - table (master table)\r\n             *        thead - thead clone for sizing\r\n             *        tbody - tbody\r\n             *    div - scroll foot\r\n             *      div - scroll foot inner\r\n             *        table - scroll foot table\r\n             *          tfoot - tfoot\r\n             */\r\n            var scroller = $( _div, { 'class': classes.sScrollWrapper } )\r\n                .append(\r\n                    $(_div, { 'class': classes.sScrollHead } )\r\n                        .css( {\r\n                            overflow: 'hidden',\r\n                            position: 'relative',\r\n                            border: 0,\r\n                            width: scrollX ? size(scrollX) : '100%'\r\n                        } )\r\n                        .append(\r\n                            $(_div, { 'class': classes.sScrollHeadInner } )\r\n                                .css( {\r\n                                    'box-sizing': 'content-box',\r\n                                    width: scroll.sXInner || '100%'\r\n                                } )\r\n                                .append(\r\n                                    headerClone\r\n                                        .removeAttr('id')\r\n                                        .css( 'margin-left', 0 )\r\n                                        .append(\r\n                                            table.children('thead')\r\n                                        )\r\n                                )\r\n                        )\r\n                        .append( captionSide === 'top' ? caption : null )\r\n                )\r\n                .append(\r\n                    $(_div, { 'class': classes.sScrollBody } )\r\n                        .css( {\r\n                            overflow: 'auto',\r\n                            height: size( scrollY ),\r\n                            width: size( scrollX )\r\n                        } )\r\n                        .append( table )\r\n                );\r\n\r\n            if ( footer ) {\r\n                scroller.append(\r\n                    $(_div, { 'class': classes.sScrollFoot } )\r\n                        .css( {\r\n                            overflow: 'hidden',\r\n                            border: 0,\r\n                            width: scrollX ? size(scrollX) : '100%'\r\n                        } )\r\n                        .append(\r\n                            $(_div, { 'class': classes.sScrollFootInner } )\r\n                                .append(\r\n                                    footerClone\r\n                                        .removeAttr('id')\r\n                                        .css( 'margin-left', 0 )\r\n                                        .append(\r\n                                            table.children('tfoot')\r\n                                        )\r\n                                )\r\n                        )\r\n                        .append( captionSide === 'bottom' ? caption : null )\r\n                );\r\n            }\r\n\r\n            var children = scroller.children();\r\n            var scrollHead = children[0];\r\n            var scrollBody = children[1];\r\n            var scrollFoot = footer ? children[2] : null;\r\n\r\n            // When the body is scrolled, then we also want to scroll the headers\r\n            if ( scrollX ) {\r\n                $(scrollBody).scroll( function (e) {\r\n                    var scrollLeft = this.scrollLeft;\r\n\r\n                    scrollHead.scrollLeft = scrollLeft;\r\n\r\n                    if ( footer ) {\r\n                        scrollFoot.scrollLeft = scrollLeft;\r\n                    }\r\n                } );\r\n            }\r\n\r\n            settings.nScrollHead = scrollHead;\r\n            settings.nScrollBody = scrollBody;\r\n            settings.nScrollFoot = scrollFoot;\r\n\r\n            // On redraw - align columns\r\n            settings.aoDrawCallback.push( {\r\n                \"fn\": _fnScrollDraw,\r\n                \"sName\": \"scrolling\"\r\n            } );\r\n\r\n            return scroller[0];\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Update the header, footer and body tables for resizing - i.e. column\r\n         * alignment.\r\n         *\r\n         * Welcome to the most horrible function DataTables. The process that this\r\n         * function follows is basically:\r\n         *   1. Re-create the table inside the scrolling div\r\n         *   2. Take live measurements from the DOM\r\n         *   3. Apply the measurements to align the columns\r\n         *   4. Clean up\r\n         *\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnScrollDraw ( settings )\r\n        {\r\n            // Given that this is such a monster function, a lot of variables are use\r\n            // to try and keep the minimised size as small as possible\r\n            var\r\n                scroll         = settings.oScroll,\r\n                scrollX        = scroll.sX,\r\n                scrollXInner   = scroll.sXInner,\r\n                scrollY        = scroll.sY,\r\n                barWidth       = scroll.iBarWidth,\r\n                divHeader      = $(settings.nScrollHead),\r\n                divHeaderStyle = divHeader[0].style,\r\n                divHeaderInner = divHeader.children('div'),\r\n                divHeaderInnerStyle = divHeaderInner[0].style,\r\n                divHeaderTable = divHeaderInner.children('table'),\r\n                divBodyEl      = settings.nScrollBody,\r\n                divBody        = $(divBodyEl),\r\n                divBodyStyle   = divBodyEl.style,\r\n                divFooter      = $(settings.nScrollFoot),\r\n                divFooterInner = divFooter.children('div'),\r\n                divFooterTable = divFooterInner.children('table'),\r\n                header         = $(settings.nTHead),\r\n                table          = $(settings.nTable),\r\n                tableEl        = table[0],\r\n                tableStyle     = tableEl.style,\r\n                footer         = settings.nTFoot ? $(settings.nTFoot) : null,\r\n                browser        = settings.oBrowser,\r\n                ie67           = browser.bScrollOversize,\r\n                headerTrgEls, footerTrgEls,\r\n                headerSrcEls, footerSrcEls,\r\n                headerCopy, footerCopy,\r\n                headerWidths=[], footerWidths=[],\r\n                headerContent=[],\r\n                idx, correction, sanityWidth,\r\n                zeroOut = function(nSizer) {\r\n                    var style = nSizer.style;\r\n                    style.paddingTop = \"0\";\r\n                    style.paddingBottom = \"0\";\r\n                    style.borderTopWidth = \"0\";\r\n                    style.borderBottomWidth = \"0\";\r\n                    style.height = 0;\r\n                };\r\n\r\n            /*\r\n             * 1. Re-create the table inside the scrolling div\r\n             */\r\n\r\n            // Remove the old minimised thead and tfoot elements in the inner table\r\n            table.children('thead, tfoot').remove();\r\n\r\n            // Clone the current header and footer elements and then place it into the inner table\r\n            headerCopy = header.clone().prependTo( table );\r\n            headerTrgEls = header.find('tr'); // original header is in its own table\r\n            headerSrcEls = headerCopy.find('tr');\r\n            headerCopy.find('th, td').removeAttr('tabindex');\r\n\r\n            if ( footer ) {\r\n                footerCopy = footer.clone().prependTo( table );\r\n                footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\r\n                footerSrcEls = footerCopy.find('tr');\r\n            }\r\n\r\n\r\n            /*\r\n             * 2. Take live measurements from the DOM - do not alter the DOM itself!\r\n             */\r\n\r\n            // Remove old sizing and apply the calculated column widths\r\n            // Get the unique column headers in the newly created (cloned) header. We want to apply the\r\n            // calculated sizes to this header\r\n            if ( ! scrollX )\r\n            {\r\n                divBodyStyle.width = '100%';\r\n                divHeader[0].style.width = '100%';\r\n            }\r\n\r\n            $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\r\n                idx = _fnVisibleToColumnIndex( settings, i );\r\n                el.style.width = settings.aoColumns[idx].sWidth;\r\n            } );\r\n\r\n            if ( footer ) {\r\n                _fnApplyToChildren( function(n) {\r\n                    n.style.width = \"\";\r\n                }, footerSrcEls );\r\n            }\r\n\r\n            // If scroll collapse is enabled, when we put the headers back into the body for sizing, we\r\n            // will end up forcing the scrollbar to appear, making our measurements wrong for when we\r\n            // then hide it (end of this function), so add the header height to the body scroller.\r\n            if ( scroll.bCollapse && scrollY !== \"\" ) {\r\n                divBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+\"px\";\r\n            }\r\n\r\n            // Size the table as a whole\r\n            sanityWidth = table.outerWidth();\r\n            if ( scrollX === \"\" ) {\r\n                // No x scrolling\r\n                tableStyle.width = \"100%\";\r\n\r\n                // IE7 will make the width of the table when 100% include the scrollbar\r\n                // - which is shouldn't. When there is a scrollbar we need to take this\r\n                // into account.\r\n                if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\r\n                    divBody.css('overflow-y') == \"scroll\")\r\n                    ) {\r\n                    tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // x scrolling\r\n                if ( scrollXInner !== \"\" ) {\r\n                    // x scroll inner has been given - use it\r\n                    tableStyle.width = _fnStringToCss(scrollXInner);\r\n                }\r\n                else if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {\r\n                    // There is y-scrolling - try to take account of the y scroll bar\r\n                    tableStyle.width = _fnStringToCss( sanityWidth-barWidth );\r\n                    if ( table.outerWidth() > sanityWidth-barWidth ) {\r\n                        // Not possible to take account of it\r\n                        tableStyle.width = _fnStringToCss( sanityWidth );\r\n                    }\r\n                }\r\n                else {\r\n                    // When all else fails\r\n                    tableStyle.width = _fnStringToCss( sanityWidth );\r\n                }\r\n            }\r\n\r\n            // Recalculate the sanity width - now that we've applied the required width,\r\n            // before it was a temporary variable. This is required because the column\r\n            // width calculation is done before this table DOM is created.\r\n            sanityWidth = table.outerWidth();\r\n\r\n            // Hidden header should have zero height, so remove padding and borders. Then\r\n            // set the width based on the real headers\r\n\r\n            // Apply all styles in one pass\r\n            _fnApplyToChildren( zeroOut, headerSrcEls );\r\n\r\n            // Read all widths in next pass\r\n            _fnApplyToChildren( function(nSizer) {\r\n                headerContent.push( nSizer.innerHTML );\r\n                headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n            }, headerSrcEls );\r\n\r\n            // Apply all widths in final pass\r\n            _fnApplyToChildren( function(nToSize, i) {\r\n                nToSize.style.width = headerWidths[i];\r\n            }, headerTrgEls );\r\n\r\n            $(headerSrcEls).height(0);\r\n\r\n            /* Same again with the footer if we have one */\r\n            if ( footer )\r\n            {\r\n                _fnApplyToChildren( zeroOut, footerSrcEls );\r\n\r\n                _fnApplyToChildren( function(nSizer) {\r\n                    footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n                }, footerSrcEls );\r\n\r\n                _fnApplyToChildren( function(nToSize, i) {\r\n                    nToSize.style.width = footerWidths[i];\r\n                }, footerTrgEls );\r\n\r\n                $(footerSrcEls).height(0);\r\n            }\r\n\r\n\r\n            /*\r\n             * 3. Apply the measurements\r\n             */\r\n\r\n            // \"Hide\" the header and footer that we used for the sizing. We need to keep\r\n            // the content of the cell so that the width applied to the header and body\r\n            // both match, but we want to hide it completely. We want to also fix their\r\n            // width to what they currently are\r\n            _fnApplyToChildren( function(nSizer, i) {\r\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\r\n                nSizer.style.width = headerWidths[i];\r\n            }, headerSrcEls );\r\n\r\n            if ( footer )\r\n            {\r\n                _fnApplyToChildren( function(nSizer, i) {\r\n                    nSizer.innerHTML = \"\";\r\n                    nSizer.style.width = footerWidths[i];\r\n                }, footerSrcEls );\r\n            }\r\n\r\n            // Sanity check that the table is of a sensible width. If not then we are going to get\r\n            // misalignment - try to prevent this by not allowing the table to shrink below its min width\r\n            if ( table.outerWidth() < sanityWidth )\r\n            {\r\n                // The min width depends upon if we have a vertical scrollbar visible or not */\r\n                correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\r\n                    divBody.css('overflow-y') == \"scroll\")) ?\r\n                    sanityWidth+barWidth :\r\n                    sanityWidth;\r\n\r\n                // IE6/7 are a law unto themselves...\r\n                if ( ie67 && (divBodyEl.scrollHeight >\r\n                    divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\r\n                    ) {\r\n                    tableStyle.width = _fnStringToCss( correction-barWidth );\r\n                }\r\n\r\n                // And give the user a warning that we've stopped the table getting too small\r\n                if ( scrollX === \"\" || scrollXInner !== \"\" ) {\r\n                    _fnLog( settings, 1, 'Possible column misalignment', 6 );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                correction = '100%';\r\n            }\r\n\r\n            // Apply to the container elements\r\n            divBodyStyle.width = _fnStringToCss( correction );\r\n            divHeaderStyle.width = _fnStringToCss( correction );\r\n\r\n            if ( footer ) {\r\n                settings.nScrollFoot.style.width = _fnStringToCss( correction );\r\n            }\r\n\r\n\r\n            /*\r\n             * 4. Clean up\r\n             */\r\n            if ( ! scrollY ) {\r\n                /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\r\n                 * the scrollbar height from the visible display, rather than adding it on. We need to\r\n                 * set the height in order to sort this. Don't want to do it in any other browsers.\r\n                 */\r\n                if ( ie67 ) {\r\n                    divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\r\n                }\r\n            }\r\n\r\n            if ( scrollY && scroll.bCollapse ) {\r\n                divBodyStyle.height = _fnStringToCss( scrollY );\r\n\r\n                var iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?\r\n                    barWidth :\r\n                    0;\r\n\r\n                if ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {\r\n                    divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );\r\n                }\r\n            }\r\n\r\n            /* Finally set the width's of the header and footer tables */\r\n            var iOuterWidth = table.outerWidth();\r\n            divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n            divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\r\n\r\n            // Figure out if there are scrollbar present - if so then we need a the header and footer to\r\n            // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\r\n            var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\r\n            var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\r\n            divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n\r\n            if ( footer ) {\r\n                divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n                divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\r\n                divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n            }\r\n\r\n            /* Adjust the position of the header in case we loose the y-scrollbar */\r\n            divBody.scroll();\r\n\r\n            /* If sorting or filtering has occurred, jump the scrolling back to the top */\r\n            if ( settings.bSorted || settings.bFiltered ) {\r\n                divBodyEl.scrollTop = 0;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Apply a given function to the display child nodes of an element array (typically\r\n         * TD children of TR rows\r\n         *  @param {function} fn Method to apply to the objects\r\n         *  @param array {nodes} an1 List of elements to look through for display children\r\n         *  @param array {nodes} an2 Another list (identical structure to the first) - optional\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnApplyToChildren( fn, an1, an2 )\r\n        {\r\n            var index=0, i=0, iLen=an1.length;\r\n            var nNode1, nNode2;\r\n\r\n            while ( i < iLen ) {\r\n                nNode1 = an1[i].firstChild;\r\n                nNode2 = an2 ? an2[i].firstChild : null;\r\n\r\n                while ( nNode1 ) {\r\n                    if ( nNode1.nodeType === 1 ) {\r\n                        if ( an2 ) {\r\n                            fn( nNode1, nNode2, index );\r\n                        }\r\n                        else {\r\n                            fn( nNode1, index );\r\n                        }\r\n\r\n                        index++;\r\n                    }\r\n\r\n                    nNode1 = nNode1.nextSibling;\r\n                    nNode2 = an2 ? nNode2.nextSibling : null;\r\n                }\r\n\r\n                i++;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        var __re_html_remove = /<.*?>/g;\r\n\r\n\r\n        /**\r\n         * Calculate the width of columns for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCalculateColumnWidths ( oSettings )\r\n        {\r\n            var\r\n                table = oSettings.nTable,\r\n                columns = oSettings.aoColumns,\r\n                scroll = oSettings.oScroll,\r\n                scrollY = scroll.sY,\r\n                scrollX = scroll.sX,\r\n                scrollXInner = scroll.sXInner,\r\n                columnCount = columns.length,\r\n                visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\r\n                headerCells = $('th', oSettings.nTHead),\r\n                tableWidthAttr = table.getAttribute('width'),\r\n                tableContainer = table.parentNode,\r\n                userInputs = false,\r\n                i, column, columnIdx, width, outerWidth;\r\n\r\n            /* Convert any user input sizes into pixel sizes */\r\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                column = columns[ visibleColumns[i] ];\r\n\r\n                if ( column.sWidth !== null ) {\r\n                    column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\r\n\r\n                    userInputs = true;\r\n                }\r\n            }\r\n\r\n            /* If the number of columns in the DOM equals the number that we have to\r\n             * process in DataTables, then we can use the offsets that are created by\r\n             * the web- browser. No custom sizes can be set in order for this to happen,\r\n             * nor scrolling used\r\n             */\r\n            if ( ! userInputs && ! scrollX && ! scrollY &&\r\n                columnCount == _fnVisbleColumns( oSettings ) &&\r\n                columnCount == headerCells.length\r\n                ) {\r\n                for ( i=0 ; i<columnCount ; i++ ) {\r\n                    columns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // Otherwise construct a single row table with the widest node in the\r\n                // data, assign any user defined widths, then insert it into the DOM and\r\n                // allow the browser to do all the hard work of calculating table widths\r\n                var tmpTable = $( table.cloneNode( false ) )\r\n                    .css( 'visibility', 'hidden' )\r\n                    .removeAttr( 'id' )\r\n                    .append( $(oSettings.nTHead).clone( false ) )\r\n                    .append( $(oSettings.nTFoot).clone( false ) )\r\n                    .append( $('<tbody><tr/></tbody>') );\r\n\r\n                // Remove any assigned widths from the footer (from scrolling)\r\n                tmpTable.find('tfoot th, tfoot td').css('width', '');\r\n\r\n                var tr = tmpTable.find( 'tbody tr' );\r\n\r\n                // Apply custom sizing to the cloned header\r\n                headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\r\n\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    column = columns[ visibleColumns[i] ];\r\n\r\n                    headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\r\n                        _fnStringToCss( column.sWidthOrig ) :\r\n                        '';\r\n                }\r\n\r\n                // Find the widest cell for each column and put it into the table\r\n                if ( oSettings.aoData.length ) {\r\n                    for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                        columnIdx = visibleColumns[i];\r\n                        column = columns[ columnIdx ];\r\n\r\n                        $( _fnGetWidestNode( oSettings, columnIdx ) )\r\n                            .clone( false )\r\n                            .append( column.sContentPadding )\r\n                            .appendTo( tr );\r\n                    }\r\n                }\r\n\r\n                // Table has been built, attach to the document so we can work with it\r\n                tmpTable.appendTo( tableContainer );\r\n\r\n                // When scrolling (X or Y) we want to set the width of the table as \r\n                // appropriate. However, when not scrolling leave the table width as it\r\n                // is. This results in slightly different, but I think correct behaviour\r\n                if ( scrollX && scrollXInner ) {\r\n                    tmpTable.width( scrollXInner );\r\n                }\r\n                else if ( scrollX ) {\r\n                    tmpTable.css( 'width', 'auto' );\r\n\r\n                    if ( tmpTable.width() < tableContainer.offsetWidth ) {\r\n                        tmpTable.width( tableContainer.offsetWidth );\r\n                    }\r\n                }\r\n                else if ( scrollY ) {\r\n                    tmpTable.width( tableContainer.offsetWidth );\r\n                }\r\n                else if ( tableWidthAttr ) {\r\n                    tmpTable.width( tableWidthAttr );\r\n                }\r\n\r\n                // Take into account the y scrollbar\r\n                _fnScrollingWidthAdjust( oSettings, tmpTable[0] );\r\n\r\n                // Browsers need a bit of a hand when a width is assigned to any columns\r\n                // when x-scrolling as they tend to collapse the table to the min-width,\r\n                // even if we sent the column widths. So we need to keep track of what\r\n                // the table width should be by summing the user given values, and the\r\n                // automatic values\r\n                if ( scrollX )\r\n                {\r\n                    var total = 0;\r\n\r\n                    for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                        column = columns[ visibleColumns[i] ];\r\n                        outerWidth = $(headerCells[i]).outerWidth();\r\n\r\n                        total += column.sWidthOrig === null ?\r\n                            outerWidth :\r\n                            parseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();\r\n                    }\r\n\r\n                    tmpTable.width( _fnStringToCss( total ) );\r\n                    table.style.width = _fnStringToCss( total );\r\n                }\r\n\r\n                // Get the width of each column in the constructed table\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    column = columns[ visibleColumns[i] ];\r\n                    width = $(headerCells[i]).width();\r\n\r\n                    if ( width ) {\r\n                        column.sWidth = _fnStringToCss( width );\r\n                    }\r\n                }\r\n\r\n                table.style.width = _fnStringToCss( tmpTable.css('width') );\r\n\r\n                // Finished with the table - ditch it\r\n                tmpTable.remove();\r\n            }\r\n\r\n            // If there is a width attr, we want to attach an event listener which\r\n            // allows the table sizing to automatically adjust when the window is\r\n            // resized. Use the width attr rather than CSS, since we can't know if the\r\n            // CSS is a relative value or absolute - DOM read is always px.\r\n            if ( tableWidthAttr ) {\r\n                table.style.width = _fnStringToCss( tableWidthAttr );\r\n            }\r\n\r\n            if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\r\n                $(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\r\n                    _fnAdjustColumnSizing( oSettings );\r\n                } ) );\r\n\r\n                oSettings._reszEvt = true;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Throttle the calls to a function. Arguments and context are maintained for\r\n         * the throttled function\r\n         *  @param {function} fn Function to be called\r\n         *  @param {int} [freq=200] call frequency in mS\r\n         *  @returns {function} wrapped function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnThrottle( fn, freq ) {\r\n            var\r\n                frequency = freq || 200,\r\n                last,\r\n                timer;\r\n\r\n            return function () {\r\n                var\r\n                    that = this,\r\n                    now  = +new Date(),\r\n                    args = arguments;\r\n\r\n                if ( last && now < last + frequency ) {\r\n                    clearTimeout( timer );\r\n\r\n                    timer = setTimeout( function () {\r\n                        last = undefined;\r\n                        fn.apply( that, args );\r\n                    }, frequency );\r\n                }\r\n                else if ( last ) {\r\n                    last = now;\r\n                    fn.apply( that, args );\r\n                }\r\n                else {\r\n                    last = now;\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert a CSS unit width to pixels (e.g. 2em)\r\n         *  @param {string} width width to be converted\r\n         *  @param {node} parent parent to get the with for (required for relative widths) - optional\r\n         *  @returns {int} width in pixels\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnConvertToWidth ( width, parent )\r\n        {\r\n            if ( ! width ) {\r\n                return 0;\r\n            }\r\n\r\n            var n = $('<div/>')\r\n                .css( 'width', _fnStringToCss( width ) )\r\n                .appendTo( parent || document.body );\r\n\r\n            var val = n[0].offsetWidth;\r\n            n.remove();\r\n\r\n            return val;\r\n        }\r\n\r\n\r\n        /**\r\n         * Adjust a table's width to take account of vertical scroll bar\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} n table node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n\r\n        function _fnScrollingWidthAdjust ( settings, n )\r\n        {\r\n            var scroll = settings.oScroll;\r\n\r\n            if ( scroll.sX || scroll.sY ) {\r\n                // When y-scrolling only, we want to remove the width of the scroll bar\r\n                // so the table + scroll bar will fit into the area available, otherwise\r\n                // we fix the table at its current size with no adjustment\r\n                var correction = ! scroll.sX ? scroll.iBarWidth : 0;\r\n                n.style.width = _fnStringToCss( $(n).outerWidth() - correction );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the widest node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} colIdx column of interest\r\n         *  @returns {node} widest table node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetWidestNode( settings, colIdx )\r\n        {\r\n            var idx = _fnGetMaxLenString( settings, colIdx );\r\n            if ( idx < 0 ) {\r\n                return null;\r\n            }\r\n\r\n            var data = settings.aoData[ idx ];\r\n            return ! data.nTr ? // Might not have been created when deferred rendering\r\n                $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\r\n                data.anCells[ colIdx ];\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the maximum strlen for each data column\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} colIdx column of interest\r\n         *  @returns {string} max string length for each column\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetMaxLenString( settings, colIdx )\r\n        {\r\n            var s, max=-1, maxIdx = -1;\r\n\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\r\n                s = s.replace( __re_html_remove, '' );\r\n\r\n                if ( s.length > max ) {\r\n                    max = s.length;\r\n                    maxIdx = i;\r\n                }\r\n            }\r\n\r\n            return maxIdx;\r\n        }\r\n\r\n\r\n        /**\r\n         * Append a CSS unit (only if required) to a string\r\n         *  @param {string} value to css-ify\r\n         *  @returns {string} value with css unit\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnStringToCss( s )\r\n        {\r\n            if ( s === null ) {\r\n                return '0px';\r\n            }\r\n\r\n            if ( typeof s == 'number' ) {\r\n                return s < 0 ?\r\n                    '0px' :\r\n                    s+'px';\r\n            }\r\n\r\n            // Check it has a unit character already\r\n            return s.match(/\\d$/) ?\r\n                s+'px' :\r\n                s;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the width of a scroll bar in this browser being used\r\n         *  @returns {int} width in pixels\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnScrollBarWidth ()\r\n        {\r\n            // On first run a static variable is set, since this is only needed once.\r\n            // Subsequent runs will just use the previously calculated value\r\n            if ( ! DataTable.__scrollbarWidth ) {\r\n                var inner = $('<p/>').css( {\r\n                    width: '100%',\r\n                    height: 200,\r\n                    padding: 0\r\n                } )[0];\r\n\r\n                var outer = $('<div/>')\r\n                    .css( {\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: 200,\r\n                        height: 150,\r\n                        padding: 0,\r\n                        overflow: 'hidden',\r\n                        visibility: 'hidden'\r\n                    } )\r\n                    .append( inner )\r\n                    .appendTo( 'body' );\r\n\r\n                var w1 = inner.offsetWidth;\r\n                outer.css( 'overflow', 'scroll' );\r\n                var w2 = inner.offsetWidth;\r\n\r\n                if ( w1 === w2 ) {\r\n                    w2 = outer[0].clientWidth;\r\n                }\r\n\r\n                outer.remove();\r\n\r\n                DataTable.__scrollbarWidth = w1 - w2;\r\n            }\r\n\r\n            return DataTable.__scrollbarWidth;\r\n        }\r\n\r\n\r\n\r\n        function _fnSortFlatten ( settings )\r\n        {\r\n            var\r\n                i, iLen, k, kLen,\r\n                aSort = [],\r\n                aiOrig = [],\r\n                aoColumns = settings.aoColumns,\r\n                aDataSort, iCol, sType, srcCol,\r\n                fixed = settings.aaSortingFixed,\r\n                fixedObj = $.isPlainObject( fixed ),\r\n                nestedSort = [],\r\n                add = function ( a ) {\r\n                    if ( a.length && ! $.isArray( a[0] ) ) {\r\n                        // 1D array\r\n                        nestedSort.push( a );\r\n                    }\r\n                    else {\r\n                        // 2D array\r\n                        nestedSort.push.apply( nestedSort, a );\r\n                    }\r\n                };\r\n\r\n            // Build the sort array, with pre-fix and post-fix options if they have been\r\n            // specified\r\n            if ( $.isArray( fixed ) ) {\r\n                add( fixed );\r\n            }\r\n\r\n            if ( fixedObj && fixed.pre ) {\r\n                add( fixed.pre );\r\n            }\r\n\r\n            add( settings.aaSorting );\r\n\r\n            if (fixedObj && fixed.post ) {\r\n                add( fixed.post );\r\n            }\r\n\r\n            for ( i=0 ; i<nestedSort.length ; i++ )\r\n            {\r\n                srcCol = nestedSort[i][0];\r\n                aDataSort = aoColumns[ srcCol ].aDataSort;\r\n\r\n                for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\r\n                {\r\n                    iCol = aDataSort[k];\r\n                    sType = aoColumns[ iCol ].sType || 'string';\r\n\r\n                    aSort.push( {\r\n                        src:       srcCol,\r\n                        col:       iCol,\r\n                        dir:       nestedSort[i][1],\r\n                        index:     nestedSort[i][2],\r\n                        type:      sType,\r\n                        formatter: DataTable.ext.type.order[ sType+\"-pre\" ]\r\n                    } );\r\n                }\r\n            }\r\n\r\n            return aSort;\r\n        }\r\n\r\n        /**\r\n         * Change the order of the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         *  @todo This really needs split up!\r\n         */\r\n        function _fnSort ( oSettings )\r\n        {\r\n            var\r\n                i, ien, iLen, j, jLen, k, kLen,\r\n                sDataType, nTh,\r\n                aiOrig = [],\r\n                oExtSort = DataTable.ext.type.order,\r\n                aoData = oSettings.aoData,\r\n                aoColumns = oSettings.aoColumns,\r\n                aDataSort, data, iCol, sType, oSort,\r\n                formatters = 0,\r\n                sortCol,\r\n                displayMaster = oSettings.aiDisplayMaster,\r\n                aSort;\r\n\r\n            // Resolve any column types that are unknown due to addition or invalidation\r\n            // @todo Can this be moved into a 'data-ready' handler which is called when\r\n            //   data is going to be used in the table?\r\n            _fnColumnTypes( oSettings );\r\n\r\n            aSort = _fnSortFlatten( oSettings );\r\n\r\n            for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\r\n                sortCol = aSort[i];\r\n\r\n                // Track if we can use the fast sort algorithm\r\n                if ( sortCol.formatter ) {\r\n                    formatters++;\r\n                }\r\n\r\n                // Load the data needed for the sort, for each cell\r\n                _fnSortData( oSettings, sortCol.col );\r\n            }\r\n\r\n            /* No sorting required if server-side or no sorting array */\r\n            if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\r\n            {\r\n                // Create a value - key array of the current row positions such that we can use their\r\n                // current position during the sort, if values match, in order to perform stable sorting\r\n                for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\r\n                    aiOrig[ displayMaster[i] ] = i;\r\n                }\r\n\r\n                /* Do the sort - here we want multi-column sorting based on a given data source (column)\r\n                 * and sorting function (from oSort) in a certain direction. It's reasonably complex to\r\n                 * follow on it's own, but this is what we want (example two column sorting):\r\n                 *  fnLocalSorting = function(a,b){\r\n                 *    var iTest;\r\n                 *    iTest = oSort['string-asc']('data11', 'data12');\r\n                 *      if (iTest !== 0)\r\n                 *        return iTest;\r\n                 *    iTest = oSort['numeric-desc']('data21', 'data22');\r\n                 *    if (iTest !== 0)\r\n                 *      return iTest;\r\n                 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\r\n                 *  }\r\n                 * Basically we have a test for each sorting column, if the data in that column is equal,\r\n                 * test the next column. If all columns match, then we use a numeric sort on the row\r\n                 * positions in the original data array to provide a stable sort.\r\n                 *\r\n                 * Note - I know it seems excessive to have two sorting methods, but the first is around\r\n                 * 15% faster, so the second is only maintained for backwards compatibility with sorting\r\n                 * methods which do not have a pre-sort formatting function.\r\n                 */\r\n                if ( formatters === aSort.length ) {\r\n                    // All sort types have formatting functions\r\n                    displayMaster.sort( function ( a, b ) {\r\n                        var\r\n                            x, y, k, test, sort,\r\n                            len=aSort.length,\r\n                            dataA = aoData[a]._aSortData,\r\n                            dataB = aoData[b]._aSortData;\r\n\r\n                        for ( k=0 ; k<len ; k++ ) {\r\n                            sort = aSort[k];\r\n\r\n                            x = dataA[ sort.col ];\r\n                            y = dataB[ sort.col ];\r\n\r\n                            test = x<y ? -1 : x>y ? 1 : 0;\r\n                            if ( test !== 0 ) {\r\n                                return sort.dir === 'asc' ? test : -test;\r\n                            }\r\n                        }\r\n\r\n                        x = aiOrig[a];\r\n                        y = aiOrig[b];\r\n                        return x<y ? -1 : x>y ? 1 : 0;\r\n                    } );\r\n                }\r\n                else {\r\n                    // Depreciated - remove in 1.11 (providing a plug-in option)\r\n                    // Not all sort types have formatting methods, so we have to call their sorting\r\n                    // methods.\r\n                    displayMaster.sort( function ( a, b ) {\r\n                        var\r\n                            x, y, k, l, test, sort, fn,\r\n                            len=aSort.length,\r\n                            dataA = aoData[a]._aSortData,\r\n                            dataB = aoData[b]._aSortData;\r\n\r\n                        for ( k=0 ; k<len ; k++ ) {\r\n                            sort = aSort[k];\r\n\r\n                            x = dataA[ sort.col ];\r\n                            y = dataB[ sort.col ];\r\n\r\n                            fn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\r\n                            test = fn( x, y );\r\n                            if ( test !== 0 ) {\r\n                                return test;\r\n                            }\r\n                        }\r\n\r\n                        x = aiOrig[a];\r\n                        y = aiOrig[b];\r\n                        return x<y ? -1 : x>y ? 1 : 0;\r\n                    } );\r\n                }\r\n            }\r\n\r\n            /* Tell the draw function that we have sorted the data */\r\n            oSettings.bSorted = true;\r\n        }\r\n\r\n\r\n        function _fnSortAria ( settings )\r\n        {\r\n            var label;\r\n            var nextSort;\r\n            var columns = settings.aoColumns;\r\n            var aSort = _fnSortFlatten( settings );\r\n            var oAria = settings.oLanguage.oAria;\r\n\r\n            // ARIA attributes - need to loop all columns, to update all (removing old\r\n            // attributes as needed)\r\n            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                var col = columns[i];\r\n                var asSorting = col.asSorting;\r\n                var sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\r\n                var th = col.nTh;\r\n\r\n                // IE7 is throwing an error when setting these properties with jQuery's\r\n                // attr() and removeAttr() methods...\r\n                th.removeAttribute('aria-sort');\r\n\r\n                /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\r\n                if ( col.bSortable ) {\r\n                    if ( aSort.length > 0 && aSort[0].col == i ) {\r\n                        th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\r\n                        nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\r\n                    }\r\n                    else {\r\n                        nextSort = asSorting[0];\r\n                    }\r\n\r\n                    label = sTitle + ( nextSort === \"asc\" ?\r\n                        oAria.sSortAscending :\r\n                        oAria.sSortDescending\r\n                        );\r\n                }\r\n                else {\r\n                    label = sTitle;\r\n                }\r\n\r\n                th.setAttribute('aria-label', label);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Function to run on user sort request\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {node} attachTo node to attach the handler to\r\n         *  @param {int} colIdx column sorting index\r\n         *  @param {boolean} [append=false] Append the requested sort to the existing\r\n         *    sort if true (i.e. multi-column sort)\r\n         *  @param {function} [callback] callback function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortListener ( settings, colIdx, append, callback )\r\n        {\r\n            var col = settings.aoColumns[ colIdx ];\r\n            var sorting = settings.aaSorting;\r\n            var asSorting = col.asSorting;\r\n            var nextSortIdx;\r\n            var next = function ( a ) {\r\n                var idx = a._idx;\r\n                if ( idx === undefined ) {\r\n                    idx = $.inArray( a[1], asSorting );\r\n                }\r\n\r\n                return idx+1 >= asSorting.length ? 0 : idx+1;\r\n            };\r\n\r\n            // If appending the sort then we are multi-column sorting\r\n            if ( append && settings.oFeatures.bSortMulti ) {\r\n                // Are we already doing some kind of sort on this column?\r\n                var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\r\n\r\n                if ( sortIdx !== -1 ) {\r\n                    // Yes, modify the sort\r\n                    nextSortIdx = next( sorting[sortIdx] );\r\n\r\n                    sorting[sortIdx][1] = asSorting[ nextSortIdx ];\r\n                    sorting[sortIdx]._idx = nextSortIdx;\r\n                }\r\n                else {\r\n                    // No sort on this column yet\r\n                    sorting.push( [ colIdx, asSorting[0], 0 ] );\r\n                    sorting[sorting.length-1]._idx = 0;\r\n                }\r\n            }\r\n            else if ( sorting.length && sorting[0][0] == colIdx ) {\r\n                // Single column - already sorting on this column, modify the sort\r\n                nextSortIdx = next( sorting[0] );\r\n\r\n                sorting.length = 1;\r\n                sorting[0][1] = asSorting[ nextSortIdx ];\r\n                sorting[0]._idx = nextSortIdx;\r\n            }\r\n            else {\r\n                // Single column - sort only on this column\r\n                sorting.length = 0;\r\n                sorting.push( [ colIdx, asSorting[0] ] );\r\n                sorting[0]._idx = 0;\r\n            }\r\n\r\n            // Run the sort by calling a full redraw\r\n            _fnReDraw( settings );\r\n\r\n            // callback used for async user interaction\r\n            if ( typeof callback == 'function' ) {\r\n                callback( settings );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Attach a sort handler (click) to a node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {node} attachTo node to attach the handler to\r\n         *  @param {int} colIdx column sorting index\r\n         *  @param {function} [callback] callback function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\r\n        {\r\n            var col = settings.aoColumns[ colIdx ];\r\n\r\n            _fnBindAction( attachTo, {}, function (e) {\r\n                /* If the column is not sortable - don't to anything */\r\n                if ( col.bSortable === false ) {\r\n                    return;\r\n                }\r\n\r\n                // If processing is enabled use a timeout to allow the processing\r\n                // display to be shown - otherwise to it synchronously\r\n                if ( settings.oFeatures.bProcessing ) {\r\n                    _fnProcessingDisplay( settings, true );\r\n\r\n                    setTimeout( function() {\r\n                        _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n\r\n                        // In server-side processing, the draw callback will remove the\r\n                        // processing display\r\n                        if ( _fnDataSource( settings ) !== 'ssp' ) {\r\n                            _fnProcessingDisplay( settings, false );\r\n                        }\r\n                    }, 0 );\r\n                }\r\n                else {\r\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n                }\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Set the sorting classes on table's body, Note: it is safe to call this function\r\n         * when bSort and bSortClasses are false\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortingClasses( settings )\r\n        {\r\n            var oldSort = settings.aLastSort;\r\n            var sortClass = settings.oClasses.sSortColumn;\r\n            var sort = _fnSortFlatten( settings );\r\n            var features = settings.oFeatures;\r\n            var i, ien, colIdx;\r\n\r\n            if ( features.bSort && features.bSortClasses ) {\r\n                // Remove old sorting classes\r\n                for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\r\n                    colIdx = oldSort[i].src;\r\n\r\n                    // Remove column sorting\r\n                    $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                        .removeClass( sortClass + (i<2 ? i+1 : 3) );\r\n                }\r\n\r\n                // Add new column sorting\r\n                for ( i=0, ien=sort.length ; i<ien ; i++ ) {\r\n                    colIdx = sort[i].src;\r\n\r\n                    $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                        .addClass( sortClass + (i<2 ? i+1 : 3) );\r\n                }\r\n            }\r\n\r\n            settings.aLastSort = sort;\r\n        }\r\n\r\n\r\n        // Get the data to sort a column, be it from cache, fresh (populating the\r\n        // cache), or from a sort formatter\r\n        function _fnSortData( settings, idx )\r\n        {\r\n            // Custom sorting function - provided by the sort data type\r\n            var column = settings.aoColumns[ idx ];\r\n            var customSort = DataTable.ext.order[ column.sSortDataType ];\r\n            var customData;\r\n\r\n            if ( customSort ) {\r\n                customData = customSort.call( settings.oInstance, settings, idx,\r\n                    _fnColumnIndexToVisible( settings, idx )\r\n                );\r\n            }\r\n\r\n            // Use / populate cache\r\n            var row, cellData;\r\n            var formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\r\n\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                row = settings.aoData[i];\r\n\r\n                if ( ! row._aSortData ) {\r\n                    row._aSortData = [];\r\n                }\r\n\r\n                if ( ! row._aSortData[idx] || customSort ) {\r\n                    cellData = customSort ?\r\n                        customData[i] : // If there was a custom sort function, use data from there\r\n                        _fnGetCellData( settings, i, idx, 'sort' );\r\n\r\n                    row._aSortData[ idx ] = formatter ?\r\n                        formatter( cellData ) :\r\n                        cellData;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Save the state of a table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSaveState ( oSettings )\r\n        {\r\n            if ( !oSettings.oFeatures.bStateSave || oSettings.bDestroying )\r\n            {\r\n                return;\r\n            }\r\n\r\n            /* Store the interesting variables */\r\n            var i, iLen;\r\n            var oState = {\r\n                \"iCreate\":      +new Date(),\r\n                \"iStart\":       oSettings._iDisplayStart,\r\n                \"iLength\":      oSettings._iDisplayLength,\r\n                \"aaSorting\":    $.extend( true, [], oSettings.aaSorting ),\r\n                \"oSearch\":      $.extend( true, {}, oSettings.oPreviousSearch ),\r\n                \"aoSearchCols\": $.extend( true, [], oSettings.aoPreSearchCols ),\r\n                \"abVisCols\":    _pluck( oSettings.aoColumns, 'bVisible' )\r\n            };\r\n\r\n            _fnCallbackFire( oSettings, \"aoStateSaveParams\", 'stateSaveParams', [oSettings, oState] );\r\n\r\n            oSettings.fnStateSaveCallback.call( oSettings.oInstance, oSettings, oState );\r\n        }\r\n\r\n\r\n        /**\r\n         * Attempt to load a saved table state\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} oInit DataTables init object so we can override settings\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLoadState ( oSettings, oInit )\r\n        {\r\n            var i, ien;\r\n            var columns = oSettings.aoColumns;\r\n\r\n            if ( ! oSettings.oFeatures.bStateSave ) {\r\n                return;\r\n            }\r\n\r\n            var oData = oSettings.fnStateLoadCallback.call( oSettings.oInstance, oSettings );\r\n            if ( !oData ) {\r\n                return;\r\n            }\r\n\r\n            /* Allow custom and plug-in manipulation functions to alter the saved data set and\r\n             * cancelling of loading by returning false\r\n             */\r\n            var abStateLoad = _fnCallbackFire( oSettings, 'aoStateLoadParams', 'stateLoadParams', [oSettings, oData] );\r\n            if ( $.inArray( false, abStateLoad ) !== -1 ) {\r\n                return;\r\n            }\r\n\r\n            /* Reject old data */\r\n            var duration = oSettings.iStateDuration;\r\n            if ( duration > 0 && oData.iCreate < +new Date() - (duration*1000) ) {\r\n                return;\r\n            }\r\n\r\n            // Number of columns have changed - all bets are off, no restore of settings\r\n            if ( columns.length !== oData.aoSearchCols.length ) {\r\n                return;\r\n            }\r\n\r\n            /* Store the saved state so it might be accessed at any time */\r\n            oSettings.oLoadedState = $.extend( true, {}, oData );\r\n\r\n            /* Restore key features */\r\n            oSettings._iDisplayStart    = oData.iStart;\r\n            oSettings.iInitDisplayStart = oData.iStart;\r\n            oSettings._iDisplayLength   = oData.iLength;\r\n            oSettings.aaSorting = $.map( oData.aaSorting, function ( col, i ) {\r\n                return col[0] >= columns.length ?\r\n                    [ 0, col[1] ] :\r\n                    col;\r\n            } );\r\n\r\n            /* Search filtering  */\r\n            $.extend( oSettings.oPreviousSearch, oData.oSearch );\r\n            $.extend( true, oSettings.aoPreSearchCols, oData.aoSearchCols );\r\n\r\n            /* Column visibility state */\r\n            var visColumns = oData.abVisCols;\r\n            for ( i=0, ien=visColumns.length ; i<ien ; i++ ) {\r\n                columns[i].bVisible = visColumns[i];\r\n            }\r\n\r\n            _fnCallbackFire( oSettings, 'aoStateLoaded', 'stateLoaded', [oSettings, oData] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Return the settings object for a particular table\r\n         *  @param {node} table table we are using as a dataTable\r\n         *  @returns {object} Settings object - or null if not found\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSettingsFromNode ( table )\r\n        {\r\n            var settings = DataTable.settings;\r\n            var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\r\n\r\n            return idx !== -1 ?\r\n                settings[ idx ] :\r\n                null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Log an error message\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} level log error messages, or display them to the user\r\n         *  @param {string} msg error message\r\n         *  @param {int} tn Technical note id to get more information about the error.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLog( settings, level, msg, tn )\r\n        {\r\n            msg = 'DataTables warning: '+\r\n                (settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;\r\n\r\n            if ( tn ) {\r\n                msg += '. For more information about this error, please see '+\r\n                    'http://datatables.net/tn/'+tn;\r\n            }\r\n\r\n            if ( ! level  ) {\r\n                // Backwards compatibility pre 1.10\r\n                var ext = DataTable.ext;\r\n                var type = ext.sErrMode || ext.errMode;\r\n\r\n                if ( type == 'alert' ) {\r\n                    alert( msg );\r\n                }\r\n                else {\r\n                    throw new Error(msg);\r\n                }\r\n            }\r\n            else if ( window.console && console.log ) {\r\n                console.log( msg );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * See if a property is defined on one object, if so assign it to the other object\r\n         *  @param {object} ret target object\r\n         *  @param {object} src source object\r\n         *  @param {string} name property\r\n         *  @param {string} [mappedName] name to map too - optional, name used if not given\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnMap( ret, src, name, mappedName )\r\n        {\r\n            if ( $.isArray( name ) ) {\r\n                $.each( name, function (i, val) {\r\n                    if ( $.isArray( val ) ) {\r\n                        _fnMap( ret, src, val[0], val[1] );\r\n                    }\r\n                    else {\r\n                        _fnMap( ret, src, val );\r\n                    }\r\n                } );\r\n\r\n                return;\r\n            }\r\n\r\n            if ( mappedName === undefined ) {\r\n                mappedName = name;\r\n            }\r\n\r\n            if ( src[name] !== undefined ) {\r\n                ret[mappedName] = src[name];\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Extend objects - very similar to jQuery.extend, but deep copy objects, and\r\n         * shallow copy arrays. The reason we need to do this, is that we don't want to\r\n         * deep copy array init values (such as aaSorting) since the dev wouldn't be\r\n         * able to override them, but we do want to deep copy arrays.\r\n         *  @param {object} out Object to extend\r\n         *  @param {object} extender Object from which the properties will be applied to\r\n         *      out\r\n         *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\r\n         *      independent copy with the exception of the `data` or `aaData` parameters\r\n         *      if they are present. This is so you can pass in a collection to\r\n         *      DataTables and have that used as your data source without breaking the\r\n         *      references\r\n         *  @returns {object} out Reference, just for convenience - out === the return.\r\n         *  @memberof DataTable#oApi\r\n         *  @todo This doesn't take account of arrays inside the deep copied objects.\r\n         */\r\n        function _fnExtend( out, extender, breakRefs )\r\n        {\r\n            var val;\r\n\r\n            for ( var prop in extender ) {\r\n                if ( extender.hasOwnProperty(prop) ) {\r\n                    val = extender[prop];\r\n\r\n                    if ( $.isPlainObject( val ) ) {\r\n                        if ( ! $.isPlainObject( out[prop] ) ) {\r\n                            out[prop] = {};\r\n                        }\r\n                        $.extend( true, out[prop], val );\r\n                    }\r\n                    else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\r\n                        out[prop] = val.slice();\r\n                    }\r\n                    else {\r\n                        out[prop] = val;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        }\r\n\r\n\r\n        /**\r\n         * Bind an event handers to allow a click or return key to activate the callback.\r\n         * This is good for accessibility since a return on the keyboard will have the\r\n         * same effect as a click, if the element has focus.\r\n         *  @param {element} n Element to bind the action to\r\n         *  @param {object} oData Data object to pass to the triggered function\r\n         *  @param {function} fn Callback function for when the event is triggered\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBindAction( n, oData, fn )\r\n        {\r\n            $(n)\r\n                .bind( 'click.DT', oData, function (e) {\r\n                    n.blur(); // Remove focus outline for mouse users\r\n                    fn(e);\r\n                } )\r\n                .bind( 'keypress.DT', oData, function (e){\r\n                    if ( e.which === 13 ) {\r\n                        e.preventDefault();\r\n                        fn(e);\r\n                    }\r\n                } )\r\n                .bind( 'selectstart.DT', function () {\r\n                    /* Take the brutal approach to cancelling text selection */\r\n                    return false;\r\n                } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Register a callback function. Easily allows a callback function to be added to\r\n         * an array store of callback functions that can then all be called together.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sStore Name of the array storage for the callbacks in oSettings\r\n         *  @param {function} fn Function to be called back\r\n         *  @param {string} sName Identifying name for the callback (i.e. a label)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCallbackReg( oSettings, sStore, fn, sName )\r\n        {\r\n            if ( fn )\r\n            {\r\n                oSettings[sStore].push( {\r\n                    \"fn\": fn,\r\n                    \"sName\": sName\r\n                } );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Fire callback functions and trigger events. Note that the loop over the\r\n         * callback array store is done backwards! Further note that you do not want to\r\n         * fire off triggers in time sensitive applications (for example cell creation)\r\n         * as its slow.\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {string} callbackArr Name of the array storage for the callbacks in\r\n         *      oSettings\r\n         *  @param {string} event Name of the jQuery custom event to trigger. If null no\r\n         *      trigger is fired\r\n         *  @param {array} args Array of arguments to pass to the callback function /\r\n         *      trigger\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCallbackFire( settings, callbackArr, event, args )\r\n        {\r\n            var ret = [];\r\n\r\n            if ( callbackArr ) {\r\n                ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\r\n                    return val.fn.apply( settings.oInstance, args );\r\n                } );\r\n            }\r\n\r\n            if ( event !== null ) {\r\n                $(settings.nTable).trigger( event+'.dt', args );\r\n            }\r\n\r\n            return ret;\r\n        }\r\n\r\n\r\n        function _fnLengthOverflow ( settings )\r\n        {\r\n            var\r\n                start = settings._iDisplayStart,\r\n                end = settings.fnDisplayEnd(),\r\n                len = settings._iDisplayLength;\r\n\r\n            /* If we have space to show extra rows (backing up from the end point - then do so */\r\n            if ( end === settings.fnRecordsDisplay() )\r\n            {\r\n                start = end - len;\r\n            }\r\n\r\n            if ( len === -1 || start < 0 )\r\n            {\r\n                start = 0;\r\n            }\r\n\r\n            settings._iDisplayStart = start;\r\n        }\r\n\r\n\r\n        function _fnRenderer( settings, type )\r\n        {\r\n            var renderer = settings.renderer;\r\n            var host = DataTable.ext.renderer[type];\r\n\r\n            if ( $.isPlainObject( renderer ) && renderer[type] ) {\r\n                // Specific renderer for this type. If available use it, otherwise use\r\n                // the default.\r\n                return host[renderer[type]] || host._;\r\n            }\r\n            else if ( typeof renderer === 'string' ) {\r\n                // Common renderer - if there is one available for this type use it,\r\n                // otherwise use the default\r\n                return host[renderer] || host._;\r\n            }\r\n\r\n            // Use the default\r\n            return host._;\r\n        }\r\n\r\n\r\n        /**\r\n         * Detect the data source being used for the table. Used to simplify the code\r\n         * a little (ajax) and to make it compress a little smaller.\r\n         *\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {string} Data source\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDataSource ( settings )\r\n        {\r\n            if ( settings.oFeatures.bServerSide ) {\r\n                return 'ssp';\r\n            }\r\n            else if ( settings.ajax || settings.sAjaxSource ) {\r\n                return 'ajax';\r\n            }\r\n            return 'dom';\r\n        }\r\n\r\n\r\n        DataTable = function( options )\r\n        {\r\n            /**\r\n             * Perform a jQuery selector action on the table's TR elements (from the tbody) and\r\n             * return the resulting jQuery object.\r\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n             *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\r\n             *    criterion (\"applied\") or all TR elements (i.e. no filter).\r\n             *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\r\n             *    Can be either 'current', whereby the current sorting of the table is used, or\r\n             *    'original' whereby the original order the data was read into the table is used.\r\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n             *    'current' and filter is 'applied', regardless of what they might be given as.\r\n             *  @returns {object} jQuery object, filtered by the given selector.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Highlight every second row\r\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\r\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\r\n\t\t *      oTable.fnFilter('');\r\n\t\t *    } );\r\n             */\r\n            this.$ = function ( sSelector, oOpts )\r\n            {\r\n                return this.api(true).$( sSelector, oOpts );\r\n            };\r\n\r\n\r\n            /**\r\n             * Almost identical to $ in operation, but in this case returns the data for the matched\r\n             * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\r\n             * rather than any descendants, so the data can be obtained for the row/cell. If matching\r\n             * rows are found, the data returned is the original data array/object that was used to\r\n             * create the row (or a generated array if from a DOM source).\r\n             *\r\n             * This method is often useful in-combination with $ where both functions are given the\r\n             * same parameters and the array indexes will match identically.\r\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n             *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\r\n             *    criterion (\"applied\") or all elements (i.e. no filter).\r\n             *  @param {string} [oOpts.order=current] Order of the data in the processed array.\r\n             *    Can be either 'current', whereby the current sorting of the table is used, or\r\n             *    'original' whereby the original order the data was read into the table is used.\r\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n             *    'current' and filter is 'applied', regardless of what they might be given as.\r\n             *  @returns {array} Data for the matched elements. If any elements, as a result of the\r\n             *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\r\n             *    entry in the array.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the data from the first row in the table\r\n\t\t *      var data = oTable._('tr:first');\r\n\t\t *\r\n\t\t *      // Do something useful with the data\r\n\t\t *      alert( \"First cell is: \"+data[0] );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to 'Webkit' and get all data for\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\r\n\t\t *\r\n\t\t *      // Do something with the data\r\n\t\t *      alert( data.length+\" rows matched the search\" );\r\n\t\t *    } );\r\n             */\r\n            this._ = function ( sSelector, oOpts )\r\n            {\r\n                return this.api(true).rows( sSelector, oOpts ).data();\r\n            };\r\n\r\n\r\n            /**\r\n             * Create a DataTables Api instance, with the currently selected tables for\r\n             * the Api's context.\r\n             * @param {boolean} [traditional=false] Set the API instance's context to be\r\n             *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\r\n             *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\r\n             *   or if all tables captured in the jQuery object should be used.\r\n             * @return {DataTables.Api}\r\n             */\r\n            this.api = function ( traditional )\r\n            {\r\n                return traditional ?\r\n                    new _Api(\r\n                        _fnSettingsFromNode( this[ _ext.iApiIndex ] )\r\n                    ) :\r\n                    new _Api( this );\r\n            };\r\n\r\n\r\n            /**\r\n             * Add a single new row or multiple rows of data to the table. Please note\r\n             * that this is suitable for client-side processing only - if you are using\r\n             * server-side processing (i.e. \"bServerSide\": true), then to add data, you\r\n             * must add it to the data source, i.e. the server-side, through an Ajax call.\r\n             *  @param {array|object} data The data to be added to the table. This can be:\r\n             *    <ul>\r\n             *      <li>1D array of data - add a single row with the data provided</li>\r\n             *      <li>2D array of arrays - add multiple rows in a single call</li>\r\n             *      <li>object - data object when using <i>mData</i></li>\r\n             *      <li>array of objects - multiple data objects when using <i>mData</i></li>\r\n             *    </ul>\r\n             *  @param {bool} [redraw=true] redraw the table or not\r\n             *  @returns {array} An array of integers, representing the list of indexes in\r\n             *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\r\n             *    the table.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    // Global var for counter\r\n             *    var giCount = 2;\r\n             *\r\n             *    $(document).ready(function() {\r\n\t\t *      $('#example').dataTable();\r\n\t\t *    } );\r\n             *\r\n             *    function fnClickAddRow() {\r\n\t\t *      $('#example').dataTable().fnAddData( [\r\n\t\t *        giCount+\".1\",\r\n\t\t *        giCount+\".2\",\r\n\t\t *        giCount+\".3\",\r\n\t\t *        giCount+\".4\" ]\r\n\t\t *      );\r\n\t\t *\r\n\t\t *      giCount++;\r\n\t\t *    }\r\n             */\r\n            this.fnAddData = function( data, redraw )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                /* Check if we want to add multiple rows or not */\r\n                var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\r\n                    api.rows.add( data ) :\r\n                    api.row.add( data );\r\n\r\n                if ( redraw === undefined || redraw ) {\r\n                    api.draw();\r\n                }\r\n\r\n                return rows.flatten().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * This function will make DataTables recalculate the column sizes, based on the data\r\n             * contained in the table and the sizes applied to the columns (in the DOM, CSS or\r\n             * through the sWidth parameter). This can be useful when the width of the table's\r\n             * parent element changes (for example a window resize).\r\n             *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable( {\r\n\t\t *        \"sScrollY\": \"200px\",\r\n\t\t *        \"bPaginate\": false\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      $(window).bind('resize', function () {\r\n\t\t *        oTable.fnAdjustColumnSizing();\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            this.fnAdjustColumnSizing = function ( bRedraw )\r\n            {\r\n                var api = this.api( true ).columns.adjust();\r\n                var settings = api.settings()[0];\r\n                var scroll = settings.oScroll;\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw( false );\r\n                }\r\n                else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\r\n                    /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\r\n                    _fnScrollDraw( settings );\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Quickly and simply clear a table\r\n             *  @param {bool} [bRedraw=true] redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\r\n\t\t *      oTable.fnClearTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnClearTable = function( bRedraw )\r\n            {\r\n                var api = this.api( true ).clear();\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw();\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * The exact opposite of 'opening' a row, this function will close any rows which\r\n             * are currently 'open'.\r\n             *  @param {node} nTr the table row to 'close'\r\n             *  @returns {int} 0 on success, or 1 if failed (can't find the row)\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnClose = function( nTr )\r\n            {\r\n                this.api( true ).row( nTr ).child.hide();\r\n            };\r\n\r\n\r\n            /**\r\n             * Remove a row for the table\r\n             *  @param {mixed} target The index of the row from aoData to be deleted, or\r\n             *    the TR element you want to delete\r\n             *  @param {function|null} [callBack] Callback function\r\n             *  @param {bool} [redraw=true] Redraw the table or not\r\n             *  @returns {array} The row that was deleted\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately remove the first row\r\n\t\t *      oTable.fnDeleteRow( 0 );\r\n\t\t *    } );\r\n             */\r\n            this.fnDeleteRow = function( target, callback, redraw )\r\n            {\r\n                var api = this.api( true );\r\n                var rows = api.rows( target );\r\n                var settings = rows.settings()[0];\r\n                var data = settings.aoData[ rows[0][0] ];\r\n\r\n                rows.remove();\r\n\r\n                if ( callback ) {\r\n                    callback.call( this, settings, data );\r\n                }\r\n\r\n                if ( redraw === undefined || redraw ) {\r\n                    api.draw();\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n\r\n            /**\r\n             * Restore the table to it's original state in the DOM by removing all of DataTables\r\n             * enhancements, alterations to the DOM structure of the table and event listeners.\r\n             *  @param {boolean} [remove=false] Completely remove the table from the DOM\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnDestroy();\r\n\t\t *    } );\r\n             */\r\n            this.fnDestroy = function ( remove )\r\n            {\r\n                this.api( true ).destroy( remove );\r\n            };\r\n\r\n\r\n            /**\r\n             * Redraw the table\r\n             *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\r\n\t\t *      oTable.fnDraw();\r\n\t\t *    } );\r\n             */\r\n            this.fnDraw = function( complete )\r\n            {\r\n                // Note that this isn't an exact match to the old call to _fnDraw - it takes\r\n                // into account the new data, but can old position.\r\n                this.api( true ).draw( ! complete );\r\n            };\r\n\r\n\r\n            /**\r\n             * Filter the input based on data\r\n             *  @param {string} sInput String to filter the table on\r\n             *  @param {int|null} [iColumn] Column to limit filtering to\r\n             *  @param {bool} [bRegex=false] Treat as regular expression or not\r\n             *  @param {bool} [bSmart=true] Perform smart filtering or not\r\n             *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\r\n             *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sometime later - filter...\r\n\t\t *      oTable.fnFilter( 'test string' );\r\n\t\t *    } );\r\n             */\r\n            this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( iColumn === null || iColumn === undefined ) {\r\n                    api.search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n                }\r\n                else {\r\n                    api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n                }\r\n\r\n                api.draw();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the data for the whole table, an individual row or an individual cell based on the\r\n             * provided parameters.\r\n             *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\r\n             *    a TR node then the data source for the whole row will be returned. If given as a\r\n             *    TD/TH cell node then iCol will be automatically calculated and the data for the\r\n             *    cell returned. If given as an integer, then this is treated as the aoData internal\r\n             *    data index for the row (see fnGetPosition) and the data for that row used.\r\n             *  @param {int} [col] Optional column index that you want the data of.\r\n             *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\r\n             *    returned. If mRow is defined, just data for that row, and is iCol is\r\n             *    defined, only data for the designated cell is returned.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    // Row data\r\n             *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('tr').click( function () {\r\n\t\t *        var data = oTable.fnGetData( this );\r\n\t\t *        // ... do something with the array / object of data for the row\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Individual cell data\r\n             *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('td').click( function () {\r\n\t\t *        var sData = oTable.fnGetData( this );\r\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            this.fnGetData = function( src, col )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( src !== undefined ) {\r\n                    var type = src.nodeName ? src.nodeName.toLowerCase() : '';\r\n\r\n                    return col !== undefined || type == 'td' || type == 'th' ?\r\n                        api.cell( src, col ).data() :\r\n                        api.row( src ).data() || null;\r\n                }\r\n\r\n                return api.data().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get an array of the TR nodes that are used in the table's body. Note that you will\r\n             * typically want to use the '$' API method in preference to this as it is more\r\n             * flexible.\r\n             *  @param {int} [iRow] Optional row index for the TR element you want\r\n             *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\r\n             *    in the table's body, or iRow is defined, just the TR element requested.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the nodes from the table\r\n\t\t *      var nNodes = oTable.fnGetNodes( );\r\n\t\t *    } );\r\n             */\r\n            this.fnGetNodes = function( iRow )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                return iRow !== undefined ?\r\n                    api.row( iRow ).node() :\r\n                    api.rows().nodes().flatten().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the array indexes of a particular cell from it's DOM element\r\n             * and column index including hidden columns\r\n             *  @param {node} node this can either be a TR, TD or TH in the table's body\r\n             *  @returns {int} If nNode is given as a TR, then a single index is returned, or\r\n             *    if given as a cell, an array of [row index, column index (visible),\r\n             *    column index (all)] is given.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      $('#example tbody td').click( function () {\r\n\t\t *        // Get the position of the current data from the node\r\n\t\t *        var aPos = oTable.fnGetPosition( this );\r\n\t\t *\r\n\t\t *        // Get the data array for this row\r\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\r\n\t\t *\r\n\t\t *        // Update the data array and return the value\r\n\t\t *        aData[ aPos[1] ] = 'clicked';\r\n\t\t *        this.innerHTML = 'clicked';\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      // Init DataTables\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnGetPosition = function( node )\r\n            {\r\n                var api = this.api( true );\r\n                var nodeName = node.nodeName.toUpperCase();\r\n\r\n                if ( nodeName == 'TR' ) {\r\n                    return api.row( node ).index();\r\n                }\r\n                else if ( nodeName == 'TD' || nodeName == 'TH' ) {\r\n                    var cell = api.cell( node ).index();\r\n\r\n                    return [\r\n                        cell.row,\r\n                        cell.columnVisible,\r\n                        cell.column\r\n                    ];\r\n                }\r\n                return null;\r\n            };\r\n\r\n\r\n            /**\r\n             * Check to see if a row is 'open' or not.\r\n             *  @param {node} nTr the table row to check\r\n             *  @returns {boolean} true if the row is currently open, false otherwise\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnIsOpen = function( nTr )\r\n            {\r\n                return this.api( true ).row( nTr ).child.isShown();\r\n            };\r\n\r\n\r\n            /**\r\n             * This function will place a new row directly after a row which is currently\r\n             * on display on the page, with the HTML contents that is passed into the\r\n             * function. This can be used, for example, to ask for confirmation that a\r\n             * particular record should be deleted.\r\n             *  @param {node} nTr The table row to 'open'\r\n             *  @param {string|node|jQuery} mHtml The HTML to put into the row\r\n             *  @param {string} sClass Class to give the new TD cell\r\n             *  @returns {node} The row opened. Note that if the table row passed in as the\r\n             *    first parameter, is not found in the table, this method will silently\r\n             *    return.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnOpen = function( nTr, mHtml, sClass )\r\n            {\r\n                return this.api( true )\r\n                    .row( nTr )\r\n                    .child( mHtml, sClass )\r\n                    .show()\r\n                    .child()[0];\r\n            };\r\n\r\n\r\n            /**\r\n             * Change the pagination - provides the internal logic for pagination in a simple API\r\n             * function. With this function you can have a DataTables table go to the next,\r\n             * previous, first or last pages.\r\n             *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\r\n             *    or page number to jump to (integer), note that page 0 is the first page.\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnPageChange( 'next' );\r\n\t\t *    } );\r\n             */\r\n            this.fnPageChange = function ( mAction, bRedraw )\r\n            {\r\n                var api = this.api( true ).page( mAction );\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw(false);\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Show a particular column\r\n             *  @param {int} iCol The column whose display should be changed\r\n             *  @param {bool} bShow Show (true) or hide (false) the column\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Hide the second column after initialisation\r\n\t\t *      oTable.fnSetColumnVis( 1, false );\r\n\t\t *    } );\r\n             */\r\n            this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\r\n            {\r\n                var api = this.api( true ).column( iCol ).visible( bShow );\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.columns.adjust().draw();\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the settings for a particular table for external manipulation\r\n             *  @returns {object} DataTables settings object. See\r\n             *    {@link DataTable.models.oSettings}\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      var oSettings = oTable.fnSettings();\r\n\t\t *\r\n\t\t *      // Show an example parameter from the settings\r\n\t\t *      alert( oSettings._iDisplayStart );\r\n\t\t *    } );\r\n             */\r\n            this.fnSettings = function()\r\n            {\r\n                return _fnSettingsFromNode( this[_ext.iApiIndex] );\r\n            };\r\n\r\n\r\n            /**\r\n             * Sort the table by a particular column\r\n             *  @param {int} iCol the data index to sort on. Note that this will not match the\r\n             *    'display index' if you have hidden data entries\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort immediately with columns 0 and 1\r\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\r\n\t\t *    } );\r\n             */\r\n            this.fnSort = function( aaSort )\r\n            {\r\n                this.api( true ).order( aaSort ).draw();\r\n            };\r\n\r\n\r\n            /**\r\n             * Attach a sort listener to an element for a given column\r\n             *  @param {node} nNode the element to attach the sort listener to\r\n             *  @param {int} iColumn the column that a click on this node will sort on\r\n             *  @param {function} [fnCallback] callback function when sort is run\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\r\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\r\n\t\t *    } );\r\n             */\r\n            this.fnSortListener = function( nNode, iColumn, fnCallback )\r\n            {\r\n                this.api( true ).order.listener( nNode, iColumn, fnCallback );\r\n            };\r\n\r\n\r\n            /**\r\n             * Update a table cell or row - this method will accept either a single value to\r\n             * update the cell with, an array of values with one element for each column or\r\n             * an object in the same format as the original data source. The function is\r\n             * self-referencing in order to make the multi column updates easier.\r\n             *  @param {object|array|string} mData Data to update the cell/row with\r\n             *  @param {node|int} mRow TR element you want to update or the aoData index\r\n             *  @param {int} [iColumn] The column to update, give as null or undefined to\r\n             *    update a whole row.\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @param {bool} [bAction=true] Perform pre-draw actions or not\r\n             *  @returns {int} 0 on success, 1 on error\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\r\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\r\n\t\t *    } );\r\n             */\r\n            this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( iColumn === undefined || iColumn === null ) {\r\n                    api.row( mRow ).data( mData );\r\n                }\r\n                else {\r\n                    api.cell( mRow, iColumn ).data( mData );\r\n                }\r\n\r\n                if ( bAction === undefined || bAction ) {\r\n                    api.columns.adjust();\r\n                }\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw();\r\n                }\r\n                return 0;\r\n            };\r\n\r\n\r\n            /**\r\n             * Provide a common method for plug-ins to check the version of DataTables being used, in order\r\n             * to ensure compatibility.\r\n             *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\r\n             *    formats \"X\" and \"X.Y\" are also acceptable.\r\n             *  @returns {boolean} true if this version of DataTables is greater or equal to the required\r\n             *    version, or false if this version of DataTales is not suitable\r\n             *  @method\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\r\n\t\t *    } );\r\n             */\r\n            this.fnVersionCheck = _ext.fnVersionCheck;\r\n\r\n\r\n            var _that = this;\r\n            var emptyInit = options === undefined;\r\n            var len = this.length;\r\n\r\n            if ( emptyInit ) {\r\n                options = {};\r\n            }\r\n\r\n            this.oApi = this.internal = _ext.internal;\r\n\r\n            // Extend with old style plug-in API methods\r\n            for ( var fn in DataTable.ext.internal ) {\r\n                if ( fn ) {\r\n                    this[fn] = _fnExternApiFunc(fn);\r\n                }\r\n            }\r\n\r\n            this.each(function() {\r\n                // For each initialisation we want to give it a clean initialisation\r\n                // object that can be bashed around\r\n                var o = {};\r\n                var oInit = len > 1 ? // optimisation for single table case\r\n                    _fnExtend( o, options, true ) :\r\n                    options;\r\n\r\n                /*global oInit,_that,emptyInit*/\r\n                var i=0, iLen, j, jLen, k, kLen;\r\n                var sId = this.getAttribute( 'id' );\r\n                var bInitHandedOff = false;\r\n                var defaults = DataTable.defaults;\r\n\r\n\r\n                /* Sanity check */\r\n                if ( this.nodeName.toLowerCase() != 'table' )\r\n                {\r\n                    _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\r\n                    return;\r\n                }\r\n\r\n                /* Backwards compatibility for the defaults */\r\n                _fnCompatOpts( defaults );\r\n                _fnCompatCols( defaults.column );\r\n\r\n                /* Convert the camel-case defaults to Hungarian */\r\n                _fnCamelToHungarian( defaults, defaults, true );\r\n                _fnCamelToHungarian( defaults.column, defaults.column, true );\r\n\r\n                /* Setting up the initialisation object */\r\n                _fnCamelToHungarian( defaults, oInit );\r\n\r\n                /* Check to see if we are re-initialising a table */\r\n                var allSettings = DataTable.settings;\r\n                for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\r\n                {\r\n                    /* Base check on table node */\r\n                    if ( allSettings[i].nTable == this )\r\n                    {\r\n                        var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\r\n                        var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\r\n\r\n                        if ( emptyInit || bRetrieve )\r\n                        {\r\n                            return allSettings[i].oInstance;\r\n                        }\r\n                        else if ( bDestroy )\r\n                        {\r\n                            allSettings[i].oInstance.fnDestroy();\r\n                            break;\r\n                        }\r\n                        else\r\n                        {\r\n                            _fnLog( allSettings[i], 0, 'Cannot reinitialise DataTable', 3 );\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    /* If the element we are initialising has the same ID as a table which was previously\r\n                     * initialised, but the table nodes don't match (from before) then we destroy the old\r\n                     * instance by simply deleting it. This is under the assumption that the table has been\r\n                     * destroyed by other methods. Anyone using non-id selectors will need to do this manually\r\n                     */\r\n                    if ( allSettings[i].sTableId == this.id )\r\n                    {\r\n                        allSettings.splice( i, 1 );\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                /* Ensure the table has an ID - required for accessibility */\r\n                if ( sId === null || sId === \"\" )\r\n                {\r\n                    sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\r\n                    this.id = sId;\r\n                }\r\n\r\n                /* Create the settings object for this table and set some of the default parameters */\r\n                var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\r\n                    \"nTable\":        this,\r\n                    \"oApi\":          _that.internal,\r\n                    \"oInit\":         oInit,\r\n                    \"sDestroyWidth\": $(this)[0].style.width,\r\n                    \"sInstance\":     sId,\r\n                    \"sTableId\":      sId\r\n                } );\r\n                allSettings.push( oSettings );\r\n\r\n                // Need to add the instance after the instance after the settings object has been added\r\n                // to the settings array, so we can self reference the table instance if more than one\r\n                oSettings.oInstance = (_that.length===1) ? _that : $(this).dataTable();\r\n\r\n                // Backwards compatibility, before we apply all the defaults\r\n                _fnCompatOpts( oInit );\r\n\r\n                if ( oInit.oLanguage )\r\n                {\r\n                    _fnLanguageCompat( oInit.oLanguage );\r\n                }\r\n\r\n                // If the length menu is given, but the init display length is not, use the length menu\r\n                if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\r\n                {\r\n                    oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\r\n                        oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\r\n                }\r\n\r\n                // Apply the defaults and init options to make a single init object will all\r\n                // options defined from defaults and instance options.\r\n                oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\r\n\r\n\r\n                // Map the initialisation options onto the settings object\r\n                _fnMap( oSettings.oFeatures, oInit, [\r\n                    \"bPaginate\",\r\n                    \"bLengthChange\",\r\n                    \"bFilter\",\r\n                    \"bSort\",\r\n                    \"bSortMulti\",\r\n                    \"bInfo\",\r\n                    \"bProcessing\",\r\n                    \"bAutoWidth\",\r\n                    \"bSortClasses\",\r\n                    \"bServerSide\",\r\n                    \"bDeferRender\"\r\n                ] );\r\n                _fnMap( oSettings, oInit, [\r\n                    \"asStripeClasses\",\r\n                    \"ajax\",\r\n                    \"fnServerData\",\r\n                    \"fnFormatNumber\",\r\n                    \"sServerMethod\",\r\n                    \"aaSorting\",\r\n                    \"aaSortingFixed\",\r\n                    \"aLengthMenu\",\r\n                    \"sPaginationType\",\r\n                    \"sAjaxSource\",\r\n                    \"sAjaxDataProp\",\r\n                    \"iStateDuration\",\r\n                    \"sDom\",\r\n                    \"bSortCellsTop\",\r\n                    \"iTabIndex\",\r\n                    \"fnStateLoadCallback\",\r\n                    \"fnStateSaveCallback\",\r\n                    \"renderer\",\r\n                    [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\r\n                    [ \"oSearch\", \"oPreviousSearch\" ],\r\n                    [ \"aoSearchCols\", \"aoPreSearchCols\" ],\r\n                    [ \"iDisplayLength\", \"_iDisplayLength\" ],\r\n                    [ \"bJQueryUI\", \"bJUI\" ]\r\n                ] );\r\n                _fnMap( oSettings.oScroll, oInit, [\r\n                    [ \"sScrollX\", \"sX\" ],\r\n                    [ \"sScrollXInner\", \"sXInner\" ],\r\n                    [ \"sScrollY\", \"sY\" ],\r\n                    [ \"bScrollCollapse\", \"bCollapse\" ]\r\n                ] );\r\n                _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\r\n\r\n                /* Callback functions which are array driven */\r\n                _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\r\n                _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\r\n                _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\r\n                _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\r\n                _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\r\n                _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\r\n\r\n                var oClasses = oSettings.oClasses;\r\n\r\n                // @todo Remove in 1.11\r\n                if ( oInit.bJQueryUI )\r\n                {\r\n                    /* Use the JUI classes object for display. You could clone the oStdClasses object if\r\n                     * you want to have multiple tables with multiple independent classes\r\n                     */\r\n                    $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\r\n\r\n                    if ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\r\n                    {\r\n                        /* Set the DOM to use a layout suitable for jQuery UI's theming */\r\n                        oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\r\n                    }\r\n\r\n                    if ( ! oSettings.renderer ) {\r\n                        oSettings.renderer = 'jqueryui';\r\n                    }\r\n                    else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\r\n                        oSettings.renderer.header = 'jqueryui';\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\r\n                }\r\n                $(this).addClass( oClasses.sTable );\r\n\r\n                /* Calculate the scroll bar width and cache it for use later on */\r\n                if ( oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\" )\r\n                {\r\n                    oSettings.oScroll.iBarWidth = _fnScrollBarWidth();\r\n                }\r\n                if ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling\r\n                    oSettings.oScroll.sX = '100%';\r\n                }\r\n\r\n                if ( oSettings.iInitDisplayStart === undefined )\r\n                {\r\n                    /* Display start point, taking into account the save saving */\r\n                    oSettings.iInitDisplayStart = oInit.iDisplayStart;\r\n                    oSettings._iDisplayStart = oInit.iDisplayStart;\r\n                }\r\n\r\n                if ( oInit.iDeferLoading !== null )\r\n                {\r\n                    oSettings.bDeferLoading = true;\r\n                    var tmp = $.isArray( oInit.iDeferLoading );\r\n                    oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\r\n                    oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\r\n                }\r\n\r\n                /* Language definitions */\r\n                if ( oInit.oLanguage.sUrl !== \"\" )\r\n                {\r\n                    /* Get the language definitions from a file - because this Ajax call makes the language\r\n                     * get async to the remainder of this function we use bInitHandedOff to indicate that\r\n                     * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\r\n                     */\r\n                    oSettings.oLanguage.sUrl = oInit.oLanguage.sUrl;\r\n                    $.getJSON( oSettings.oLanguage.sUrl, null, function( json ) {\r\n                        _fnLanguageCompat( json );\r\n                        _fnCamelToHungarian( defaults.oLanguage, json );\r\n                        $.extend( true, oSettings.oLanguage, oInit.oLanguage, json );\r\n                        _fnInitialise( oSettings );\r\n                    } );\r\n                    bInitHandedOff = true;\r\n                }\r\n                else\r\n                {\r\n                    $.extend( true, oSettings.oLanguage, oInit.oLanguage );\r\n                }\r\n\r\n\r\n                /*\r\n                 * Stripes\r\n                 */\r\n                if ( oInit.asStripeClasses === null )\r\n                {\r\n                    oSettings.asStripeClasses =[\r\n                        oClasses.sStripeOdd,\r\n                        oClasses.sStripeEven\r\n                    ];\r\n                }\r\n\r\n                /* Remove row stripe classes if they are already on the table row */\r\n                var stripeClasses = oSettings.asStripeClasses;\r\n                var rowOne = $('tbody tr:eq(0)', this);\r\n                if ( $.inArray( true, $.map( stripeClasses, function(el, i) {\r\n                    return rowOne.hasClass(el);\r\n                } ) ) !== -1 ) {\r\n                    $('tbody tr', this).removeClass( stripeClasses.join(' ') );\r\n                    oSettings.asDestroyStripes = stripeClasses.slice();\r\n                }\r\n\r\n                /*\r\n                 * Columns\r\n                 * See if we should load columns automatically or use defined ones\r\n                 */\r\n                var anThs = [];\r\n                var aoColumnsInit;\r\n                var nThead = this.getElementsByTagName('thead');\r\n                if ( nThead.length !== 0 )\r\n                {\r\n                    _fnDetectHeader( oSettings.aoHeader, nThead[0] );\r\n                    anThs = _fnGetUniqueThs( oSettings );\r\n                }\r\n\r\n                /* If not given a column array, generate one with nulls */\r\n                if ( oInit.aoColumns === null )\r\n                {\r\n                    aoColumnsInit = [];\r\n                    for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\r\n                    {\r\n                        aoColumnsInit.push( null );\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    aoColumnsInit = oInit.aoColumns;\r\n                }\r\n\r\n                /* Add the columns */\r\n                for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\r\n                {\r\n                    _fnAddColumn( oSettings, anThs ? anThs[i] : null );\r\n                }\r\n\r\n                /* Apply the column definitions */\r\n                _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\r\n                    _fnColumnOptions( oSettings, iCol, oDef );\r\n                } );\r\n\r\n                /* HTML5 attribute detection - build an mData object automatically if the\r\n                 * attributes are found\r\n                 */\r\n                if ( rowOne.length ) {\r\n                    var a = function ( cell, name ) {\r\n                        return cell.getAttribute( 'data-'+name ) ? name : null;\r\n                    };\r\n\r\n                    $.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {\r\n                        var col = oSettings.aoColumns[i];\r\n\r\n                        if ( col.mData === i ) {\r\n                            var sort = a( cell, 'sort' ) || a( cell, 'order' );\r\n                            var filter = a( cell, 'filter' ) || a( cell, 'search' );\r\n\r\n                            if ( sort !== null || filter !== null ) {\r\n                                col.mData = {\r\n                                    _:      i+'.display',\r\n                                    sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                    type:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                    filter: filter !== null ? i+'.@data-'+filter : undefined\r\n                                };\r\n\r\n                                _fnColumnOptions( oSettings, i );\r\n                            }\r\n                        }\r\n                    } );\r\n                }\r\n\r\n                var features = oSettings.oFeatures;\r\n\r\n                /* Must be done after everything which can be overridden by the state saving! */\r\n                if ( oInit.bStateSave )\r\n                {\r\n                    features.bStateSave = true;\r\n                    _fnLoadState( oSettings, oInit );\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\r\n                }\r\n\r\n\r\n                /*\r\n                 * Sorting\r\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\r\n                 */\r\n\r\n                // If aaSorting is not defined, then we use the first indicator in asSorting\r\n                // in case that has been altered, so the default sort reflects that option\r\n                if ( oInit.aaSorting === undefined )\r\n                {\r\n                    var sorting = oSettings.aaSorting;\r\n                    for ( i=0, iLen=sorting.length ; i<iLen ; i++ )\r\n                    {\r\n                        sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\r\n                    }\r\n                }\r\n\r\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\r\n                 * account, and also will apply sorting disabled classes if disabled\r\n                 */\r\n                _fnSortingClasses( oSettings );\r\n\r\n                if ( features.bSort )\r\n                {\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                        if ( oSettings.bSorted ) {\r\n                            var aSort = _fnSortFlatten( oSettings );\r\n                            var sortedColumns = {};\r\n\r\n                            $.each( aSort, function (i, val) {\r\n                                sortedColumns[ val.src ] = val.dir;\r\n                            } );\r\n\r\n                            _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\r\n                            _fnSortAria( oSettings );\r\n                        }\r\n                    } );\r\n                }\r\n\r\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                    if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\r\n                        _fnSortingClasses( oSettings );\r\n                    }\r\n                }, 'sc' );\r\n\r\n\r\n                /*\r\n                 * Final init\r\n                 * Cache the header, body and footer as required, creating them if needed\r\n                 */\r\n\r\n                /* Browser support detection */\r\n                _fnBrowserDetect( oSettings );\r\n\r\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\r\n                var captions = $(this).children('caption').each( function () {\r\n                    this._captionSide = $(this).css('caption-side');\r\n                } );\r\n\r\n                var thead = $(this).children('thead');\r\n                if ( thead.length === 0 )\r\n                {\r\n                    thead = $('<thead/>').appendTo(this);\r\n                }\r\n                oSettings.nTHead = thead[0];\r\n\r\n                var tbody = $(this).children('tbody');\r\n                if ( tbody.length === 0 )\r\n                {\r\n                    tbody = $('<tbody/>').appendTo(this);\r\n                }\r\n                oSettings.nTBody = tbody[0];\r\n\r\n                var tfoot = $(this).children('tfoot');\r\n                if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") )\r\n                {\r\n                    // If we are a scrolling table, and no footer has been given, then we need to create\r\n                    // a tfoot element for the caption element to be appended to\r\n                    tfoot = $('<tfoot/>').appendTo(this);\r\n                }\r\n\r\n                if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\r\n                    $(this).addClass( oClasses.sNoFooter );\r\n                }\r\n                else if ( tfoot.length > 0 ) {\r\n                    oSettings.nTFoot = tfoot[0];\r\n                    _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\r\n                }\r\n\r\n                /* Check if there is data passing into the constructor */\r\n                if ( oInit.aaData )\r\n                {\r\n                    for ( i=0 ; i<oInit.aaData.length ; i++ )\r\n                    {\r\n                        _fnAddData( oSettings, oInit.aaData[ i ] );\r\n                    }\r\n                }\r\n                else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )\r\n                {\r\n                    /* Grab the data from the page - only do this when deferred loading or no Ajax\r\n                     * source since there is no point in reading the DOM data if we are then going\r\n                     * to replace it with Ajax data\r\n                     */\r\n                    _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\r\n                }\r\n\r\n                /* Copy the data index array */\r\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\r\n\r\n                /* Initialisation complete - table can be drawn */\r\n                oSettings.bInitialised = true;\r\n\r\n                /* Check if we need to initialise the table (it might not have been handed off to the\r\n                 * language processor)\r\n                 */\r\n                if ( bInitHandedOff === false )\r\n                {\r\n                    _fnInitialise( oSettings );\r\n                }\r\n            } );\r\n            _that = null;\r\n            return this;\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Computed structure of the DataTables API, defined by the options passed to\r\n         * `DataTable.Api.register()` when building the API.\r\n         *\r\n         * The structure is built in order to speed creation and extension of the Api\r\n         * objects since the extensions are effectively pre-parsed.\r\n         *\r\n         * The array is an array of objects with the following structure, where this\r\n         * base array represents the Api prototype base:\r\n         *\r\n         *     [\r\n         *       {\r\n\t *         name:      'data'                -- string   - Property name\r\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\r\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n\t *       },\r\n         *       {\r\n\t *         name:     'row'\r\n\t *         val:       {},\r\n\t *         methodExt: [ ... ],\r\n\t *         propExt:   [\r\n\t *           {\r\n\t *             name:      'data'\r\n\t *             val:       function () {},\r\n\t *             methodExt: [ ... ],\r\n\t *             propExt:   [ ... ]\r\n\t *           },\r\n\t *           ...\r\n\t *         ]\r\n\t *       }\r\n         *     ]\r\n         *\r\n         * @type {Array}\r\n         * @ignore\r\n         */\r\n        var __apiStruct = [];\r\n\r\n\r\n        /**\r\n         * `Array.prototype` reference.\r\n         *\r\n         * @type object\r\n         * @ignore\r\n         */\r\n        var __arrayProto = Array.prototype;\r\n\r\n\r\n        /**\r\n         * Abstraction for `context` parameter of the `Api` constructor to allow it to\r\n         * take several different forms for ease of use.\r\n         *\r\n         * Each of the input parameter types will be converted to a DataTables settings\r\n         * object where possible.\r\n         *\r\n         * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\r\n         *   of:\r\n         *\r\n         *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n         *     with be found and used.\r\n         *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n         *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n         *   * `object` - DataTables settings object\r\n         *   * `DataTables.Api` - API instance\r\n         * @return {array|null} Matching DataTables settings objects. `null` or\r\n         *   `undefined` is returned if no matching DataTable is found.\r\n         * @ignore\r\n         */\r\n        var _toSettings = function ( mixed )\r\n        {\r\n            var idx, jq;\r\n            var settings = DataTable.settings;\r\n            var tables = $.map( settings, function (el, i) {\r\n                return el.nTable;\r\n            } );\r\n\r\n            if ( ! mixed ) {\r\n                return [];\r\n            }\r\n            else if ( mixed.nTable && mixed.oApi ) {\r\n                // DataTables settings object\r\n                return [ mixed ];\r\n            }\r\n            else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\r\n                // Table node\r\n                idx = $.inArray( mixed, tables );\r\n                return idx !== -1 ? [ settings[idx] ] : null;\r\n            }\r\n            else if ( mixed && typeof mixed.settings === 'function' ) {\r\n                return mixed.settings().toArray();\r\n            }\r\n            else if ( typeof mixed === 'string' ) {\r\n                // jQuery selector\r\n                jq = $(mixed);\r\n            }\r\n            else if ( mixed instanceof $ ) {\r\n                // jQuery object (also DataTables instance)\r\n                jq = mixed;\r\n            }\r\n\r\n            if ( jq ) {\r\n                return jq.map( function(i) {\r\n                    idx = $.inArray( this, tables );\r\n                    return idx !== -1 ? settings[idx] : null;\r\n                } ).toArray();\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * DataTables API class - used to control and interface with  one or more\r\n         * DataTables enhanced tables.\r\n         *\r\n         * The API class is heavily based on jQuery, presenting a chainable interface\r\n         * that you can use to interact with tables. Each instance of the API class has\r\n         * a \"context\" - i.e. the tables that it will operate on. This could be a single\r\n         * table, all tables on a page or a sub-set thereof.\r\n         *\r\n         * Additionally the API is designed to allow you to easily work with the data in\r\n         * the tables, retrieving and manipulating it as required. This is done by\r\n         * presenting the API class as an array like interface. The contents of the\r\n         * array depend upon the actions requested by each method (for example\r\n         * `rows().nodes()` will return an array of nodes, while `rows().data()` will\r\n         * return an array of objects or arrays depending upon your table's\r\n         * configuration). The API object has a number of array like methods (`push`,\r\n         * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\r\n         * `unique` etc) to assist your working with the data held in a table.\r\n         *\r\n         * Most methods (those which return an Api instance) are chainable, which means\r\n         * the return from a method call also has all of the methods available that the\r\n         * top level object had. For example, these two calls are equivalent:\r\n         *\r\n         *     // Not chained\r\n         *     api.row.add( {...} );\r\n         *     api.draw();\r\n         *\r\n         *     // Chained\r\n         *     api.row.add( {...} ).draw();\r\n         *\r\n         * @class DataTable.Api\r\n         * @param {array|object|string|jQuery} context DataTable identifier. This is\r\n         *   used to define which DataTables enhanced tables this API will operate on.\r\n         *   Can be one of:\r\n         *\r\n         *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n         *     with be found and used.\r\n         *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n         *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n         *   * `object` - DataTables settings object\r\n         * @param {array} [data] Data to initialise the Api instance with.\r\n         *\r\n         * @example\r\n         *   // Direct initialisation during DataTables construction\r\n         *   var api = $('#example').DataTable();\r\n         *\r\n         * @example\r\n         *   // Initialisation using a DataTables jQuery object\r\n         *   var api = $('#example').dataTable().api();\r\n         *\r\n         * @example\r\n         *   // Initialisation as a constructor\r\n         *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\r\n         */\r\n        DataTable.Api = _Api = function ( context, data )\r\n        {\r\n            if ( ! this instanceof _Api ) {\r\n                throw 'DT API must be constructed as a new object';\r\n                // or should it do the 'new' for the caller?\r\n                // return new _Api.apply( this, arguments );\r\n            }\r\n\r\n            var settings = [];\r\n            var ctxSettings = function ( o ) {\r\n                var a = _toSettings( o );\r\n                if ( a ) {\r\n                    settings.push.apply( settings, a );\r\n                }\r\n            };\r\n\r\n            if ( $.isArray( context ) ) {\r\n                for ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n                    ctxSettings( context[i] );\r\n                }\r\n            }\r\n            else {\r\n                ctxSettings( context );\r\n            }\r\n\r\n            // Remove duplicates\r\n            this.context = _unique( settings );\r\n\r\n            // Initial data\r\n            if ( data ) {\r\n                this.push.apply( this, data.toArray ? data.toArray() : data );\r\n            }\r\n\r\n            // selector\r\n            this.selector = {\r\n                rows: null,\r\n                cols: null,\r\n                opts: null\r\n            };\r\n\r\n            _Api.extend( this, this, __apiStruct );\r\n        };\r\n\r\n\r\n        _Api.prototype = /** @lends DataTables.Api */{\r\n            /**\r\n             * Return a new Api instance, comprised of the data held in the current\r\n             * instance, join with the other array(s) and/or value(s).\r\n             *\r\n             * An alias for `Array.prototype.concat`.\r\n             *\r\n             * @type method\r\n             * @param {*} value1 Arrays and/or values to concatenate.\r\n             * @param {*} [...] Additional arrays and/or values to concatenate.\r\n             * @returns {DataTables.Api} New API instance, comprising of the combined\r\n             *   array.\r\n             */\r\n            concat:  __arrayProto.concat,\r\n\r\n\r\n            context: [], // array of table settings objects\r\n\r\n\r\n            each: function ( fn )\r\n            {\r\n                if ( __arrayProto.forEach ) {\r\n                    // Where possible, use the built-in forEach\r\n                    __arrayProto.forEach.call( this, fn, this );\r\n                }\r\n                else {\r\n                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                    for ( var i=0, ien=this.length ; i<ien; i++ ) {\r\n                        // In strict mode the execution scope is the passed value\r\n                        fn.call( this, this[i], i, this );\r\n                    }\r\n                }\r\n\r\n                return this;\r\n            },\r\n\r\n\r\n            eq: function ( idx )\r\n            {\r\n                var ctx = this.context;\r\n\r\n                return ctx.length > idx ?\r\n                    new _Api( ctx[idx], this[idx] ) :\r\n                    null;\r\n            },\r\n\r\n\r\n            filter: function ( fn )\r\n            {\r\n                var a = [];\r\n\r\n                if ( __arrayProto.filter ) {\r\n                    a = __arrayProto.filter.call( this, fn, this );\r\n                }\r\n                else {\r\n                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                        if ( fn.call( this, this[i], i, this ) ) {\r\n                            a.push( this[i] );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return new _Api( this.context, a );\r\n            },\r\n\r\n\r\n            flatten: function ()\r\n            {\r\n                var a = [];\r\n                return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\r\n            },\r\n\r\n\r\n            join:    __arrayProto.join,\r\n\r\n\r\n            indexOf: __arrayProto.indexOf || function (obj, start)\r\n            {\r\n                for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\r\n                    if ( this[i] === obj ) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            },\r\n\r\n            // Internal only at the moment - relax?\r\n            iterator: function ( flatten, type, fn ) {\r\n                var\r\n                    a = [], ret,\r\n                    i, ien, j, jen,\r\n                    context = this.context,\r\n                    rows, items, item,\r\n                    selector = this.selector;\r\n\r\n                // Argument shifting\r\n                if ( typeof flatten === 'string' ) {\r\n                    fn = type;\r\n                    type = flatten;\r\n                    flatten = false;\r\n                }\r\n\r\n                for ( i=0, ien=context.length ; i<ien ; i++ ) {\r\n                    if ( type === 'table' ) {\r\n                        ret = fn( context[i], i );\r\n\r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                    else if ( type === 'columns' || type === 'rows' ) {\r\n                        // this has same length as context - one entry for each table\r\n                        ret = fn( context[i], this[i], i );\r\n\r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                    else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\r\n                        // columns and rows share the same structure.\r\n                        // 'this' is an array of column indexes for each context\r\n                        items = this[i];\r\n\r\n                        if ( type === 'column-rows' ) {\r\n                            rows = _selector_row_indexes( context[i], selector.opts );\r\n                        }\r\n\r\n                        for ( j=0, jen=items.length ; j<jen ; j++ ) {\r\n                            item = items[j];\r\n\r\n                            if ( type === 'cell' ) {\r\n                                ret = fn( context[i], item.row, item.column, i, j );\r\n                            }\r\n                            else {\r\n                                ret = fn( context[i], item, i, j, rows );\r\n                            }\r\n\r\n                            if ( ret !== undefined ) {\r\n                                a.push( ret );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if ( a.length ) {\r\n                    var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\r\n                    var apiSelector = api.selector;\r\n                    apiSelector.rows = selector.rows;\r\n                    apiSelector.cols = selector.cols;\r\n                    apiSelector.opts = selector.opts;\r\n                    return api;\r\n                }\r\n                return this;\r\n            },\r\n\r\n\r\n            lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\r\n            {\r\n                // Bit cheeky...\r\n                return this.indexOf.apply( this.toArray.reverse(), arguments );\r\n            },\r\n\r\n\r\n            length:  0,\r\n\r\n\r\n            map: function ( fn )\r\n            {\r\n                var a = [];\r\n\r\n                if ( __arrayProto.map ) {\r\n                    a = __arrayProto.map.call( this, fn, this );\r\n                }\r\n                else {\r\n                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                        a.push( fn.call( this, this[i], i ) );\r\n                    }\r\n                }\r\n\r\n                return new _Api( this.context, a );\r\n            },\r\n\r\n\r\n            pluck: function ( prop )\r\n            {\r\n                return this.map( function ( el ) {\r\n                    return el[ prop ];\r\n                } );\r\n            },\r\n\r\n            pop:     __arrayProto.pop,\r\n\r\n\r\n            push:    __arrayProto.push,\r\n\r\n\r\n            // Does not return an API instance\r\n            reduce: __arrayProto.reduce || function ( fn, init )\r\n            {\r\n                return _fnReduce( this, fn, init, 0, this.length, 1 );\r\n            },\r\n\r\n\r\n            reduceRight: __arrayProto.reduceRight || function ( fn, init )\r\n            {\r\n                return _fnReduce( this, fn, init, this.length-1, -1, -1 );\r\n            },\r\n\r\n\r\n            reverse: __arrayProto.reverse,\r\n\r\n\r\n            // Object with rows, columns and opts\r\n            selector: null,\r\n\r\n\r\n            shift:   __arrayProto.shift,\r\n\r\n\r\n            sort:    __arrayProto.sort, // ? name - order?\r\n\r\n\r\n            splice:  __arrayProto.splice,\r\n\r\n\r\n            toArray: function ()\r\n            {\r\n                return __arrayProto.slice.call( this );\r\n            },\r\n\r\n\r\n            to$: function ()\r\n            {\r\n                return $( this );\r\n            },\r\n\r\n\r\n            toJQuery: function ()\r\n            {\r\n                return $( this );\r\n            },\r\n\r\n\r\n            unique: function ()\r\n            {\r\n                return new _Api( this.context, _unique(this) );\r\n            },\r\n\r\n\r\n            unshift: __arrayProto.unshift\r\n        };\r\n\r\n\r\n        _Api.extend = function ( scope, obj, ext )\r\n        {\r\n            // Only extend API instances and static properties of the API\r\n            if ( ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\r\n                return;\r\n            }\r\n\r\n            var\r\n                i, ien,\r\n                j, jen,\r\n                struct, inner,\r\n                methodScoping = function ( fn, struc ) {\r\n                    return function () {\r\n                        var ret = fn.apply( scope, arguments );\r\n\r\n                        // Method extension\r\n                        _Api.extend( ret, ret, struc.methodExt );\r\n                        return ret;\r\n                    };\r\n                };\r\n\r\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n                struct = ext[i];\r\n\r\n                // Value\r\n                obj[ struct.name ] = typeof struct.val === 'function' ?\r\n                    methodScoping( struct.val, struct ) :\r\n                    $.isPlainObject( struct.val ) ?\r\n                    {} :\r\n                        struct.val;\r\n\r\n                obj[ struct.name ].__dt_wrapper = true;\r\n\r\n                // Property extension\r\n                _Api.extend( scope, obj[ struct.name ], struct.propExt );\r\n            }\r\n        };\r\n\r\n\r\n        // @todo - Is there need for an augment function?\r\n        // _Api.augment = function ( inst, name )\r\n        // {\r\n        // \t// Find src object in the structure from the name\r\n        // \tvar parts = name.split('.');\r\n\r\n        // \t_Api.extend( inst, obj );\r\n        // };\r\n\r\n\r\n        //     [\r\n        //       {\r\n        //         name:      'data'                -- string   - Property name\r\n        //         val:       function () {},       -- function - Api method (or undefined if just an object\r\n        //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n        //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n        //       },\r\n        //       {\r\n        //         name:     'row'\r\n        //         val:       {},\r\n        //         methodExt: [ ... ],\r\n        //         propExt:   [\r\n        //           {\r\n        //             name:      'data'\r\n        //             val:       function () {},\r\n        //             methodExt: [ ... ],\r\n        //             propExt:   [ ... ]\r\n        //           },\r\n        //           ...\r\n        //         ]\r\n        //       }\r\n        //     ]\r\n\r\n        _Api.register = _api_register = function ( name, val )\r\n        {\r\n            if ( $.isArray( name ) ) {\r\n                for ( var j=0, jen=name.length ; j<jen ; j++ ) {\r\n                    _Api.register( name[j], val );\r\n                }\r\n                return;\r\n            }\r\n\r\n            var\r\n                i, ien,\r\n                heir = name.split('.'),\r\n                struct = __apiStruct,\r\n                key, method;\r\n\r\n            var find = function ( src, name ) {\r\n                for ( var i=0, ien=src.length ; i<ien ; i++ ) {\r\n                    if ( src[i].name === name ) {\r\n                        return src[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            for ( i=0, ien=heir.length ; i<ien ; i++ ) {\r\n                method = heir[i].indexOf('()') !== -1;\r\n                key = method ?\r\n                    heir[i].replace('()', '') :\r\n                    heir[i];\r\n\r\n                var src = find( struct, key );\r\n                if ( ! src ) {\r\n                    src = {\r\n                        name:      key,\r\n                        val:       {},\r\n                        methodExt: [],\r\n                        propExt:   []\r\n                    };\r\n                    struct.push( src );\r\n                }\r\n\r\n                if ( i === ien-1 ) {\r\n                    src.val = val;\r\n                }\r\n                else {\r\n                    struct = method ?\r\n                        src.methodExt :\r\n                        src.propExt;\r\n                }\r\n            }\r\n\r\n            // Rebuild the API with the new construct\r\n            if ( _Api.ready ) {\r\n                DataTable.api.build();\r\n            }\r\n        };\r\n\r\n\r\n        _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\r\n            _Api.register( pluralName, val );\r\n\r\n            _Api.register( singularName, function () {\r\n                var ret = val.apply( this, arguments );\r\n\r\n                if ( ret === this ) {\r\n                    // Returned item is the API instance that was passed in, return it\r\n                    return this;\r\n                }\r\n                else if ( ret instanceof _Api ) {\r\n                    // New API instance returned, want the value from the first item\r\n                    // in the returned array for the singular result.\r\n                    return ret.length ?\r\n                        $.isArray( ret[0] ) ?\r\n                            new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\r\n                            ret[0] :\r\n                        undefined;\r\n                }\r\n\r\n                // Non-API return - just fire it back\r\n                return ret;\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         * Selector for HTML tables. Apply the given selector to the give array of\r\n         * DataTables settings objects.\r\n         *\r\n         * @param {string|integer} [selector] jQuery selector string or integer\r\n         * @param  {array} Array of DataTables settings objects to be filtered\r\n         * @return {array}\r\n         * @ignore\r\n         */\r\n        var __table_selector = function ( selector, a )\r\n        {\r\n            // Integer is used to pick out a table by index\r\n            if ( typeof selector === 'number' ) {\r\n                return [ a[ selector ] ];\r\n            }\r\n\r\n            // Perform a jQuery selector on the table nodes\r\n            var nodes = $.map( a, function (el, i) {\r\n                return el.nTable;\r\n            } );\r\n\r\n            return $(nodes)\r\n                .filter( selector )\r\n                .map( function (i) {\r\n                    // Need to translate back from the table node to the settings\r\n                    var idx = $.inArray( this, nodes );\r\n                    return a[ idx ];\r\n                } )\r\n                .toArray();\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Context selector for the API's context (i.e. the tables the API instance\r\n         * refers to.\r\n         *\r\n         * @name    DataTable.Api#tables\r\n         * @param {string|integer} [selector] Selector to pick which tables the iterator\r\n         *   should operate on. If not given, all tables in the current context are\r\n         *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\r\n         *   select multiple tables or as an integer to select a single table.\r\n         * @returns {DataTable.Api} Returns a new API instance if a selector is given.\r\n         */\r\n        _api_register( 'tables()', function ( selector ) {\r\n            // A new instance is created if there was a selector specified\r\n            return selector ?\r\n                new _Api( __table_selector( selector, this.context ) ) :\r\n                this;\r\n        } );\r\n\r\n\r\n        _api_register( 'table()', function ( selector ) {\r\n            var tables = this.tables( selector );\r\n            var ctx = tables.context;\r\n\r\n            // Truncate to the first matched table\r\n            return ctx.length ?\r\n                new _Api( ctx[0] ) :\r\n                tables;\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTable;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().body()', 'table().body()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTBody;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().header()', 'table().header()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTHead;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTFoot;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Redraw the tables in the current context.\r\n         *\r\n         * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n         *   position. A full re-sort and re-filter is performed when this method is\r\n         *   called, which is why the pagination reset is the default action.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'draw()', function ( resetPaging ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnReDraw( settings, resetPaging===false );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Get the current page index.\r\n         *\r\n         * @return {integer} Current page index (zero based)\r\n         *//**\r\n         * Set the current page.\r\n         *\r\n         * Note that if you attempt to show a page which does not exist, DataTables will\r\n         * not throw an error, but rather reset the paging.\r\n         *\r\n         * @param {integer|string} action The paging action to take. This can be one of:\r\n         *  * `integer` - The page index to jump to\r\n         *  * `string` - An action to take:\r\n         *    * `first` - Jump to first page.\r\n         *    * `next` - Jump to the next page\r\n         *    * `previous` - Jump to previous page\r\n         *    * `last` - Jump to the last page.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'page()', function ( action ) {\r\n            if ( action === undefined ) {\r\n                return this.page.info().page; // not an expensive call\r\n            }\r\n\r\n            // else, have an action to take on all tables\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnPageChange( settings, action );\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Paging information for the first table in the current context.\r\n         *\r\n         * If you require paging information for another table, use the `table()` method\r\n         * with a suitable selector.\r\n         *\r\n         * @return {object} Object with the following properties set:\r\n         *  * `page` - Current page index (zero based - i.e. the first page is `0`)\r\n         *  * `pages` - Total number of pages\r\n         *  * `start` - Display index for the first record shown on the current page\r\n         *  * `end` - Display index for the last record shown on the current page\r\n         *  * `length` - Display length (number of records). Note that generally `start\r\n         *    + length = end`, but this is not always true, for example if there are\r\n         *    only 2 records to show on the final page, with a length of 10.\r\n         *  * `recordsTotal` - Full data set length\r\n         *  * `recordsDisplay` - Data set length once the current filtering criterion\r\n         *    are applied.\r\n         */\r\n        _api_register( 'page.info()', function ( action ) {\r\n            if ( this.context.length === 0 ) {\r\n                return undefined;\r\n            }\r\n\r\n            var\r\n                settings   = this.context[0],\r\n                start      = settings._iDisplayStart,\r\n                len        = settings._iDisplayLength,\r\n                visRecords = settings.fnRecordsDisplay(),\r\n                all        = len === -1;\r\n\r\n            return {\r\n                \"page\":           all ? 0 : Math.floor( start / len ),\r\n                \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\r\n                \"start\":          start,\r\n                \"end\":            settings.fnDisplayEnd(),\r\n                \"length\":         len,\r\n                \"recordsTotal\":   settings.fnRecordsTotal(),\r\n                \"recordsDisplay\": visRecords\r\n            };\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the current page length.\r\n         *\r\n         * @return {integer} Current page length. Note `-1` indicates that all records\r\n         *   are to be shown.\r\n         *//**\r\n         * Set the current page length.\r\n         *\r\n         * @param {integer} Page length to set. Use `-1` to show all records.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'page.len()', function ( len ) {\r\n            // Note that we can't call this function 'length()' because `length`\r\n            // is a Javascript property of functions which defines how many arguments\r\n            // the function expects.\r\n            if ( len === undefined ) {\r\n                return this.context.length !== 0 ?\r\n                    this.context[0]._iDisplayLength :\r\n                    undefined;\r\n            }\r\n\r\n            // else, set the page length\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnLengthChange( settings, len );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        var __reload = function ( settings, holdPosition, callback ) {\r\n            if ( _fnDataSource( settings ) == 'ssp' ) {\r\n                _fnReDraw( settings, holdPosition );\r\n            }\r\n            else {\r\n                // Trigger xhr\r\n                _fnProcessingDisplay( settings, true );\r\n\r\n                _fnBuildAjax( settings, [], function( json ) {\r\n                    _fnClearTable( settings );\r\n\r\n                    var data = _fnAjaxDataSrc( settings, json );\r\n                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                        _fnAddData( settings, data[i] );\r\n                    }\r\n\r\n                    _fnReDraw( settings, holdPosition );\r\n                    _fnProcessingDisplay( settings, false );\r\n                } );\r\n            }\r\n\r\n            // Use the draw event to trigger a callback, regardless of if it is an async\r\n            // or sync draw\r\n            if ( callback ) {\r\n                var api = new _Api( settings );\r\n\r\n                api.one( 'draw', function () {\r\n                    callback( api.ajax.json() );\r\n                } );\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Get the JSON response from the last Ajax request that DataTables made to the\r\n         * server. Note that this returns the JSON from the first table in the current\r\n         * context.\r\n         *\r\n         * @return {object} JSON received from the server.\r\n         */\r\n        _api_register( 'ajax.json()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length > 0 ) {\r\n                return ctx[0].json;\r\n            }\r\n\r\n            // else return undefined;\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the data submitted in the last Ajax request\r\n         */\r\n        _api_register( 'ajax.params()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length > 0 ) {\r\n                return ctx[0].oAjaxData;\r\n            }\r\n\r\n            // else return undefined;\r\n        } );\r\n\r\n\r\n        /**\r\n         * Reload tables from the Ajax data source. Note that this function will\r\n         * automatically re-draw the table when the remote data has been loaded.\r\n         *\r\n         * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n         *   position. A full re-sort and re-filter is performed when this method is\r\n         *   called, which is why the pagination reset is the default action.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\r\n            return this.iterator( 'table', function (settings) {\r\n                __reload( settings, resetPaging===false, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the current Ajax URL. Note that this returns the URL from the first\r\n         * table in the current context.\r\n         *\r\n         * @return {string} Current Ajax source URL\r\n         *//**\r\n         * Set the Ajax URL. Note that this will set the URL for all tables in the\r\n         * current context.\r\n         *\r\n         * @param {string} url URL to set.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.url()', function ( url ) {\r\n            var ctx = this.context;\r\n\r\n            if ( url === undefined ) {\r\n                // get\r\n                if ( ctx.length === 0 ) {\r\n                    return undefined;\r\n                }\r\n                ctx = ctx[0];\r\n\r\n                return ctx.ajax ?\r\n                    $.isPlainObject( ctx.ajax ) ?\r\n                        ctx.ajax.url :\r\n                        ctx.ajax :\r\n                    ctx.sAjaxSource;\r\n            }\r\n\r\n            // set\r\n            return this.iterator( 'table', function ( settings ) {\r\n                if ( $.isPlainObject( settings.ajax ) ) {\r\n                    settings.ajax.url = url;\r\n                }\r\n                else {\r\n                    settings.ajax = url;\r\n                }\r\n                // No need to consider sAjaxSource here since DataTables gives priority\r\n                // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\r\n                // value of `sAjaxSource` redundant.\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Load data from the newly set Ajax URL. Note that this method is only\r\n         * available when `ajax.url()` is used to set a URL. Additionally, this method\r\n         * has the same effect as calling `ajax.reload()` but is provided for\r\n         * convenience when setting a new URL. Like `ajax.reload()` it will\r\n         * automatically redraw the table once the remote data has been loaded.\r\n         *\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\r\n            // Same as a reload, but makes sense to present it for easy access after a\r\n            // url change\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                __reload( ctx, resetPaging===false, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n\r\n        var _selector_run = function ( selector, select )\r\n        {\r\n            var\r\n                out = [], res,\r\n                a, i, ien, j, jen;\r\n\r\n            // Can't just check for isArray here, as an API or jQuery instance might be\r\n            // given with their array like look\r\n            if ( ! selector || typeof selector === 'string' || selector.length === undefined ) {\r\n                selector = [ selector ];\r\n            }\r\n\r\n            for ( i=0, ien=selector.length ; i<ien ; i++ ) {\r\n                a = selector[i] && selector[i].split ?\r\n                    selector[i].split(',') :\r\n                    [ selector[i] ];\r\n\r\n                for ( j=0, jen=a.length ; j<jen ; j++ ) {\r\n                    res = select( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\r\n\r\n                    if ( res && res.length ) {\r\n                        out.push.apply( out, res );\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _selector_opts = function ( opts )\r\n        {\r\n            if ( ! opts ) {\r\n                opts = {};\r\n            }\r\n\r\n            // Backwards compatibility for 1.9- which used the terminology filter rather\r\n            // than search\r\n            if ( opts.filter && ! opts.search ) {\r\n                opts.search = opts.filter;\r\n            }\r\n\r\n            return {\r\n                search: opts.search || 'none',\r\n                order:  opts.order  || 'current',\r\n                page:   opts.page   || 'all'\r\n            };\r\n        };\r\n\r\n\r\n        var _selector_first = function ( inst )\r\n        {\r\n            // Reduce the API instance to the first item found\r\n            for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\r\n                if ( inst[i].length > 0 ) {\r\n                    // Assign the first element to the first item in the instance\r\n                    // and truncate the instance and context\r\n                    inst[0] = inst[i];\r\n                    inst.length = 1;\r\n                    inst.context = [ inst.context[i] ];\r\n\r\n                    return inst;\r\n                }\r\n            }\r\n\r\n            // Not found - return an empty instance\r\n            inst.length = 0;\r\n            return inst;\r\n        };\r\n\r\n\r\n        var _selector_row_indexes = function ( settings, opts )\r\n        {\r\n            var\r\n                i, ien, tmp, a=[],\r\n                displayFiltered = settings.aiDisplay,\r\n                displayMaster = settings.aiDisplayMaster;\r\n\r\n            var\r\n                search = opts.search,  // none, applied, removed\r\n                order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\r\n                page   = opts.page;    // all, current\r\n\r\n            if ( _fnDataSource( settings ) == 'ssp' ) {\r\n                // In server-side processing mode, most options are irrelevant since\r\n                // rows not shown don't exist and the index order is the applied order\r\n                // Removed is a special case - for consistency just return an empty\r\n                // array\r\n                return search === 'removed' ?\r\n                    [] :\r\n                    _range( 0, displayMaster.length );\r\n            }\r\n            else if ( page == 'current' ) {\r\n                // Current page implies that order=current and fitler=applied, since it is\r\n                // fairly senseless otherwise, regardless of what order and search actually\r\n                // are\r\n                for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\r\n                    a.push( displayFiltered[i] );\r\n                }\r\n            }\r\n            else if ( order == 'current' || order == 'applied' ) {\r\n                a = search == 'none' ?\r\n                    displayMaster.slice() :                      // no search\r\n                    search == 'applied' ?\r\n                        displayFiltered.slice() :                // applied search\r\n                        $.map( displayMaster, function (el, i) { // removed search\r\n                            return $.inArray( el, displayFiltered ) === -1 ? el : null;\r\n                        } );\r\n            }\r\n            else if ( order == 'index' || order == 'original' ) {\r\n                for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                    if ( search == 'none' ) {\r\n                        a.push( i );\r\n                    }\r\n                    else { // applied | removed\r\n                        tmp = $.inArray( i, displayFiltered );\r\n\r\n                        if ((tmp === -1 && search == 'removed') ||\r\n                            (tmp === 1  && search == 'applied') )\r\n                        {\r\n                            a.push( i );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return a;\r\n        };\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Rows\r\n         *\r\n         * {}          - no selector - use all available rows\r\n         * {integer}   - row aoData index\r\n         * {node}      - TR node\r\n         * {string}    - jQuery selector to apply to the TR elements\r\n         * {array}     - jQuery array of nodes, or simply an array of TR nodes\r\n         *\r\n         */\r\n\r\n\r\n        var __row_selector = function ( settings, selector, opts )\r\n        {\r\n            return _selector_run( selector, function ( sel ) {\r\n                var selInt = _intVal( sel );\r\n\r\n                // Short cut - selector is a number and no options provided (default is\r\n                // all records, so no need to check if the index is in there, since it\r\n                // must be - dev error if the index doesn't exist).\r\n                if ( selInt !== null && ! opts ) {\r\n                    return [ selInt ];\r\n                }\r\n\r\n                var rows = _selector_row_indexes( settings, opts );\r\n\r\n                if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\r\n                    // Selector - integer\r\n                    return [ selInt ];\r\n                }\r\n                else if ( ! sel ) {\r\n                    // Selector - none\r\n                    return rows;\r\n                }\r\n\r\n                // Get nodes in the order from the `rows` array (can't use `pluck`) @todo - use pluck_order\r\n                var nodes = [];\r\n                for ( var i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    nodes.push( settings.aoData[ rows[i] ].nTr );\r\n                }\r\n\r\n                if ( sel.nodeName ) {\r\n                    // Selector - node\r\n                    if ( $.inArray( sel, nodes ) !== -1 ) {\r\n                        return [ sel._DT_RowIndex ];// sel is a TR node that is in the table\r\n                        // and DataTables adds a prop for fast lookup\r\n                    }\r\n                }\r\n\r\n                // Selector - jQuery selector string, array of nodes or jQuery object/\r\n                // As jQuery's .filter() allows jQuery objects to be passed in filter,\r\n                // it also allows arrays, so this will cope with all three options\r\n                return $(nodes)\r\n                    .filter( sel )\r\n                    .map( function () {\r\n                        return this._DT_RowIndex;\r\n                    } )\r\n                    .toArray();\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'rows()', function ( selector, opts ) {\r\n            // argument shifting\r\n            if ( selector === undefined ) {\r\n                selector = '';\r\n            }\r\n            else if ( $.isPlainObject( selector ) ) {\r\n                opts = selector;\r\n                selector = '';\r\n            }\r\n\r\n            opts = _selector_opts( opts );\r\n\r\n            var inst = this.iterator( 'table', function ( settings ) {\r\n                return __row_selector( settings, selector, opts );\r\n            } );\r\n\r\n            // Want argument shifting here and in __row_selector?\r\n            inst.selector.rows = selector;\r\n            inst.selector.opts = opts;\r\n\r\n            return inst;\r\n        } );\r\n\r\n\r\n        _api_register( 'rows().nodes()', function () {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                return settings.aoData[ row ].nTr || undefined;\r\n            } );\r\n        } );\r\n\r\n        _api_register( 'rows().data()', function () {\r\n            return this.iterator( true, 'rows', function ( settings, rows ) {\r\n                return _pluck_order( settings.aoData, rows, '_aData' );\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                var r = settings.aoData[ row ];\r\n                return type === 'search' ? r._aFilterData : r._aSortData;\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                _fnInvalidateRow( settings, row, src );\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                return row;\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\r\n            var that = this;\r\n\r\n            return this.iterator( 'row', function ( settings, row, thatIdx ) {\r\n                var data = settings.aoData;\r\n\r\n                data.splice( row, 1 );\r\n\r\n                // Update the _DT_RowIndex parameter on all rows in the table\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    if ( data[i].nTr !== null ) {\r\n                        data[i].nTr._DT_RowIndex = i;\r\n                    }\r\n                }\r\n\r\n                // Remove the target row from the search array\r\n                var displayIndex = $.inArray( row, settings.aiDisplay );\r\n\r\n                // Delete from the display arrays\r\n                _fnDeleteIndex( settings.aiDisplayMaster, row );\r\n                _fnDeleteIndex( settings.aiDisplay, row );\r\n                _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\r\n\r\n                // Check for an 'overflow' they case for displaying the table\r\n                _fnLengthOverflow( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'rows.add()', function ( rows ) {\r\n            var newRows = this.iterator( 'table', function ( settings ) {\r\n                var row, i, ien;\r\n                var out = [];\r\n\r\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    row = rows[i];\r\n\r\n                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                        out.push( _fnAddTr( settings, row )[0] );\r\n                    }\r\n                    else {\r\n                        out.push( _fnAddData( settings, row ) );\r\n                    }\r\n                }\r\n\r\n                return out;\r\n            } );\r\n\r\n            // Return an Api.rows() extended instance, so rows().nodes() etc can be used\r\n            var modRows = this.rows( -1 );\r\n            modRows.pop();\r\n            modRows.push.apply( modRows, newRows.toArray() );\r\n\r\n            return modRows;\r\n        } );\r\n\r\n\r\n\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'row()', function ( selector, opts ) {\r\n            return _selector_first( this.rows( selector, opts ) );\r\n        } );\r\n\r\n\r\n        _api_register( 'row().data()', function ( data ) {\r\n            var ctx = this.context;\r\n\r\n            if ( data === undefined ) {\r\n                // Get\r\n                return ctx.length && this.length ?\r\n                    ctx[0].aoData[ this[0] ]._aData :\r\n                    undefined;\r\n            }\r\n\r\n            // Set\r\n            ctx[0].aoData[ this[0] ]._aData = data;\r\n\r\n            // Automatically invalidate\r\n            _fnInvalidateRow( ctx[0], this[0], 'data' );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( 'row().node()', function () {\r\n            var ctx = this.context;\r\n\r\n            return ctx.length && this.length ?\r\n                ctx[0].aoData[ this[0] ].nTr || null :\r\n                null;\r\n        } );\r\n\r\n\r\n        _api_register( 'row.add()', function ( row ) {\r\n            // Allow a jQuery object to be passed in - only a single row is added from\r\n            // it though - the first element in the set\r\n            if ( row instanceof $ && row.length ) {\r\n                row = row[0];\r\n            }\r\n\r\n            var rows = this.iterator( 'table', function ( settings ) {\r\n                if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                    return _fnAddTr( settings, row )[0];\r\n                }\r\n                return _fnAddData( settings, row );\r\n            } );\r\n\r\n            // Return an Api.rows() extended instance, with the newly added row selected\r\n            return this.row( rows[0] );\r\n        } );\r\n\r\n\r\n\r\n        var __details_add = function ( ctx, row, data, klass )\r\n        {\r\n            // Convert to array of TR elements\r\n            var rows = [];\r\n            var addRow = function ( r, k ) {\r\n                // If we get a TR element, then just add it directly - up to the dev\r\n                // to add the correct number of columns etc\r\n                if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\r\n                    rows.push( r );\r\n                }\r\n                else {\r\n                    // Otherwise create a row with a wrapper\r\n                    var created = $('<tr><td/></tr>');\r\n                    $('td', created)\r\n                        .addClass( k )\r\n                        .html( r )\r\n                        [0].colSpan = _fnVisbleColumns( ctx );\r\n\r\n                    rows.push( created[0] );\r\n                }\r\n            };\r\n\r\n            if ( $.isArray( data ) || data instanceof $ ) {\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    addRow( data[i], klass );\r\n                }\r\n            }\r\n            else {\r\n                addRow( data, klass );\r\n            }\r\n\r\n            if ( row._details ) {\r\n                row._details.remove();\r\n            }\r\n\r\n            row._details = $(rows);\r\n\r\n            // If the children were already shown, that state should be retained\r\n            if ( row._detailsShow ) {\r\n                row._details.insertAfter( row.nTr );\r\n            }\r\n        };\r\n\r\n\r\n        var __details_display = function ( show ) {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length && this.length ) {\r\n                var row = ctx[0].aoData[ this[0] ];\r\n\r\n                if ( row._details ) {\r\n                    row._detailsShow = show;\r\n                    if ( show ) {\r\n                        row._details.insertAfter( row.nTr );\r\n                    }\r\n                    else {\r\n                        row._details.remove();\r\n                    }\r\n\r\n                    __details_events( ctx[0] );\r\n                }\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n\r\n        var __details_events = function ( settings )\r\n        {\r\n            var api = new _Api( settings );\r\n            var namespace = '.dt.DT_details';\r\n            var drawEvent = 'draw'+namespace;\r\n            var colvisEvent = 'column-visibility'+namespace;\r\n\r\n            api.off( drawEvent +' '+ colvisEvent );\r\n\r\n            if ( _pluck( settings.aoData, '_details' ).length > 0 ) {\r\n                // On each draw, insert the required elements into the document\r\n                api.on( drawEvent, function () {\r\n                    api.rows( {page:'current'} ).eq(0).each( function (idx) {\r\n                        // Internal data grab\r\n                        var row = settings.aoData[ idx ];\r\n\r\n                        if ( row._detailsShow ) {\r\n                            row._details.insertAfter( row.nTr );\r\n                        }\r\n                    } );\r\n                } );\r\n\r\n                // Column visibility change - update the colspan\r\n                api.on( colvisEvent, function ( e, settings, idx, vis ) {\r\n                    // Update the colspan for the details rows (note, only if it already has\r\n                    // a colspan)\r\n                    var row, visible = _fnVisbleColumns( settings );\r\n\r\n                    for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                        row = settings.aoData[i];\r\n\r\n                        if ( row._details ) {\r\n                            row._details.children('td[colspan]').attr('colspan', visible );\r\n                        }\r\n                    }\r\n                } );\r\n            }\r\n        };\r\n\r\n        // data can be:\r\n        //  tr\r\n        //  string\r\n        //  jQuery or array of any of the above\r\n        _api_register( 'row().child()', function ( data, klass ) {\r\n            var ctx = this.context;\r\n\r\n            if ( data === undefined ) {\r\n                // get\r\n                return ctx.length && this.length ?\r\n                    ctx[0].aoData[ this[0] ]._details :\r\n                    undefined;\r\n            }\r\n            else if ( ctx.length && this.length ) {\r\n                // set\r\n                __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\r\n            }\r\n\r\n            return this;\r\n        } );\r\n\r\n        _api_register( [\r\n            'row().child.show()',\r\n            'row().child().show()'\r\n        ], function () {\r\n            __details_display.call( this, true );\r\n            return this;\r\n        } );\r\n\r\n        _api_register( [\r\n            'row().child.hide()',\r\n            'row().child().hide()'\r\n        ], function () {\r\n            __details_display.call( this, false );\r\n            return this;\r\n        } );\r\n\r\n        _api_register( 'row().child.isShown()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length && this.length ) {\r\n                // _detailsShown as false or undefined will fall through to return false\r\n                return ctx[0].aoData[ this[0] ]._detailsShow || false;\r\n            }\r\n            return false;\r\n        } );\r\n\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Columns\r\n         *\r\n         * {integer}           - column index (>=0 count from left, <0 count from right)\r\n         * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\r\n         * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\r\n         * \"{string}:name\"     - column name\r\n         * \"{string}\"          - jQuery selector on column header nodes\r\n         *\r\n         */\r\n\r\n        // can be an array of these items, comma separated list, or an array of comma\r\n        // separated lists\r\n\r\n        var __re_column_selector = /^(.*):(name|visIdx|visible)$/;\r\n\r\n        var __column_selector = function ( settings, selector, opts )\r\n        {\r\n            var\r\n                columns = settings.aoColumns,\r\n                names = _pluck( columns, 'sName' ),\r\n                nodes = _pluck( columns, 'nTh' );\r\n\r\n            return _selector_run( selector, function ( s ) {\r\n                var selInt = _intVal( s );\r\n\r\n                if ( s === '' ) {\r\n                    // All columns\r\n                    return _range( columns.length );\r\n                }\r\n                else if ( selInt !== null ) {\r\n                    // Integer selector\r\n                    return [ selInt >= 0 ?\r\n                        selInt : // Count from left\r\n                        columns.length + selInt // Count from right (+ because its a negative value)\r\n                    ];\r\n                }\r\n                else {\r\n                    var match = typeof s === 'string' ?\r\n                        s.match( __re_column_selector ) :\r\n                        '';\r\n\r\n                    if ( match ) {\r\n                        switch( match[2] ) {\r\n                            case 'visIdx':\r\n                            case 'visible':\r\n                                var idx = parseInt( match[1], 10 );\r\n                                // Visible index given, convert to column index\r\n                                if ( idx < 0 ) {\r\n                                    // Counting from the right\r\n                                    var visColumns = $.map( columns, function (col,i) {\r\n                                        return col.bVisible ? i : null;\r\n                                    } );\r\n                                    return [ visColumns[ visColumns.length + idx ] ];\r\n                                }\r\n                                // Counting from the left\r\n                                return [ _fnVisibleToColumnIndex( settings, idx ) ];\r\n\r\n                            case 'name':\r\n                                // match by name. `names` is column index complete and in order\r\n                                return $.map( names, function (name, i) {\r\n                                    return name === match[1] ? i : null;\r\n                                } );\r\n                        }\r\n                    }\r\n                    else {\r\n                        // jQuery selector on the TH elements for the columns\r\n                        return $( nodes )\r\n                            .filter( s )\r\n                            .map( function () {\r\n                                return $.inArray( this, nodes ); // `nodes` is column index complete and in order\r\n                            } )\r\n                            .toArray();\r\n                    }\r\n                }\r\n            } );\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        var __setColumnVis = function ( settings, column, vis ) {\r\n            var\r\n                cols = settings.aoColumns,\r\n                col  = cols[ column ],\r\n                data = settings.aoData,\r\n                row, cells, i, ien, tr;\r\n\r\n            // Get\r\n            if ( vis === undefined ) {\r\n                return col.bVisible;\r\n            }\r\n\r\n            // Set\r\n            // No change\r\n            if ( col.bVisible === vis ) {\r\n                return;\r\n            }\r\n\r\n            if ( vis ) {\r\n                // Insert column\r\n                // Need to decide if we should use appendChild or insertBefore\r\n                var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\r\n\r\n                for ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    tr = data[i].nTr;\r\n                    cells = data[i].anCells;\r\n\r\n                    if ( tr ) {\r\n                        // insertBefore can act like appendChild if 2nd arg is null\r\n                        tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Remove column\r\n                $( _pluck( settings.aoData, 'anCells', column ) ).detach();\r\n\r\n                col.bVisible = false;\r\n                _fnDrawHead( settings, settings.aoHeader );\r\n                _fnDrawHead( settings, settings.aoFooter );\r\n\r\n                _fnSaveState( settings );\r\n            }\r\n\r\n            // Common actions\r\n            col.bVisible = vis;\r\n            _fnDrawHead( settings, settings.aoHeader );\r\n            _fnDrawHead( settings, settings.aoFooter );\r\n\r\n            // Automatically adjust column sizing\r\n            _fnAdjustColumnSizing( settings );\r\n\r\n            // Realign columns for scrolling\r\n            if ( settings.oScroll.sX || settings.oScroll.sY ) {\r\n                _fnScrollDraw( settings );\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );\r\n\r\n            _fnSaveState( settings );\r\n        };\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'columns()', function ( selector, opts ) {\r\n            // argument shifting\r\n            if ( selector === undefined ) {\r\n                selector = '';\r\n            }\r\n            else if ( $.isPlainObject( selector ) ) {\r\n                opts = selector;\r\n                selector = '';\r\n            }\r\n\r\n            opts = _selector_opts( opts );\r\n\r\n            var inst = this.iterator( 'table', function ( settings ) {\r\n                return __column_selector( settings, selector, opts );\r\n            } );\r\n\r\n            // Want argument shifting here and in _row_selector?\r\n            inst.selector.cols = selector;\r\n            inst.selector.opts = opts;\r\n\r\n            return inst;\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return settings.aoColumns[column].nTh;\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return settings.aoColumns[column].nTf;\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().data()', 'column().data()', function () {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                var a = [];\r\n                for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\r\n                    a.push( _fnGetCellData( settings, rows[row], column, '' ) );\r\n                }\r\n                return a;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                return _pluck_order( settings.aoData, rows,\r\n                    type === 'search' ? '_aFilterData' : '_aSortData', column\r\n                );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return vis === undefined ?\r\n                    settings.aoColumns[ column ].bVisible :\r\n                    __setColumnVis( settings, column, vis );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return type === 'visible' ?\r\n                    _fnColumnIndexToVisible( settings, column ) :\r\n                    column;\r\n            } );\r\n        } );\r\n\r\n\r\n        // _api_register( 'columns().show()', function () {\r\n        // \tvar selector = this.selector;\r\n        // \treturn this.columns( selector.cols, selector.opts ).visible( true );\r\n        // } );\r\n\r\n\r\n        // _api_register( 'columns().hide()', function () {\r\n        // \tvar selector = this.selector;\r\n        // \treturn this.columns( selector.cols, selector.opts ).visible( false );\r\n        // } );\r\n\r\n\r\n\r\n        _api_register( 'columns.adjust()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnAdjustColumnSizing( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        // Convert from one column index type, to another type\r\n        _api_register( 'column.index()', function ( type, idx ) {\r\n            if ( this.context.length !== 0 ) {\r\n                var ctx = this.context[0];\r\n\r\n                if ( type === 'fromVisible' || type === 'toData' ) {\r\n                    return _fnVisibleToColumnIndex( ctx, idx );\r\n                }\r\n                else if ( type === 'fromData' || type === 'toVisible' ) {\r\n                    return _fnColumnIndexToVisible( ctx, idx );\r\n                }\r\n            }\r\n        } );\r\n\r\n\r\n        _api_register( 'column()', function ( selector, opts ) {\r\n            return _selector_first( this.columns( selector, opts ) );\r\n        } );\r\n\r\n\r\n\r\n\r\n        var __cell_selector = function ( settings, selector, opts )\r\n        {\r\n            var data = settings.aoData;\r\n            var rows = _selector_row_indexes( settings, opts );\r\n            var cells = _pluck_order( data, rows, 'anCells' );\r\n            var allCells = $( [].concat.apply([], cells) );\r\n            var row;\r\n            var columns = settings.aoColumns.length;\r\n            var a, i, ien, j;\r\n\r\n            return _selector_run( selector, function ( s ) {\r\n                if ( ! s ) {\r\n                    // All cells\r\n                    a = [];\r\n\r\n                    for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                        row = rows[i];\r\n\r\n                        for ( j=0 ; j<columns ; j++ ) {\r\n                            a.push( {\r\n                                row: row,\r\n                                column: j\r\n                            } );\r\n                        }\r\n                    }\r\n\r\n                    return a;\r\n                }\r\n                else if ( $.isPlainObject( s ) ) {\r\n                    return [s];\r\n                }\r\n\r\n                // jQuery filtered cells\r\n                return allCells\r\n                    .filter( s )\r\n                    .map( function (i, el) {\r\n                        row = el.parentNode._DT_RowIndex;\r\n\r\n                        return {\r\n                            row: row,\r\n                            column: $.inArray( el, data[ row ].anCells )\r\n                        };\r\n                    } )\r\n                    .toArray();\r\n            } );\r\n        };\r\n\r\n\r\n\r\n\r\n        _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\r\n            // Argument shifting\r\n            if ( $.isPlainObject( rowSelector ) ) {\r\n                // If passing in a cell index\r\n                if ( rowSelector.row ) {\r\n                    opts = columnSelector;\r\n                    columnSelector = null;\r\n                }\r\n                else {\r\n                    opts = rowSelector;\r\n                    rowSelector = null;\r\n                }\r\n            }\r\n            if ( $.isPlainObject( columnSelector ) ) {\r\n                opts = columnSelector;\r\n                columnSelector = null;\r\n            }\r\n\r\n            // Cell selector\r\n            if ( columnSelector === null || columnSelector === undefined ) {\r\n                return this.iterator( 'table', function ( settings ) {\r\n                    return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\r\n                } );\r\n            }\r\n\r\n            // Row + column selector\r\n            var columns = this.columns( columnSelector, opts );\r\n            var rows = this.rows( rowSelector, opts );\r\n            var a, i, ien, j, jen;\r\n\r\n            var cells = this.iterator( 'table', function ( settings, idx ) {\r\n                a = [];\r\n\r\n                for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\r\n                    for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\r\n                        a.push( {\r\n                            row:    rows[idx][i],\r\n                            column: columns[idx][j]\r\n                        } );\r\n                    }\r\n                }\r\n\r\n                return a;\r\n            } );\r\n\r\n            $.extend( cells.selector, {\r\n                cols: columnSelector,\r\n                rows: rowSelector,\r\n                opts: opts\r\n            } );\r\n\r\n            return cells;\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return settings.aoData[ row ].anCells[ column ];\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'cells().data()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return _fnGetCellData( settings, row, column );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\r\n            type = type === 'search' ? '_aFilterData' : '_aSortData';\r\n\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return settings.aoData[ row ][ type ][ column ];\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return {\r\n                    row: row,\r\n                    column: column,\r\n                    columnVisible: _fnColumnIndexToVisible( settings, column )\r\n                };\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            'cells().invalidate()',\r\n            'cell().invalidate()'\r\n        ], function ( src ) {\r\n            var selector = this.selector;\r\n\r\n            // Use the rows method of the instance to perform the invalidation, rather\r\n            // than doing it here. This avoids needing to handle duplicate rows from\r\n            // the cells.\r\n            this.rows( selector.rows, selector.opts ).invalidate( src );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n\r\n\r\n        _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\r\n            return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\r\n        } );\r\n\r\n\r\n\r\n        _api_register( 'cell().data()', function ( data ) {\r\n            var ctx = this.context;\r\n            var cell = this[0];\r\n\r\n            if ( data === undefined ) {\r\n                // Get\r\n                return ctx.length && cell.length ?\r\n                    _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\r\n                    undefined;\r\n            }\r\n\r\n            // Set\r\n            _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\r\n            _fnInvalidateRow( ctx[0], cell[0].row, 'data', cell[0].column );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Get current ordering (sorting) that has been applied to the table.\r\n         *\r\n         * @returns {array} 2D array containing the sorting information for the first\r\n         *   table in the current context. Each element in the parent array represents\r\n         *   a column being sorted upon (i.e. multi-sorting with two columns would have\r\n         *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\r\n         *   the column index that the sorting condition applies to, the second is the\r\n         *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\r\n         *   index of the sorting order from the `column.sorting` initialisation array.\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {integer} order Column index to sort upon.\r\n         * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\r\n         * @returns {DataTables.Api} this\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {array} order 1D array of sorting information to be applied.\r\n         * @param {array} [...] Optional additional sorting conditions\r\n         * @returns {DataTables.Api} this\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {array} order 2D array of sorting information to be applied.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'order()', function ( order, dir ) {\r\n            var ctx = this.context;\r\n\r\n            if ( order === undefined ) {\r\n                // get\r\n                return ctx.length !== 0 ?\r\n                    ctx[0].aaSorting :\r\n                    undefined;\r\n            }\r\n\r\n            // set\r\n            if ( typeof order === 'number' ) {\r\n                // Simple column / direction passed in\r\n                order = [ [ order, dir ] ];\r\n            }\r\n            else if ( ! $.isArray( order[0] ) ) {\r\n                // Arguments passed in (list of 1D arrays)\r\n                order = Array.prototype.slice.call( arguments );\r\n            }\r\n            // otherwise a 2D array was passed in\r\n\r\n            return this.iterator( 'table', function ( settings ) {\r\n                settings.aaSorting = order.slice();\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Attach a sort listener to an element for a given column\r\n         *\r\n         * @param {node|jQuery|string} node Identifier for the element(s) to attach the\r\n         *   listener to. This can take the form of a single DOM node, a jQuery\r\n         *   collection of nodes or a jQuery selector which will identify the node(s).\r\n         * @param {integer} column the column that a click on this node will sort on\r\n         * @param {function} [callback] callback function when sort is run\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'order.listener()', function ( node, column, callback ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnSortAttachListener( settings, node, column, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n        // Order by the selected column(s)\r\n        _api_register( [\r\n            'columns().order()',\r\n            'column().order()'\r\n        ], function ( dir ) {\r\n            var that = this;\r\n\r\n            return this.iterator( 'table', function ( settings, i ) {\r\n                var sort = [];\r\n\r\n                $.each( that[i], function (j, col) {\r\n                    sort.push( [ col, dir ] );\r\n                } );\r\n\r\n                settings.aaSorting = sort;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\r\n            var ctx = this.context;\r\n\r\n            if ( input === undefined ) {\r\n                // get\r\n                return ctx.length !== 0 ?\r\n                    ctx[0].oPreviousSearch.sSearch :\r\n                    undefined;\r\n            }\r\n\r\n            // set\r\n            return this.iterator( 'table', function ( settings ) {\r\n                if ( ! settings.oFeatures.bFilter ) {\r\n                    return;\r\n                }\r\n\r\n                _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\r\n                    \"sSearch\": input+\"\",\r\n                    \"bRegex\":  regex === null ? false : regex,\r\n                    \"bSmart\":  smart === null ? true  : smart,\r\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                } ), 1 );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            'columns().search()',\r\n            'column().search()'\r\n        ], function ( input, regex, smart, caseInsen ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                var preSearch = settings.aoPreSearchCols;\r\n\r\n                if ( input === undefined ) {\r\n                    // get\r\n                    return preSearch[ column ].sSearch;\r\n                }\r\n\r\n                // set\r\n                if ( ! settings.oFeatures.bFilter ) {\r\n                    return;\r\n                }\r\n\r\n                $.extend( preSearch[ column ], {\r\n                    \"sSearch\": input+\"\",\r\n                    \"bRegex\":  regex === null ? false : regex,\r\n                    \"bSmart\":  smart === null ? true  : smart,\r\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                } );\r\n\r\n                _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Provide a common method for plug-ins to check the version of DataTables being\r\n         * used, in order to ensure compatibility.\r\n         *\r\n         *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\r\n         *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\r\n         *  @returns {boolean} true if this version of DataTables is greater or equal to\r\n         *    the required version, or false if this version of DataTales is not\r\n         *    suitable\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\r\n         */\r\n        DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\r\n        {\r\n            var aThis = DataTable.version.split('.');\r\n            var aThat = version.split('.');\r\n            var iThis, iThat;\r\n\r\n            for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\r\n                iThis = parseInt( aThis[i], 10 ) || 0;\r\n                iThat = parseInt( aThat[i], 10 ) || 0;\r\n\r\n                // Parts are the same, keep comparing\r\n                if (iThis === iThat) {\r\n                    continue;\r\n                }\r\n\r\n                // Parts are different, return immediately\r\n                return iThis > iThat;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n\r\n        /**\r\n         * Check if a `<table>` node is a DataTable table already or not.\r\n         *\r\n         *  @param {node|jquery|string} table Table node, jQuery object or jQuery\r\n         *      selector for the table to test. Note that if more than more than one\r\n         *      table is passed on, only the first will be checked\r\n         *  @returns {boolean} true the table given is a DataTable, or false otherwise\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\r\n\t *      $('#example').dataTable();\r\n\t *    }\r\n         */\r\n        DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\r\n        {\r\n            var t = $(table).get(0);\r\n            var is = false;\r\n\r\n            $.each( DataTable.settings, function (i, o) {\r\n                if ( o.nTable === t || o.nScrollHead === t || o.nScrollFoot === t ) {\r\n                    is = true;\r\n                }\r\n            } );\r\n\r\n            return is;\r\n        };\r\n\r\n\r\n        /**\r\n         * Get all DataTable tables that have been initialised - optionally you can\r\n         * select to get only currently visible tables.\r\n         *\r\n         *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\r\n         *    or visible tables only.\r\n         *  @returns {array} Array of `table` nodes (not DataTable instances) which are\r\n         *    DataTables\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    $.each( $.fn.dataTable.tables(true), function () {\r\n\t *      $(table).DataTable().columns.adjust();\r\n\t *    } );\r\n         */\r\n        DataTable.tables = DataTable.fnTables = function ( visible )\r\n        {\r\n            return jQuery.map( DataTable.settings, function (o) {\r\n                if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\r\n                    return o.nTable;\r\n                }\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         * Convert from camel case parameters to Hungarian notation. This is made public\r\n         * for the extensions to provide the same ability as DataTables core to accept\r\n         * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\r\n         * parameters.\r\n         *\r\n         *  @param {object} src The model object which holds all parameters that can be\r\n         *    mapped.\r\n         *  @param {object} user The object to convert from camel case to Hungarian.\r\n         *  @param {boolean} force When set to `true`, properties which already have a\r\n         *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n         *    won't be.\r\n         */\r\n        DataTable.camelToHungarian = _fnCamelToHungarian;\r\n\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( '$()', function ( selector, opts ) {\r\n            var\r\n                rows   = this.rows( opts ).nodes(), // Get all rows\r\n                jqRows = $(rows);\r\n\r\n            return $( [].concat(\r\n                jqRows.filter( selector ).toArray(),\r\n                jqRows.find( selector ).toArray()\r\n            ) );\r\n        } );\r\n\r\n\r\n        // jQuery functions to operate on the tables\r\n        $.each( [ 'on', 'one', 'off' ], function (i, key) {\r\n            _api_register( key+'()', function ( /* event, handler */ ) {\r\n                var args = Array.prototype.slice.call(arguments);\r\n\r\n                // Add the `dt` namespace automatically if it isn't already present\r\n                if ( args[0].indexOf( '.dt' ) === -1 ) {\r\n                    args[0] += '.dt';\r\n                }\r\n\r\n                var inst = $( this.tables().nodes() );\r\n                inst[key].apply( inst, args );\r\n                return this;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'clear()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnClearTable( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'settings()', function () {\r\n            return new _Api( this.context, this.context );\r\n        } );\r\n\r\n\r\n        _api_register( 'data()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                return _pluck( settings.aoData, '_aData' );\r\n            } ).flatten();\r\n        } );\r\n\r\n\r\n        _api_register( 'destroy()', function ( remove ) {\r\n            remove = remove || false;\r\n\r\n            return this.iterator( 'table', function ( settings ) {\r\n                var orig      = settings.nTableWrapper.parentNode;\r\n                var classes   = settings.oClasses;\r\n                var table     = settings.nTable;\r\n                var tbody     = settings.nTBody;\r\n                var thead     = settings.nTHead;\r\n                var tfoot     = settings.nTFoot;\r\n                var jqTable   = $(table);\r\n                var jqTbody   = $(tbody);\r\n                var jqWrapper = $(settings.nTableWrapper);\r\n                var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\r\n                var i, ien;\r\n\r\n                // Flag to note that the table is currently being destroyed - no action\r\n                // should be taken\r\n                settings.bDestroying = true;\r\n\r\n                // Fire off the destroy callbacks for plug-ins etc\r\n                _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\r\n\r\n                // If not being removed from the document, make all columns visible\r\n                if ( ! remove ) {\r\n                    new _Api( settings ).columns().visible( true );\r\n                }\r\n\r\n                // Blitz all `DT` namespaced events (these are internal events, the\r\n                // lowercase, `dt` events are user subscribed and they are responsible\r\n                // for removing them\r\n                jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');\r\n                $(window).unbind('.DT-'+settings.sInstance);\r\n\r\n                // When scrolling we had to break the table up - restore it\r\n                if ( table != thead.parentNode ) {\r\n                    jqTable.children('thead').detach();\r\n                    jqTable.append( thead );\r\n                }\r\n\r\n                if ( tfoot && table != tfoot.parentNode ) {\r\n                    jqTable.children('tfoot').detach();\r\n                    jqTable.append( tfoot );\r\n                }\r\n\r\n                // Remove the DataTables generated nodes, events and classes\r\n                jqTable.detach();\r\n                jqWrapper.detach();\r\n\r\n                settings.aaSorting = [];\r\n                settings.aaSortingFixed = [];\r\n                _fnSortingClasses( settings );\r\n\r\n                $( rows ).removeClass( settings.asStripeClasses.join(' ') );\r\n\r\n                $('th, td', thead).removeClass( classes.sSortable+' '+\r\n                    classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\r\n                );\r\n\r\n                if ( settings.bJUI ) {\r\n                    $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\r\n                    $('th, td', thead).each( function () {\r\n                        var wrapper = $('div.'+classes.sSortJUIWrapper, this);\r\n                        $(this).append( wrapper.contents() );\r\n                        wrapper.detach();\r\n                    } );\r\n                }\r\n\r\n                if ( ! remove && orig ) {\r\n                    // insertBefore acts like appendChild if !arg[1]\r\n                    orig.insertBefore( table, settings.nTableReinsertBefore );\r\n                }\r\n\r\n                // Add the TR elements back into the table in their original order\r\n                jqTbody.children().detach();\r\n                jqTbody.append( rows );\r\n\r\n                // Restore the width of the original table - was read from the style property,\r\n                // so we can restore directly to that\r\n                jqTable\r\n                    .css( 'width', settings.sDestroyWidth )\r\n                    .removeClass( classes.sTable );\r\n\r\n                // If the were originally stripe classes - then we add them back here.\r\n                // Note this is not fool proof (for example if not all rows had stripe\r\n                // classes - but it's a good effort without getting carried away\r\n                ien = settings.asDestroyStripes.length;\r\n\r\n                if ( ien ) {\r\n                    jqTbody.children().each( function (i) {\r\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\r\n                    } );\r\n                }\r\n\r\n                /* Remove the settings object from the settings array */\r\n                var idx = $.inArray( settings, DataTable.settings );\r\n                if ( idx !== -1 ) {\r\n                    DataTable.settings.splice( idx, 1 );\r\n                }\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Version string for plug-ins to check compatibility. Allowed format is\r\n         * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\r\n         * only for non-release builds. See http://semver.org/ for more information.\r\n         *  @member\r\n         *  @type string\r\n         *  @default Version number\r\n         */\r\n        DataTable.version = \"1.10.0\";\r\n\r\n        /**\r\n         * Private data store, containing all of the settings objects that are\r\n         * created for the tables on a given page.\r\n         *\r\n         * Note that the `DataTable.settings` object is aliased to\r\n         * `jQuery.fn.dataTableExt` through which it may be accessed and\r\n         * manipulated, or `jQuery.fn.dataTable.settings`.\r\n         *  @member\r\n         *  @type array\r\n         *  @default []\r\n         *  @private\r\n         */\r\n        DataTable.settings = [];\r\n\r\n        /**\r\n         * Object models container, for the various models that DataTables has\r\n         * available to it. These models define the objects that are used to hold\r\n         * the active state and configuration of the table.\r\n         *  @namespace\r\n         */\r\n        DataTable.models = {};\r\n\r\n\r\n\r\n        /**\r\n         * Template object for the way in which DataTables holds information about\r\n         * search information for the global filter and individual column filters.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oSearch = {\r\n            /**\r\n             * Flag to indicate if the filtering should be case insensitive or not\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bCaseInsensitive\": true,\r\n\r\n            /**\r\n             * Applied search term\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             */\r\n            \"sSearch\": \"\",\r\n\r\n            /**\r\n             * Flag to indicate if the search term should be interpreted as a\r\n             * regular expression (true) or not (false) and therefore and special\r\n             * regex characters escaped.\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bRegex\": false,\r\n\r\n            /**\r\n             * Flag to indicate if DataTables is to use its smart filtering or not.\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bSmart\": true\r\n        };\r\n\r\n\r\n\r\n\r\n        /**\r\n         * Template object for the way in which DataTables holds information about\r\n         * each individual row. This is the object format used for the settings\r\n         * aoData array.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oRow = {\r\n            /**\r\n             * TR element for the row\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTr\": null,\r\n\r\n            /**\r\n             * Array of TD elements for each row. This is null until the row has been\r\n             * created.\r\n             *  @type array nodes\r\n             *  @default []\r\n             */\r\n            \"anCells\": null,\r\n\r\n            /**\r\n             * Data object from the original data source for the row. This is either\r\n             * an array if using the traditional form of DataTables, or an object if\r\n             * using mData options. The exact type will depend on the passed in\r\n             * data from the data source, or will be an array if using DOM a data\r\n             * source.\r\n             *  @type array|object\r\n             *  @default []\r\n             */\r\n            \"_aData\": [],\r\n\r\n            /**\r\n             * Sorting data cache - this array is ostensibly the same length as the\r\n             * number of columns (although each index is generated only as it is\r\n             * needed), and holds the data that is used for sorting each column in the\r\n             * row. We do this cache generation at the start of the sort in order that\r\n             * the formatting of the sort data need be done only once for each cell\r\n             * per sort. This array should not be read from or written to by anything\r\n             * other than the master sorting methods.\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aSortData\": null,\r\n\r\n            /**\r\n             * Per cell filtering data cache. As per the sort data cache, used to\r\n             * increase the performance of the filtering in DataTables\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aFilterData\": null,\r\n\r\n            /**\r\n             * Filtering data cache. This is the same as the cell filtering cache, but\r\n             * in this case a string rather than an array. This is easily computed with\r\n             * a join on `_aFilterData`, but is provided as a cache so the join isn't\r\n             * needed on every search (memory traded for performance)\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sFilterRow\": null,\r\n\r\n            /**\r\n             * Cache of the class name that DataTables has applied to the row, so we\r\n             * can quickly look at this variable rather than needing to do a DOM check\r\n             * on className for the nTr property.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *  @private\r\n             */\r\n            \"_sRowStripe\": \"\",\r\n\r\n            /**\r\n             * Denote if the original data source was from the DOM, or the data source\r\n             * object. This is used for invalidating data, so DataTables can\r\n             * automatically read data from the original source, unless uninstructed\r\n             * otherwise.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"src\": null\r\n        };\r\n\r\n\r\n        /**\r\n         * Template object for the column information object in DataTables. This object\r\n         * is held in the settings aoColumns array and contains all the information that\r\n         * DataTables needs about each individual column.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults.column}\r\n         * but this one is the internal data store for DataTables's cache of columns.\r\n         * It should NOT be manipulated outside of DataTables. Any configuration should\r\n         * be done through the initialisation options.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oColumn = {\r\n            /**\r\n             * Column index. This could be worked out on-the-fly with $.inArray, but it\r\n             * is faster to just hold it as a variable\r\n             *  @type integer\r\n             *  @default null\r\n             */\r\n            \"idx\": null,\r\n\r\n            /**\r\n             * A list of the columns that sorting should occur on when this column\r\n             * is sorted. That this property is an array allows multi-column sorting\r\n             * to be defined for a column (for example first name / last name columns\r\n             * would benefit from this). The values are integers pointing to the\r\n             * columns to be sorted on (typically it will be a single integer pointing\r\n             * at itself, but that doesn't need to be the case).\r\n             *  @type array\r\n             */\r\n            \"aDataSort\": null,\r\n\r\n            /**\r\n             * Define the sorting directions that are applied to the column, in sequence\r\n             * as the column is repeatedly sorted upon - i.e. the first value is used\r\n             * as the sorting direction when the column if first sorted (clicked on).\r\n             * Sort it again (click again) and it will move on to the next index.\r\n             * Repeat until loop.\r\n             *  @type array\r\n             */\r\n            \"asSorting\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is searchable, and thus should be included\r\n             * in the filtering or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSearchable\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is sortable or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSortable\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is currently visible in the table or not\r\n             *  @type boolean\r\n             */\r\n            \"bVisible\": null,\r\n\r\n            /**\r\n             * Store for manual type assignment using the `column.type` option. This\r\n             * is held in store so we can manipulate the column's `sType` property.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sManualType\": null,\r\n\r\n            /**\r\n             * Flag to indicate if HTML5 data attributes should be used as the data\r\n             * source for filtering or sorting. True is either are.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @private\r\n             */\r\n            \"_bAttrSrc\": false,\r\n\r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} nTd The TD node that has been created\r\n             *  @param {*} sData The Data for the cell\r\n             *  @param {array|object} oData The data for the whole row\r\n             *  @param {int} iRow The row index for the aoData data store\r\n             *  @default null\r\n             */\r\n            \"fnCreatedCell\": null,\r\n\r\n            /**\r\n             * Function to get data from a cell in a column. You should <b>never</b>\r\n             * access data directly through _aData internally in DataTables - always use\r\n             * the method attached to this property. It allows mData to function as\r\n             * required. This function is automatically assigned by the column\r\n             * initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {string} sSpecific The specific data type you want to get -\r\n             *    'display', 'type' 'filter' 'sort'\r\n             *  @returns {*} The data for the cell from the given row's data\r\n             *  @default null\r\n             */\r\n            \"fnGetData\": null,\r\n\r\n            /**\r\n             * Function to set data for a cell in the column. You should <b>never</b>\r\n             * set the data directly to _aData internally in DataTables - always use\r\n             * this method. It allows mData to function as required. This function\r\n             * is automatically assigned by the column initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {*} sValue Value to set\r\n             *  @default null\r\n             */\r\n            \"fnSetData\": null,\r\n\r\n            /**\r\n             * Property to read the value for the cells in the column from the data\r\n             * source array / object. If null, then the default content is used, if a\r\n             * function is given then the return from the function is used.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mData\": null,\r\n\r\n            /**\r\n             * Partner property to mData which is used (only when defined) to get\r\n             * the data - i.e. it is basically the same as mData, but without the\r\n             * 'set' option, and also the data fed to it is the result from mData.\r\n             * This is the rendering method to match the data method of mData.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mRender\": null,\r\n\r\n            /**\r\n             * Unique header TH/TD element for this column - this is what the sorting\r\n             * listener is attached to (if sorting is enabled.)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTh\": null,\r\n\r\n            /**\r\n             * Unique footer TH/TD element for this column (if there is one). Not used\r\n             * in DataTables as such, but can be used for plug-ins to reference the\r\n             * footer for each column.\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTf\": null,\r\n\r\n            /**\r\n             * The class to apply to all TD elements in the table's TBODY for the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sClass\": null,\r\n\r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             *  @type string\r\n             */\r\n            \"sContentPadding\": null,\r\n\r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because mData\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDefaultContent\": null,\r\n\r\n            /**\r\n             * Name for the column, allowing reference to the column by name as well as\r\n             * by index (needs a lookup to work by name).\r\n             *  @type string\r\n             */\r\n            \"sName\": null,\r\n\r\n            /**\r\n             * Custom sorting data type - defines which of the available plug-ins in\r\n             * afnSortData the custom sorting will use - if any is defined.\r\n             *  @type string\r\n             *  @default std\r\n             */\r\n            \"sSortDataType\": 'std',\r\n\r\n            /**\r\n             * Class to be applied to the header element when sorting on this column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClass\": null,\r\n\r\n            /**\r\n             * Class to be applied to the header element when sorting on this column -\r\n             * when jQuery UI theming is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClassJUI\": null,\r\n\r\n            /**\r\n             * Title of the column - what is seen in the TH element (nTh).\r\n             *  @type string\r\n             */\r\n            \"sTitle\": null,\r\n\r\n            /**\r\n             * Column sorting and filtering type\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sType\": null,\r\n\r\n            /**\r\n             * Width of the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidth\": null,\r\n\r\n            /**\r\n             * Width of the column when it was first \"encountered\"\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidthOrig\": null\r\n        };\r\n\r\n\r\n        /*\r\n         * Developer note: The properties of the object below are given in Hungarian\r\n         * notation, that was used as the interface for DataTables prior to v1.10, however\r\n         * from v1.10 onwards the primary interface is camel case. In order to avoid\r\n         * breaking backwards compatibility utterly with this change, the Hungarian\r\n         * version is still, internally the primary interface, but is is not documented\r\n         * - hence the @name tags in each doc comment. This allows a Javascript function\r\n         * to create a map from Hungarian notation to camel case (going the other direction\r\n         * would require each property to be listed, which would at around 3K to the size\r\n         * of DataTables, while this method is about a 0.5K hit.\r\n         *\r\n         * Ultimately this does pave the way for Hungarian notation to be dropped\r\n         * completely, but that is a massive amount of work and will break current\r\n         * installs (therefore is on-hold until v2).\r\n         */\r\n\r\n        /**\r\n         * Initialisation options that can be given to DataTables at initialisation\r\n         * time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults = {\r\n            /**\r\n             * An array of data to use for the table, passed in at initialisation which\r\n             * will be used in preference to any data which is already in the DOM. This is\r\n             * particularly useful for constructing tables purely in Javascript, for\r\n             * example with a custom Ajax call.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.data\r\n             *\r\n             *  @example\r\n             *    // Using a 2D array data source\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"data\": [\r\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\r\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\r\n\t\t *        ],\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"Engine\" },\r\n\t\t *          { \"title\": \"Browser\" },\r\n\t\t *          { \"title\": \"Platform\" },\r\n\t\t *          { \"title\": \"Version\" },\r\n\t\t *          { \"title\": \"Grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using an array of objects as a data source (`data`)\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"data\": [\r\n\t\t *          {\r\n\t\t *            \"engine\":   \"Trident\",\r\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\r\n\t\t *            \"platform\": \"Win 95+\",\r\n\t\t *            \"version\":  4,\r\n\t\t *            \"grade\":    \"X\"\r\n\t\t *          },\r\n\t\t *          {\r\n\t\t *            \"engine\":   \"Trident\",\r\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\r\n\t\t *            \"platform\": \"Win 95+\",\r\n\t\t *            \"version\":  5,\r\n\t\t *            \"grade\":    \"C\"\r\n\t\t *          }\r\n\t\t *        ],\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\r\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\r\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\r\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\r\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aaData\": null,\r\n\r\n\r\n            /**\r\n             * If ordering is enabled, then DataTables will perform a first pass sort on\r\n             * initialisation. You can define which column(s) the sort is performed\r\n             * upon, and the sorting direction, with this variable. The `sorting` array\r\n             * should contain an array for each column to be sorted initially containing\r\n             * the column's index and a direction string ('asc' or 'desc').\r\n             *  @type array\r\n             *  @default [[0,'asc']]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.order\r\n             *\r\n             *  @example\r\n             *    // Sort by 3rd column first, and then 4th column\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *    // No initial sorting\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"order\": []\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aaSorting\": [[0,'asc']],\r\n\r\n\r\n            /**\r\n             * This parameter is basically identical to the `sorting` parameter, but\r\n             * cannot be overridden by user interaction with the table. What this means\r\n             * is that you could have a column (visible or hidden) which the sorting\r\n             * will always be forced on first - any sorting after that (from the user)\r\n             * will then be performed as required. This can be useful for grouping rows\r\n             * together.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.orderFixed\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderFixed\": [[0,'asc']]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"aaSortingFixed\": [],\r\n\r\n\r\n            /**\r\n             * DataTables can be instructed to load data to display in the table from a\r\n             * Ajax source. This option defines how that Ajax call is made and where to.\r\n             *\r\n             * The `ajax` property has three different modes of operation, depending on\r\n             * how it is defined. These are:\r\n             *\r\n             * * `string` - Set the URL from where the data should be loaded from.\r\n             * * `object` - Define properties for `jQuery.ajax`.\r\n             * * `function` - Custom data get function\r\n             *\r\n             * `string`\r\n             * --------\r\n             *\r\n             * As a string, the `ajax` property simply defines the URL from which\r\n             * DataTables will load data.\r\n             *\r\n             * `object`\r\n             * --------\r\n             *\r\n             * As an object, the parameters in the object are passed to\r\n             * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\r\n             * of the Ajax request. DataTables has a number of default parameters which\r\n             * you can override using this option. Please refer to the jQuery\r\n             * documentation for a full description of the options available, although\r\n             * the following parameters provide additional options in DataTables or\r\n             * require special consideration:\r\n             *\r\n             * * `data` - As with jQuery, `data` can be provided as an object, but it\r\n             *   can also be used as a function to manipulate the data DataTables sends\r\n             *   to the server. The function takes a single parameter, an object of\r\n             *   parameters with the values that DataTables has readied for sending. An\r\n             *   object may be returned which will be merged into the DataTables\r\n             *   defaults, or you can add the items to the object that was passed in and\r\n             *   not return anything from the function. This supersedes `fnServerParams`\r\n             *   from DataTables 1.9-.\r\n             *\r\n             * * `dataSrc` - By default DataTables will look for the property `data` (or\r\n             *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\r\n             *   from an Ajax source or for server-side processing - this parameter\r\n             *   allows that property to be changed. You can use Javascript dotted\r\n             *   object notation to get a data source for multiple levels of nesting, or\r\n             *   it my be used as a function. As a function it takes a single parameter,\r\n             *   the JSON returned from the server, which can be manipulated as\r\n             *   required, with the returned value being that used by DataTables as the\r\n             *   data source for the table. This supersedes `sAjaxDataProp` from\r\n             *   DataTables 1.9-.\r\n             *\r\n             * * `success` - Should not be overridden it is used internally in\r\n             *   DataTables. To manipulate / transform the data returned by the server\r\n             *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\r\n             *\r\n             * `function`\r\n             * ----------\r\n             *\r\n             * As a function, making the Ajax call is left up to yourself allowing\r\n             * complete control of the Ajax request. Indeed, if desired, a method other\r\n             * than Ajax could be used to obtain the required data, such as Web storage\r\n             * or an AIR database.\r\n             *\r\n             * The function is given four parameters and no return is required. The\r\n             * parameters are:\r\n             *\r\n             * 1. _object_ - Data to send to the server\r\n             * 2. _function_ - Callback function that must be executed when the required\r\n             *    data has been obtained. That data should be passed into the callback\r\n             *    as the only parameter\r\n             * 3. _object_ - DataTables settings object for the table\r\n             *\r\n             * Note that this supersedes `fnServerData` from DataTables 1.9-.\r\n             *\r\n             *  @type string|object|function\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.ajax\r\n             *  @since 1.10.0\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax.\r\n             *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": \"data.json\"\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to change\r\n             *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": \"tableData\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\r\n             *   // from a plain array rather than an array in an object\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": \"\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Manipulate the data returned from the server - add a link to data\r\n             *   // (note this can, should, be done using `render` for the column - this\r\n             *   // is just a simple example of how the data can be manipulated).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": function ( json ) {\r\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\r\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\r\n\t\t *         }\r\n\t\t *         return json;\r\n\t\t *       }\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Add data to the request\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"data\": function ( d ) {\r\n\t\t *         return {\r\n\t\t *           \"extra_search\": $('#extra').val()\r\n\t\t *         };\r\n\t\t *       }\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Send request as POST\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"type\": \"POST\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get the data from localStorage (could interface with a form for\r\n             *   // adding, editing and removing rows).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": function (data, callback, settings) {\r\n\t\t *       callback(\r\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\r\n\t\t *       );\r\n\t\t *     }\r\n\t\t *   } );\r\n             */\r\n            \"ajax\": null,\r\n\r\n\r\n            /**\r\n             * This parameter allows you to readily specify the entries in the length drop\r\n             * down menu that DataTables shows when pagination is enabled. It can be\r\n             * either a 1D array of options which will be used for both the displayed\r\n             * option and the value, or a 2D array which will use the array in the first\r\n             * position as the value, and the array in the second position as the\r\n             * displayed options (useful for language strings such as 'All').\r\n             *\r\n             * Note that the `pageLength` property will be automatically set to the\r\n             * first value given in this array, unless `pageLength` is also provided.\r\n             *  @type array\r\n             *  @default [ 10, 25, 50, 100 ]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.lengthMenu\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aLengthMenu\": [ 10, 25, 50, 100 ],\r\n\r\n\r\n            /**\r\n             * The `columns` option in the initialisation parameter allows you to define\r\n             * details about the way individual columns behave. For a full list of\r\n             * column options that can be set, please see\r\n             * {@link DataTable.defaults.column}. Note that if you use `columns` to\r\n             * define your columns, you must have an entry in the array for every single\r\n             * column that you have in your table (these can be null if you don't which\r\n             * to specify any options).\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.column\r\n             */\r\n            \"aoColumns\": null,\r\n\r\n            /**\r\n             * Very similar to `columns`, `columnDefs` allows you to target a specific\r\n             * column, multiple columns, or all columns, using the `targets` property of\r\n             * each object in the array. This allows great flexibility when creating\r\n             * tables, as the `columnDefs` arrays can be of any length, targeting the\r\n             * columns you specifically want. `columnDefs` may use any of the column\r\n             * options available: {@link DataTable.defaults.column}, but it _must_\r\n             * have `targets` defined in each object in the array. Values in the `targets`\r\n             * array may be:\r\n             *   <ul>\r\n             *     <li>a string - class name will be matched on the TH for the column</li>\r\n             *     <li>0 or a positive integer - column index counting from the left</li>\r\n             *     <li>a negative integer - column index counting from the right</li>\r\n             *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\r\n             *   </ul>\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.columnDefs\r\n             */\r\n            \"aoColumnDefs\": null,\r\n\r\n\r\n            /**\r\n             * Basically the same as `search`, this parameter defines the individual column\r\n             * filtering state at initialisation time. The array must be of the same size\r\n             * as the number of columns, and each element be an object with the parameters\r\n             * `search` and `escapeRegex` (the latter is optional). 'null' is also\r\n             * accepted and the default will be used.\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.searchCols\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"searchCols\": [\r\n\t\t *          null,\r\n\t\t *          { \"search\": \"My filter\" },\r\n\t\t *          null,\r\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"aoSearchCols\": [],\r\n\r\n\r\n            /**\r\n             * An array of CSS classes that should be applied to displayed rows. This\r\n             * array may be of any length, and DataTables will apply each class\r\n             * sequentially, looping when required.\r\n             *  @type array\r\n             *  @default null <i>Will take the values determined by the `oClasses.stripe*`\r\n             *    options</i>\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.stripeClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"asStripeClasses\": null,\r\n\r\n\r\n            /**\r\n             * Enable or disable automatic column width calculation. This can be disabled\r\n             * as an optimisation (it takes some time to calculate the widths) if the\r\n             * tables widths are passed in using `columns`.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.autoWidth\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"autoWidth\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bAutoWidth\": true,\r\n\r\n\r\n            /**\r\n             * Deferred rendering can provide DataTables with a huge speed boost when you\r\n             * are using an Ajax or JS data source for the table. This option, when set to\r\n             * true, will cause DataTables to defer the creation of the table elements for\r\n             * each row until they are needed for a draw - saving a significant amount of\r\n             * time.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.deferRender\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajax\": \"sources/arrays.txt\",\r\n\t\t *        \"deferRender\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bDeferRender\": false,\r\n\r\n\r\n            /**\r\n             * Replace a DataTable which matches the given selector and replace it with\r\n             * one which has the properties of the new initialisation object passed. If no\r\n             * table matches the selector, then the new DataTable will be constructed as\r\n             * per normal.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.destroy\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"srollY\": \"200px\",\r\n\t\t *        \"paginate\": false\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      // Some time later....\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"filter\": false,\r\n\t\t *        \"destroy\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bDestroy\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\r\n             * that it allows the end user to input multiple words (space separated) and\r\n             * will match a row containing those words, even if not in the order that was\r\n             * specified (this allow matching across multiple columns). Note that if you\r\n             * wish to use filtering in DataTables this must remain 'true' - to remove the\r\n             * default filtering input box and retain filtering abilities, please use\r\n             * {@link DataTable.defaults.dom}.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.searching\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"searching\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bFilter\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the table information display. This shows information\r\n             * about the data that is currently visible on the page, including information\r\n             * about filtered data if that action is being performed.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.info\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"info\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bInfo\": true,\r\n\r\n\r\n            /**\r\n             * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\r\n             * slightly different and additional mark-up from what DataTables has\r\n             * traditionally used).\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.jQueryUI\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"jQueryUI\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bJQueryUI\": false,\r\n\r\n\r\n            /**\r\n             * Allows the end user to select the size of a formatted page from a select\r\n             * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.lengthChange\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"lengthChange\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bLengthChange\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable pagination.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.paging\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"paging\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bPaginate\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the display of a 'processing' indicator when the table is\r\n             * being processed (e.g. a sort). This is particularly useful for tables with\r\n             * large amounts of data where it can take a noticeable amount of time to sort\r\n             * the entries.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.processing\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"processing\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bProcessing\": false,\r\n\r\n\r\n            /**\r\n             * Retrieve the DataTables object for the given selector. Note that if the\r\n             * table has already been initialised, this parameter will cause DataTables\r\n             * to simply return the object that has already been set up - it will not take\r\n             * account of any changes you might have made to the initialisation object\r\n             * passed to DataTables (setting this parameter to true is an acknowledgement\r\n             * that you understand this). `destroy` can be used to reinitialise a table if\r\n             * you need.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.retrieve\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      initTable();\r\n\t\t *      tableActions();\r\n\t\t *    } );\r\n             *\r\n             *    function initTable ()\r\n             *    {\r\n\t\t *      return $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200px\",\r\n\t\t *        \"paginate\": false,\r\n\t\t *        \"retrieve\": true\r\n\t\t *      } );\r\n\t\t *    }\r\n             *\r\n             *    function tableActions ()\r\n             *    {\r\n\t\t *      var table = initTable();\r\n\t\t *      // perform API operations with oTable\r\n\t\t *    }\r\n             */\r\n            \"bRetrieve\": false,\r\n\r\n\r\n            /**\r\n             * When vertical (y) scrolling is enabled, DataTables will force the height of\r\n             * the table's viewport to the given height at all times (useful for layout).\r\n             * However, this can look odd when filtering data down to a small data set,\r\n             * and the footer is left \"floating\" further down. This parameter (when\r\n             * enabled) will cause DataTables to collapse the table's viewport down when\r\n             * the result set will fit within the given Y height.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollCollapse\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200\",\r\n\t\t *        \"scrollCollapse\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bScrollCollapse\": false,\r\n\r\n\r\n            /**\r\n             * Configure DataTables to use server-side processing. Note that the\r\n             * `ajax` parameter must also be given in order to give DataTables a\r\n             * source to obtain the required data for each draw.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverSide\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"xhr.php\"\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bServerSide\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable sorting of columns. Sorting of individual columns can be\r\n             * disabled by the `sortable` option for each column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.ordering\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ordering\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSort\": true,\r\n\r\n\r\n            /**\r\n             * Enable or display DataTables' ability to sort multiple columns at the\r\n             * same time (activated by shift-click by the user).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderMulti\r\n             *\r\n             *  @example\r\n             *    // Disable multiple column sorting ability\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderMulti\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortMulti\": true,\r\n\r\n\r\n            /**\r\n             * Allows control over whether DataTables should use the top (true) unique\r\n             * cell that is found for a single column, or the bottom (false - default).\r\n             * This is useful when using complex headers.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderCellsTop\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderCellsTop\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortCellsTop\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\r\n             * `sorting\\_3` to the columns which are currently being sorted on. This is\r\n             * presented as a feature switch as it can increase processing time (while\r\n             * classes are removed and added) so for large data sets you might want to\r\n             * turn this off.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.orderClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderClasses\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortClasses\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable state saving. When enabled HTML5 `localStorage` will be\r\n             * used to save table display information such as pagination information,\r\n             * display length, filtering and sorting. As such when the end user reloads\r\n             * the page the display display will match what thy had previously set up.\r\n             *\r\n             * Due to the use of `localStorage` the default state saving is not supported\r\n             * in IE6 or 7. If state saving is required in those browsers, use\r\n             * `stateSaveCallback` to provide a storage solution such as cookies.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.stateSave\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bStateSave\": false,\r\n\r\n\r\n            /**\r\n             * This function is called when a TR element is created (and all TD child\r\n             * elements have been inserted), or registered if using a DOM source, allowing\r\n             * manipulation of the TR element (adding classes etc).\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} dataIndex The index of this row in the internal aoData array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.createdRow\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\r\n\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t *          if ( data[4] == \"A\" )\r\n\t\t *          {\r\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnCreatedRow\": null,\r\n\r\n\r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify any aspect you want about the created DOM.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.drawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"drawCallback\": function( settings ) {\r\n\t\t *          alert( 'DataTables has redrawn the table' );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnDrawCallback\": null,\r\n\r\n\r\n            /**\r\n             * Identical to fnHeaderCallback() but for the table footer this function\r\n             * allows you to modify the table footer on every 'draw' event.\r\n             *  @type function\r\n             *  @param {node} foot \"TR\" element for the footer\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.footerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\r\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnFooterCallback\": null,\r\n\r\n\r\n            /**\r\n             * When rendering large numbers in the information element for the table\r\n             * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\r\n             * to have a comma separator for the 'thousands' units (e.g. 1 million is\r\n             * rendered as \"1,000,000\") to help readability for the end user. This\r\n             * function will override the default method DataTables uses.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {int} toFormat number to be formatted\r\n             *  @returns {string} formatted string for DataTables to show the number\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.formatNumber\r\n             *\r\n             *  @example\r\n             *    // Format a number using a single quote for the separator (note that\r\n             *    // this can also be done with the language.thousands option)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"formatNumber\": function ( toFormat ) {\r\n\t\t *          return toFormat.toString().replace(\r\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\r\n\t\t *          );\r\n\t\t *        };\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnFormatNumber\": function ( toFormat ) {\r\n                return toFormat.toString().replace(\r\n                    /\\B(?=(\\d{3})+(?!\\d))/g,\r\n                    this.oLanguage.sThousands\r\n                );\r\n            },\r\n\r\n\r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify the header row. This can be used to calculate and\r\n             * display useful information about the table.\r\n             *  @type function\r\n             *  @param {node} head \"TR\" element for the header\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.headerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\r\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnHeaderCallback\": null,\r\n\r\n\r\n            /**\r\n             * The information element can be used to convey information about the current\r\n             * state of the table. Although the internationalisation options presented by\r\n             * DataTables are quite capable of dealing with most customisations, there may\r\n             * be times where you wish to customise the string further. This callback\r\n             * allows you to do exactly that.\r\n             *  @type function\r\n             *  @param {object} oSettings DataTables settings object\r\n             *  @param {int} start Starting position in data for the draw\r\n             *  @param {int} end End position in data for the draw\r\n             *  @param {int} max Total number of rows in the table (regardless of\r\n             *    filtering)\r\n             *  @param {int} total Total number of rows in the data set, after filtering\r\n             *  @param {string} pre The string that DataTables has formatted using it's\r\n             *    own rules\r\n             *  @returns {string} The string to be displayed in the information element.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.infoCallback\r\n             *\r\n             *  @example\r\n             *    $('#example').dataTable( {\r\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\r\n\t\t *        return start +\" to \"+ end;\r\n\t\t *      }\r\n\t\t *    } );\r\n             */\r\n            \"fnInfoCallback\": null,\r\n\r\n\r\n            /**\r\n             * Called when the table has been initialised. Normally DataTables will\r\n             * initialise sequentially and there will be no need for this function,\r\n             * however, this does not hold true when using external language information\r\n             * since that is obtained using an async XHR call.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} json The JSON object request from the server - only\r\n             *    present if client-side Ajax sourced data is used\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.initComplete\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"initComplete\": function(settings, json) {\r\n\t\t *          alert( 'DataTables has finished its initialisation.' );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnInitComplete\": null,\r\n\r\n\r\n            /**\r\n             * Called at the very start of each table draw and can be used to cancel the\r\n             * draw by returning false, any other return (including undefined) results in\r\n             * the full draw occurring).\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @returns {boolean} False will cancel the draw, anything else (including no\r\n             *    return) will allow it to complete.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.preDrawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"preDrawCallback\": function( settings ) {\r\n\t\t *          if ( $('#test').val() == 1 ) {\r\n\t\t *            return false;\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnPreDrawCallback\": null,\r\n\r\n\r\n            /**\r\n             * This function allows you to 'post process' each row after it have been\r\n             * generated for each table draw, but before it is rendered on screen. This\r\n             * function might be used for setting the row class name etc.\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} displayIndex The display index for the current table draw\r\n             *  @param {int} displayIndexFull The index of the data in the full list of\r\n             *    rows (after filtering)\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.rowCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\r\n\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t *          if ( data[4] == \"A\" ) {\r\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnRowCallback\": null,\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * This parameter allows you to override the default function which obtains\r\n             * the data from the server so something more suitable for your application.\r\n             * For example you could use POST data, or pull information from a Gears or\r\n             * AIR database.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {string} source HTTP source to obtain the data from (`ajax`)\r\n             *  @param {array} data A key/value pair object containing the data to send\r\n             *    to the server\r\n             *  @param {function} callback to be called on completion of the data get\r\n             *    process that will draw the data on the page.\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverData\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerData\": null,\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             *  It is often useful to send extra data to the server when making an Ajax\r\n             * request - for example custom filtering information, and this callback\r\n             * function makes it trivial to send extra information to the server. The\r\n             * passed in parameter is the data set that has been constructed by\r\n             * DataTables, and you can add to this or modify it as you require.\r\n             *  @type function\r\n             *  @param {array} data Data array (array of objects which are name/value\r\n             *    pairs) that has been constructed by DataTables and will be sent to the\r\n             *    server. In the case of Ajax sourced data with server-side processing\r\n             *    this will be an empty array, for server-side processing there will be a\r\n             *    significant number of parameters!\r\n             *  @returns {undefined} Ensure that you modify the data array passed in,\r\n             *    as this is passed by reference.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverParams\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerParams\": null,\r\n\r\n\r\n            /**\r\n             * Load the table state. With this function you can define from where, and how, the\r\n             * state of a table is loaded. By default DataTables will load from `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @return {object} The DataTables state object to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadCallback\": function (settings) {\r\n\t\t *          var o;\r\n\t\t *\r\n\t\t *          // Send an Ajax request to the server to get the data. Note that\r\n\t\t *          // this is a synchronous request.\r\n\t\t *          $.ajax( {\r\n\t\t *            \"url\": \"/state_load\",\r\n\t\t *            \"async\": false,\r\n\t\t *            \"dataType\": \"json\",\r\n\t\t *            \"success\": function (json) {\r\n\t\t *              o = json;\r\n\t\t *            }\r\n\t\t *          } );\r\n\t\t *\r\n\t\t *          return o;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoadCallback\": function ( settings ) {\r\n                try {\r\n                    return JSON.parse(\r\n                        (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\r\n                            'DataTables_'+settings.sInstance+'_'+location.pathname\r\n                        )\r\n                    );\r\n                } catch (e) {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Callback which allows modification of the saved state prior to loading that state.\r\n             * This callback is called when the table is loading state from the stored data, but\r\n             * prior to the settings object being modified by the saved state. Note that for\r\n             * plug-in authors, you should use the `stateLoadParams` event to load parameters for\r\n             * a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that is to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never loaded\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Disallow state loading by returning false\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t *          return false;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoadParams\": null,\r\n\r\n\r\n            /**\r\n             * Callback that is called when the state has been loaded from the state saving method\r\n             * and the DataTables settings object has been modified as a result of the loaded state.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that was loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoaded\r\n             *\r\n             *  @example\r\n             *    // Show an alert with the filtering value that was saved\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoaded\": function (settings, data) {\r\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoaded\": null,\r\n\r\n\r\n            /**\r\n             * Save the table state. This function allows you to define where and how the state\r\n             * information for the table is stored By default DataTables will use `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateSaveCallback\": function (settings, data) {\r\n\t\t *          // Send an Ajax request to the server with the state object\r\n\t\t *          $.ajax( {\r\n\t\t *            \"url\": \"/state_save\",\r\n\t\t *            \"data\": data,\r\n\t\t *            \"dataType\": \"json\",\r\n\t\t *            \"method\": \"POST\"\r\n\t\t *            \"success\": function () {}\r\n\t\t *          } );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateSaveCallback\": function ( settings, data ) {\r\n                try {\r\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\r\n                        'DataTables_'+settings.sInstance+'_'+location.pathname,\r\n                        JSON.stringify( data )\r\n                    );\r\n                } catch (e) {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Callback which allows modification of the state to be saved. Called when the table\r\n             * has changed state a new state save is required. This method allows modification of\r\n             * the state saving object prior to actually doing the save, including addition or\r\n             * other state properties or modification. Note that for plug-in authors, you should\r\n             * use the `stateSaveParams` event to save parameters for a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never saved\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateSaveParams\": function (settings, data) {\r\n\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateSaveParams\": null,\r\n\r\n\r\n            /**\r\n             * Duration for which the saved state information is considered valid. After this period\r\n             * has elapsed the state will be returned to the default.\r\n             * Value is given in seconds.\r\n             *  @type int\r\n             *  @default 7200 <i>(2 hours)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.stateDuration\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iStateDuration\": 7200,\r\n\r\n\r\n            /**\r\n             * When enabled DataTables will not make a request to the server for the first\r\n             * page draw - rather it will use the data already on the page (no sorting etc\r\n             * will be applied to it), thus saving on an XHR at load time. `deferLoading`\r\n             * is used to indicate that deferred loading is required, but it is also used\r\n             * to tell DataTables how many records there are in the full table (allowing\r\n             * the information element and pagination to be displayed correctly). In the case\r\n             * where a filtering is applied to the table on initial load, this can be\r\n             * indicated by giving the parameter as an array, where the first element is\r\n             * the number of records available after filtering and the second element is the\r\n             * number of records without filtering (allowing the table information element\r\n             * to be shown correctly).\r\n             *  @type int | array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.deferLoading\r\n             *\r\n             *  @example\r\n             *    // 57 records available in the table, no filtering applied\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t *        \"deferLoading\": 57\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // 57 records after filtering, 100 without filtering (an initial filter applied)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t *        \"deferLoading\": [ 57, 100 ],\r\n\t\t *        \"search\": {\r\n\t\t *          \"search\": \"my_filter\"\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"iDeferLoading\": null,\r\n\r\n\r\n            /**\r\n             * Number of rows to display on a single page when using pagination. If\r\n             * feature enabled (`lengthChange`) then the end user will be able to override\r\n             * this to a custom setting using a pop-up menu.\r\n             *  @type int\r\n             *  @default 10\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pageLength\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"pageLength\": 50\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iDisplayLength\": 10,\r\n\r\n\r\n            /**\r\n             * Define the starting point for data display when using DataTables with\r\n             * pagination. Note that this parameter is the number of records, rather than\r\n             * the page number, so if you have 10 records per page and want to start on\r\n             * the third page, it should be \"20\".\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.displayStart\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"displayStart\": 20\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iDisplayStart\": 0,\r\n\r\n\r\n            /**\r\n             * By default DataTables allows keyboard navigation of the table (sorting, paging,\r\n             * and filtering) by adding a `tabindex` attribute to the required elements. This\r\n             * allows you to tab through the controls and press the enter key to activate them.\r\n             * The tabindex is default 0, meaning that the tab follows the flow of the document.\r\n             * You can overrule this using this parameter if you wish. Use a value of -1 to\r\n             * disable built-in keyboard navigation.\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.tabIndex\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"tabIndex\": 1\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"iTabIndex\": 0,\r\n\r\n\r\n            /**\r\n             * Classes that DataTables assigns to the various components and features\r\n             * that it adds to the HTML table. This allows classes to be configured\r\n             * during initialisation in addition to through the static\r\n             * {@link DataTable.ext.oStdClasses} object).\r\n             *  @namespace\r\n             *  @name DataTable.defaults.classes\r\n             */\r\n            \"oClasses\": {},\r\n\r\n\r\n            /**\r\n             * All strings that DataTables uses in the user interface that it creates\r\n             * are defined in this object, allowing you to modified them individually or\r\n             * completely replace them all as required.\r\n             *  @namespace\r\n             *  @name DataTable.defaults.language\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Strings that are used for WAI-ARIA labels and controls only (these are not\r\n                 * actually visible on the page, but will be read by screenreaders, and thus\r\n                 * must be internationalised as well).\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.aria\r\n                 */\r\n                \"oAria\": {\r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted ascending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortAscending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"aria\": {\r\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sSortAscending\": \": activate to sort column ascending\",\r\n\r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted descending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortDescending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"aria\": {\r\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sSortDescending\": \": activate to sort column descending\"\r\n                },\r\n\r\n                /**\r\n                 * Pagination string used by DataTables for the built-in pagination\r\n                 * control types.\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.paginate\r\n                 */\r\n                \"oPaginate\": {\r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the first page.\r\n                     *  @type string\r\n                     *  @default First\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.first\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"first\": \"First page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sFirst\": \"First\",\r\n\r\n\r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the last page.\r\n                     *  @type string\r\n                     *  @default Last\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.last\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"last\": \"Last page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sLast\": \"Last\",\r\n\r\n\r\n                    /**\r\n                     * Text to use for the 'next' pagination button (to take the user to the\r\n                     * next page).\r\n                     *  @type string\r\n                     *  @default Next\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.next\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"next\": \"Next page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sNext\": \"Next\",\r\n\r\n\r\n                    /**\r\n                     * Text to use for the 'previous' pagination button (to take the user to\r\n                     * the previous page).\r\n                     *  @type string\r\n                     *  @default Previous\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.previous\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"previous\": \"Previous page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sPrevious\": \"Previous\"\r\n                },\r\n\r\n                /**\r\n                 * This string is shown in preference to `zeroRecords` when the table is\r\n                 * empty of data (regardless of filtering). Note that this is an optional\r\n                 * parameter - if it is not given, the value of `zeroRecords` will be used\r\n                 * instead (either the default or given value).\r\n                 *  @type string\r\n                 *  @default No data available in table\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.emptyTable\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"emptyTable\": \"No data available in table\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sEmptyTable\": \"No data available in table\",\r\n\r\n\r\n                /**\r\n                 * This string gives information to the end user about the information\r\n                 * that is current on display on the page. The following tokens can be\r\n                 * used in the string and will be dynamically replaced as the table\r\n                 * display updates. This tokens can be placed anywhere in the string, or\r\n                 * removed as needed by the language requires:\r\n                 *\r\n                 * * `\\_START\\_` - Display index of the first record on the current page\r\n                 * * `\\_END\\_` - Display index of the last record on the current page\r\n                 * * `\\_TOTAL\\_` - Number of records in the table after filtering\r\n                 * * `\\_MAX\\_` - Number of records in the table without filtering\r\n                 * * `\\_PAGE\\_` - Current page number\r\n                 * * `\\_PAGES\\_` - Total number of pages of data in the table\r\n                 *\r\n                 *  @type string\r\n                 *  @default Showing _START_ to _END_ of _TOTAL_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.info\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\r\n\r\n\r\n                /**\r\n                 * Display information string for when the table is empty. Typically the\r\n                 * format of this string should match `info`.\r\n                 *  @type string\r\n                 *  @default Showing 0 to 0 of 0 entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoEmpty\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\r\n\r\n\r\n                /**\r\n                 * When a user filters the information in a table, this string is appended\r\n                 * to the information (`info`) to give an idea of how strong the filtering\r\n                 * is. The variable _MAX_ is dynamically updated.\r\n                 *  @type string\r\n                 *  @default (filtered from _MAX_ total entries)\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoFiltered\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\r\n\r\n\r\n                /**\r\n                 * If can be useful to append extra information to the info string at times,\r\n                 * and this variable does exactly that. This information will be appended to\r\n                 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\r\n                 * being used) at all times.\r\n                 *  @type string\r\n                 *  @default <i>Empty string</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoPostFix\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoPostFix\": \"\",\r\n\r\n\r\n                /**\r\n                 * This decimal place operator is a little different from the other\r\n                 * language options since DataTables doesn't output floating point\r\n                 * numbers, so it won't ever use this for display of a number. Rather,\r\n                 * what this parameter does is modify the sort methods of the table so\r\n                 * that numbers which are in a format which has a character other than\r\n                 * a period (`.`) as a decimal place will be sorted numerically.\r\n                 *\r\n                 * Note that numbers with different decimal places cannot be shown in\r\n                 * the same table and still be sortable, the table must be consistent.\r\n                 * However, multiple different tables on the page can use different\r\n                 * decimal place characters.\r\n                 *  @type string\r\n                 *  @default\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.decimal\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"decimal\": \",\"\r\n\t\t\t *          \"thousands\": \".\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sDecimal\": \"\",\r\n\r\n\r\n                /**\r\n                 * DataTables has a build in number formatter (`formatNumber`) which is\r\n                 * used to format large numbers that are used in the table information.\r\n                 * By default a comma is used, but this can be trivially changed to any\r\n                 * character you wish with this parameter.\r\n                 *  @type string\r\n                 *  @default ,\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.thousands\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"thousands\": \"'\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sThousands\": \",\",\r\n\r\n\r\n                /**\r\n                 * Detail the action that will be taken when the drop down menu for the\r\n                 * pagination length option is changed. The '_MENU_' variable is replaced\r\n                 * with a default select list of 10, 25, 50 and 100, and can be replaced\r\n                 * with a custom select box if required.\r\n                 *  @type string\r\n                 *  @default Show _MENU_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.lengthMenu\r\n                 *\r\n                 *  @example\r\n                 *    // Language change only\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Language and options change\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\r\n\t\t\t *            '<option value=\"10\">10</option>'+\r\n\t\t\t *            '<option value=\"20\">20</option>'+\r\n\t\t\t *            '<option value=\"30\">30</option>'+\r\n\t\t\t *            '<option value=\"40\">40</option>'+\r\n\t\t\t *            '<option value=\"50\">50</option>'+\r\n\t\t\t *            '<option value=\"-1\">All</option>'+\r\n\t\t\t *            '</select> records'\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sLengthMenu\": \"Show _MENU_ entries\",\r\n\r\n\r\n                /**\r\n                 * When using Ajax sourced data and during the first draw when DataTables is\r\n                 * gathering the data, this message is shown in an empty row in the table to\r\n                 * indicate to the end user the the data is being loaded. Note that this\r\n                 * parameter is not used when loading data by server-side processing, just\r\n                 * Ajax sourced data with client-side processing.\r\n                 *  @type string\r\n                 *  @default Loading...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.loadingRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sLoadingRecords\": \"Loading...\",\r\n\r\n\r\n                /**\r\n                 * Text which is displayed when the table is processing a user action\r\n                 * (usually a sort command or similar).\r\n                 *  @type string\r\n                 *  @default Processing...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.processing\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sProcessing\": \"Processing...\",\r\n\r\n\r\n                /**\r\n                 * Details the actions that will be taken when the user types into the\r\n                 * filtering input text box. The variable \"_INPUT_\", if used in the string,\r\n                 * is replaced with the HTML text box for the filtering input allowing\r\n                 * control over where it appears in the string. If \"_INPUT_\" is not given\r\n                 * then the input box is appended to the string automatically.\r\n                 *  @type string\r\n                 *  @default Search:\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.search\r\n                 *\r\n                 *  @example\r\n                 *    // Input text box will be appended at the end automatically\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"search\": \"Filter records:\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Specify where the filter should appear\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sSearch\": \"Search:\",\r\n\r\n\r\n                /**\r\n                 * All of the language information can be stored in a file on the\r\n                 * server-side, which DataTables will look up if this parameter is passed.\r\n                 * It must store the URL of the language file, which is in a JSON format,\r\n                 * and the object has the same properties as the oLanguage object in the\r\n                 * initialiser object (i.e. the above parameters). Please refer to one of\r\n                 * the example language files to see how this works in action.\r\n                 *  @type string\r\n                 *  @default <i>Empty string - i.e. disabled</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.url\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sUrl\": \"\",\r\n\r\n\r\n                /**\r\n                 * Text shown inside the table records when the is no information to be\r\n                 * displayed after filtering. `emptyTable` is shown when there is simply no\r\n                 * information in the table at all (regardless of filtering).\r\n                 *  @type string\r\n                 *  @default No matching records found\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.zeroRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"zeroRecords\": \"No records to display\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sZeroRecords\": \"No matching records found\"\r\n            },\r\n\r\n\r\n            /**\r\n             * This parameter allows you to have define the global filtering state at\r\n             * initialisation time. As an object the `search` parameter must be\r\n             * defined, but all other parameters are optional. When `regex` is true,\r\n             * the search string will be treated as a regular expression, when false\r\n             * (default) it will be treated as a straight string. When `smart`\r\n             * DataTables will use it's smart filtering methods (to word match at\r\n             * any point in the data), when false this will not be done.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.search\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"search\": {\"search\": \"Initial search\"}\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * By default DataTables will look for the property `data` (or `aaData` for\r\n             * compatibility with DataTables 1.9-) when obtaining data from an Ajax\r\n             * source or for server-side processing - this parameter allows that\r\n             * property to be changed. You can use Javascript dotted object notation to\r\n             * get a data source for multiple levels of nesting.\r\n             *  @type string\r\n             *  @default data\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxDataProp\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxDataProp\": \"data\",\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * You can instruct DataTables to load data from an external\r\n             * source using this parameter (use aData if you want to pass data in you\r\n             * already have). Simply provide a url a JSON object can be obtained from.\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxSource\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxSource\": null,\r\n\r\n\r\n            /**\r\n             * This initialisation variable allows you to specify exactly where in the\r\n             * DOM you want DataTables to inject the various controls it adds to the page\r\n             * (for example you might want the pagination controls at the top of the\r\n             * table). DIV elements (with or without a custom class) can also be added to\r\n             * aid styling. The follow syntax is used:\r\n             *   <ul>\r\n             *     <li>The following options are allowed:\r\n             *       <ul>\r\n             *         <li>'l' - Length changing</li>\r\n             *         <li>'f' - Filtering input</li>\r\n             *         <li>'t' - The table!</li>\r\n             *         <li>'i' - Information</li>\r\n             *         <li>'p' - Pagination</li>\r\n             *         <li>'r' - pRocessing</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following constants are allowed:\r\n             *       <ul>\r\n             *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\r\n             *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following syntax is expected:\r\n             *       <ul>\r\n             *         <li>'&lt;' and '&gt;' - div elements</li>\r\n             *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\r\n             *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>Examples:\r\n             *       <ul>\r\n             *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\r\n             *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *   </ul>\r\n             *  @type string\r\n             *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\r\n             *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.dom\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sDom\": \"lfrtip\",\r\n\r\n\r\n            /**\r\n             * DataTables features four different built-in options for the buttons to\r\n             * display for pagination control:\r\n             *\r\n             * * `simple` - 'Previous' and 'Next' buttons only\r\n             * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\r\n             * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\r\n             * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus\r\n             *   page numbers\r\n             *\r\n             * Further methods can be added using {@link DataTable.ext.oPagination}.\r\n             *  @type string\r\n             *  @default simple_numbers\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pagingType\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"pagingType\": \"full_numbers\"\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"sPaginationType\": \"simple_numbers\",\r\n\r\n\r\n            /**\r\n             * Enable horizontal scrolling. When a table is too wide to fit into a\r\n             * certain layout, or you have a large number of columns in the table, you\r\n             * can enable x-scrolling to show the table in a viewport, which can be\r\n             * scrolled. This property can be `true` which will allow the table to\r\n             * scroll horizontally when needed, or any CSS unit, or a number (in which\r\n             * case it will be treated as a pixel measurement). Setting as simply `true`\r\n             * is recommended.\r\n             *  @type boolean|string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollX\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollX\": true,\r\n\t\t *        \"scrollCollapse\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollX\": \"\",\r\n\r\n\r\n            /**\r\n             * This property can be used to force a DataTable to use more width than it\r\n             * might otherwise do when x-scrolling is enabled. For example if you have a\r\n             * table which requires to be well spaced, this parameter is useful for\r\n             * \"over-sizing\" the table, and thus forcing scrolling. This property can by\r\n             * any CSS unit, or a number (in which case it will be treated as a pixel\r\n             * measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollXInner\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollX\": \"100%\",\r\n\t\t *        \"scrollXInner\": \"110%\"\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollXInner\": \"\",\r\n\r\n\r\n            /**\r\n             * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\r\n             * to the given height, and enable scrolling for any data which overflows the\r\n             * current viewport. This can be used as an alternative to paging to display\r\n             * a lot of data in a small area (although paging and scrolling can both be\r\n             * enabled at the same time). This property can be any CSS unit, or a number\r\n             * (in which case it will be treated as a pixel measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollY\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200px\",\r\n\t\t *        \"paginate\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollY\": \"\",\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * Set the HTTP method that is used to make the Ajax call for server-side\r\n             * processing or Ajax sourced data.\r\n             *  @type string\r\n             *  @default GET\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverMethod\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sServerMethod\": \"GET\",\r\n\r\n\r\n            /**\r\n             * DataTables makes use of renderers when displaying HTML elements for\r\n             * a table. These renderers can be added or modified by plug-ins to\r\n             * generate suitable mark-up for a site. For example the Bootstrap\r\n             * integration plug-in for DataTables uses a paging button renderer to\r\n             * display pagination buttons in the mark-up required by Bootstrap.\r\n             *\r\n             * For further information about the renderers available see\r\n             * DataTable.ext.renderer\r\n             *  @type string|object\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.renderer\r\n             *\r\n             */\r\n            \"renderer\": null\r\n        };\r\n\r\n        _fnHungarianMap( DataTable.defaults );\r\n\r\n\r\n\r\n        /*\r\n         * Developer note - See note in model.defaults.js about the use of Hungarian\r\n         * notation and camel case.\r\n         */\r\n\r\n        /**\r\n         * Column options that can be given to DataTables at initialisation time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults.column = {\r\n            /**\r\n             * Define which column(s) an order will occur on for this column. This\r\n             * allows a column's ordering to take multiple columns into account when\r\n             * doing a sort or use the data from a different column. For example first\r\n             * name / last name columns make sense to do a multi-column sort over the\r\n             * two columns.\r\n             *  @type array|int\r\n             *  @default null <i>Takes the value of the column index automatically</i>\r\n             *\r\n             *  @name DataTable.defaults.column.orderData\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\r\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\r\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"orderData\": [ 0, 1 ] },\r\n\t\t *          { \"orderData\": [ 1, 0 ] },\r\n\t\t *          { \"orderData\": 2 },\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aDataSort\": null,\r\n            \"iDataSort\": -1,\r\n\r\n\r\n            /**\r\n             * You can control the default ordering direction, and even alter the\r\n             * behaviour of the sort handler (i.e. only allow ascending ordering etc)\r\n             * using this parameter.\r\n             *  @type array\r\n             *  @default [ 'asc', 'desc' ]\r\n             *\r\n             *  @name DataTable.defaults.column.orderSequence\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"asSorting\": [ 'asc', 'desc' ],\r\n\r\n\r\n            /**\r\n             * Enable or disable filtering on the data in this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.searchable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"searchable\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bSearchable\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable ordering on this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.orderable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"orderable\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortable\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the display of this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.visible\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"visible\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bVisible\": true,\r\n\r\n\r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} td The TD node that has been created\r\n             *  @param {*} cellData The Data for the cell\r\n             *  @param {array|object} rowData The data for the whole row\r\n             *  @param {int} row The row index for the aoData data store\r\n             *  @param {int} col The column index for aoColumns\r\n             *\r\n             *  @name DataTable.defaults.column.createdCell\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [3],\r\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\r\n\t\t *            if ( cellData == \"1.7\" ) {\r\n\t\t *              $(td).css('color', 'blue')\r\n\t\t *            }\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      });\r\n\t\t *    } );\r\n             */\r\n            \"fnCreatedCell\": null,\r\n\r\n\r\n            /**\r\n             * This parameter has been replaced by `data` in DataTables to ensure naming\r\n             * consistency. `dataProp` can still be used, as there is backwards\r\n             * compatibility in DataTables for this option, but it is strongly\r\n             * recommended that you use `data` in preference to `dataProp`.\r\n             *  @name DataTable.defaults.column.dataProp\r\n             */\r\n\r\n\r\n            /**\r\n             * This property can be used to read data from any data source property,\r\n             * including deeply nested objects / properties. `data` can be given in a\r\n             * number of different ways which effect its behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object. Note that\r\n             *      function notation is recommended for use in `render` rather than\r\n             *      `data` as it is much simpler to use as a renderer.\r\n             * * `null` - use the original data source for the row rather than plucking\r\n             *   data directly from it. This action has effects on two other\r\n             *   initialisation options:\r\n             *    * `defaultContent` - When null is given as the `data` option and\r\n             *      `defaultContent` is specified for the column, the value defined by\r\n             *      `defaultContent` will be used for the cell.\r\n             *    * `render` - When null is used for the `data` option and the `render`\r\n             *      option is specified for the column, the whole data source for the\r\n             *      row is used for the renderer.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * `{array|object}` The data source for the row\r\n             *      * `{string}` The type call data requested - this will be 'set' when\r\n             *        setting data or 'filter', 'display', 'type', 'sort' or undefined\r\n             *        when gathering data. Note that when `undefined` is given for the\r\n             *        type DataTables expects to get the raw data for the object back<\r\n             *      * `{*}` Data to set when the second parameter is 'set'.\r\n             *    * Return:\r\n             *      * The return value from the function is not required when 'set' is\r\n             *        the type of call, but otherwise the return is what will be used\r\n             *        for the data requested.\r\n             *\r\n             * Note that `data` is a getter and setter option. If you just require\r\n             * formatting of data for output, you will likely want to use `render` which\r\n             * is simply a getter and thus simpler to use.\r\n             *\r\n             * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\r\n             * name change reflects the flexibility of this property and is consistent\r\n             * with the naming of mRender. If 'mDataProp' is given, then it will still\r\n             * be used by DataTables, as it automatically maps the old name to the new\r\n             * if required.\r\n             *\r\n             *  @type string|int|function|null\r\n             *  @default null <i>Use automatically calculated column index</i>\r\n             *\r\n             *  @name DataTable.defaults.column.data\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Read table data from objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n\t\t *    //      \"engine\": {value},\r\n\t\t *    //      \"browser\": {value},\r\n\t\t *    //      \"platform\": {value},\r\n\t\t *    //      \"version\": {value},\r\n\t\t *    //      \"grade\": {value}\r\n\t\t *    //   }\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          { \"data\": \"platform\" },\r\n\t\t *          { \"data\": \"version\" },\r\n\t\t *          { \"data\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Read information from deeply nested objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n\t\t *    //      \"engine\": {value},\r\n\t\t *    //      \"browser\": {value},\r\n\t\t *    //      \"platform\": {\r\n\t\t *    //         \"inner\": {value}\r\n\t\t *    //      },\r\n\t\t *    //      \"details\": [\r\n\t\t *    //         {value}, {value}\r\n\t\t *    //      ]\r\n\t\t *    //   }\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          { \"data\": \"platform.inner\" },\r\n\t\t *          { \"data\": \"platform.details.0\" },\r\n\t\t *          { \"data\": \"platform.details.1\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `data` as a function to provide different information for\r\n             *    // sorting, filtering and display. In this case, currency (price)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": function ( source, type, val ) {\r\n\t\t *            if (type === 'set') {\r\n\t\t *              source.price = val;\r\n\t\t *              // Store the computed dislay and filter values for efficiency\r\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\r\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\r\n\t\t *              return;\r\n\t\t *            }\r\n\t\t *            else if (type === 'display') {\r\n\t\t *              return source.price_display;\r\n\t\t *            }\r\n\t\t *            else if (type === 'filter') {\r\n\t\t *              return source.price_filter;\r\n\t\t *            }\r\n\t\t *            // 'sort', 'type' and undefined all just use the integer\r\n\t\t *            return source.price;\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using default content\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null,\r\n\t\t *          \"defaultContent\": \"Click to edit\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using array notation - outputting a list from an array\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": \"name[, ]\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             */\r\n            \"mData\": null,\r\n\r\n\r\n            /**\r\n             * This property is the rendering partner to `data` and it is suggested that\r\n             * when you want to manipulate data for display (including filtering,\r\n             * sorting etc) without altering the underlying data for the table, use this\r\n             * property. `render` can be considered to be the the read only companion to\r\n             * `data` which is read / write (then as such more complex). Like `data`\r\n             * this option can be given in a number of different ways to effect its\r\n             * behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object.\r\n             * * `object` - use different data for the different data types requested by\r\n             *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\r\n             *   of the object is the data type the property refers to and the value can\r\n             *   defined using an integer, string or function using the same rules as\r\n             *   `render` normally does. Note that an `_` option _must_ be specified.\r\n             *   This is the default value to use if you haven't specified a value for\r\n             *   the data type requested by DataTables.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * {array|object} The data source for the row (based on `data`)\r\n             *      * {string} The type call data requested - this will be 'filter',\r\n             *        'display', 'type' or 'sort'.\r\n             *      * {array|object} The full data source for the row (not based on\r\n             *        `data`)\r\n             *    * Return:\r\n             *      * The return value from the function is what will be used for the\r\n             *        data requested.\r\n             *\r\n             *  @type string|int|function|object|null\r\n             *  @default null Use the data source value.\r\n             *\r\n             *  @name DataTable.defaults.column.render\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Create a comma separated list from an array of objects\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          {\r\n\t\t *            \"data\": \"platform\",\r\n\t\t *            \"render\": \"[, ].name\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Execute a function to obtain data\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t *          \"render\": \"browserName()\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // As an object, extracting different data for the different types\r\n             *    // This would be used with a data source such as:\r\n             *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\r\n             *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\r\n             *    // (which has both forms) is used for filtering for if a user inputs either format, while\r\n             *    // the formatted phone number is the one that is shown in the table.\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t *          \"render\": {\r\n\t\t *            \"_\": \"phone\",\r\n\t\t *            \"filter\": \"phone_filter\",\r\n\t\t *            \"display\": \"phone_display\"\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Use as a function to create a link from the data source\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": \"download_link\",\r\n\t\t *          \"render\": function ( data, type, full ) {\r\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"mRender\": null,\r\n\r\n\r\n            /**\r\n             * Change the cell type created for the column - either TD cells or TH cells. This\r\n             * can be useful as TH cells have semantic meaning in the table body, allowing them\r\n             * to act as a header for a row (you may wish to add scope='row' to the TH elements).\r\n             *  @type string\r\n             *  @default td\r\n             *\r\n             *  @name DataTable.defaults.column.cellType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Make the first column use TH cells\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"cellType\": \"th\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sCellType\": \"td\",\r\n\r\n\r\n            /**\r\n             * Class to give to each cell in this column.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.class\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"class\": \"my_class\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sClass\": \"\",\r\n\r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             * Generally you shouldn't need this!\r\n             *  @type string\r\n             *  @default <i>Empty string<i>\r\n             *\r\n             *  @name DataTable.defaults.column.contentPadding\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          {\r\n\t\t *            \"contentPadding\": \"mmm\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sContentPadding\": \"\",\r\n\r\n\r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because `data`\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.column.defaultContent\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          {\r\n\t\t *            \"data\": null,\r\n\t\t *            \"defaultContent\": \"Edit\",\r\n\t\t *            \"targets\": [ -1 ]\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          {\r\n\t\t *            \"data\": null,\r\n\t\t *            \"defaultContent\": \"Edit\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sDefaultContent\": null,\r\n\r\n\r\n            /**\r\n             * This parameter is only used in DataTables' server-side processing. It can\r\n             * be exceptionally useful to know what columns are being displayed on the\r\n             * client side, and to map these to database fields. When defined, the names\r\n             * also allow DataTables to reorder information from the server if it comes\r\n             * back in an unexpected order (i.e. if you switch your columns around on the\r\n             * client-side, your server-side code does not also need updating).\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.name\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\r\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\r\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\r\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\r\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"name\": \"engine\" },\r\n\t\t *          { \"name\": \"browser\" },\r\n\t\t *          { \"name\": \"platform\" },\r\n\t\t *          { \"name\": \"version\" },\r\n\t\t *          { \"name\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sName\": \"\",\r\n\r\n\r\n            /**\r\n             * Defines a data source type for the ordering which can be used to read\r\n             * real-time information from the table (updating the internally cached\r\n             * version) prior to ordering. This allows ordering to occur on user\r\n             * editable elements such as form inputs.\r\n             *  @type string\r\n             *  @default std\r\n             *\r\n             *  @name DataTable.defaults.column.orderDataType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\r\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\r\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\r\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          { \"orderDataType\": \"dom-text\" },\r\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\r\n\t\t *          { \"orderDataType\": \"dom-select\" },\r\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sSortDataType\": \"std\",\r\n\r\n\r\n            /**\r\n             * The title of this column.\r\n             *  @type string\r\n             *  @default null <i>Derived from the 'TH' value for this column in the\r\n             *    original HTML table.</i>\r\n             *\r\n             *  @name DataTable.defaults.column.title\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"My column title\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sTitle\": null,\r\n\r\n\r\n            /**\r\n             * The type allows you to specify how the data for this column will be\r\n             * ordered. Four types (string, numeric, date and html (which will strip\r\n             * HTML tags before ordering)) are currently available. Note that only date\r\n             * formats understood by Javascript's Date() object will be accepted as type\r\n             * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\r\n             * 'numeric', 'date' or 'html' (by default). Further types can be adding\r\n             * through plug-ins.\r\n             *  @type string\r\n             *  @default null <i>Auto-detected from raw data</i>\r\n             *\r\n             *  @name DataTable.defaults.column.type\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"type\": \"html\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sType\": null,\r\n\r\n\r\n            /**\r\n             * Defining the width of the column, this parameter may take any CSS value\r\n             * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\r\n             * been given a specific width through this interface ensuring that the table\r\n             * remains readable.\r\n             *  @type string\r\n             *  @default null <i>Automatic</i>\r\n             *\r\n             *  @name DataTable.defaults.column.width\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"width\": \"20%\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sWidth\": null\r\n        };\r\n\r\n        _fnHungarianMap( DataTable.defaults.column );\r\n\r\n\r\n\r\n        /**\r\n         * DataTables settings object - this holds all the information needed for a\r\n         * given table, including configuration, data and current application of the\r\n         * table options. DataTables does not have a single instance for each DataTable\r\n         * with the settings attached to that instance, but rather instances of the\r\n         * DataTable \"class\" are created on-the-fly as needed (typically by a\r\n         * $().dataTable() call) and the settings object is then applied to that\r\n         * instance.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults} but this\r\n         * one is the internal data store for DataTables's cache of columns. It should\r\n         * NOT be manipulated outside of DataTables. Any configuration should be done\r\n         * through the initialisation options.\r\n         *  @namespace\r\n         *  @todo Really should attach the settings object to individual instances so we\r\n         *    don't need to create new instances on each $().dataTable() call (if the\r\n         *    table already exists). It would also save passing oSettings around and\r\n         *    into every single function. However, this is a very significant\r\n         *    architecture change for DataTables and will almost certainly break\r\n         *    backwards compatibility with older installations. This is something that\r\n         *    will be done in 2.0.\r\n         */\r\n        DataTable.models.oSettings = {\r\n            /**\r\n             * Primary features of DataTables and their enablement state.\r\n             *  @namespace\r\n             */\r\n            \"oFeatures\": {\r\n\r\n                /**\r\n                 * Flag to say if DataTables should automatically try to calculate the\r\n                 * optimum table and columns widths (true) or not (false).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bAutoWidth\": null,\r\n\r\n                /**\r\n                 * Delay the creation of TR and TD elements until they are actually\r\n                 * needed by a driven page draw. This can give a significant speed\r\n                 * increase for Ajax source and Javascript source data, but makes no\r\n                 * difference at all fro DOM and server-side processing tables.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bDeferRender\": null,\r\n\r\n                /**\r\n                 * Enable filtering on the table or not. Note that if this is disabled\r\n                 * then there is no filtering at all on the table, including fnFilter.\r\n                 * To just remove the filtering input use sDom and remove the 'f' option.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bFilter\": null,\r\n\r\n                /**\r\n                 * Table information element (the 'Showing x of y records' div) enable\r\n                 * flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bInfo\": null,\r\n\r\n                /**\r\n                 * Present a user control allowing the end user to change the page size\r\n                 * when pagination is enabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bLengthChange\": null,\r\n\r\n                /**\r\n                 * Pagination enabled or not. Note that if this is disabled then length\r\n                 * changing must also be disabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bPaginate\": null,\r\n\r\n                /**\r\n                 * Processing indicator enable flag whenever DataTables is enacting a\r\n                 * user request - typically an Ajax request for server-side processing.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bProcessing\": null,\r\n\r\n                /**\r\n                 * Server-side processing enabled flag - when enabled DataTables will\r\n                 * get all data from the server for every draw - there is no filtering,\r\n                 * sorting or paging done on the client-side.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bServerSide\": null,\r\n\r\n                /**\r\n                 * Sorting enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSort\": null,\r\n\r\n                /**\r\n                 * Multi-column sorting\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortMulti\": null,\r\n\r\n                /**\r\n                 * Apply a class to the columns which are being sorted to provide a\r\n                 * visual highlight or not. This can slow things down when enabled since\r\n                 * there is a lot of DOM interaction.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortClasses\": null,\r\n\r\n                /**\r\n                 * State saving enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bStateSave\": null\r\n            },\r\n\r\n\r\n            /**\r\n             * Scrolling settings for a table.\r\n             *  @namespace\r\n             */\r\n            \"oScroll\": {\r\n                /**\r\n                 * When the table is shorter in height than sScrollY, collapse the\r\n                 * table container down to the height of the table (when true).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bCollapse\": null,\r\n\r\n                /**\r\n                 * Width of the scrollbar for the web-browser's platform. Calculated\r\n                 * during table initialisation.\r\n                 *  @type int\r\n                 *  @default 0\r\n                 */\r\n                \"iBarWidth\": 0,\r\n\r\n                /**\r\n                 * Viewport width for horizontal scrolling. Horizontal scrolling is\r\n                 * disabled if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sX\": null,\r\n\r\n                /**\r\n                 * Width to expand the table to when using x-scrolling. Typically you\r\n                 * should not need to use this.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 *  @deprecated\r\n                 */\r\n                \"sXInner\": null,\r\n\r\n                /**\r\n                 * Viewport height for vertical scrolling. Vertical scrolling is disabled\r\n                 * if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sY\": null\r\n            },\r\n\r\n            /**\r\n             * Language information for the table.\r\n             *  @namespace\r\n             *  @extends DataTable.defaults.oLanguage\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Information callback function. See\r\n                 * {@link DataTable.defaults.fnInfoCallback}\r\n                 *  @type function\r\n                 *  @default null\r\n                 */\r\n                \"fnInfoCallback\": null\r\n            },\r\n\r\n            /**\r\n             * Browser support parameters\r\n             *  @namespace\r\n             */\r\n            \"oBrowser\": {\r\n                /**\r\n                 * Indicate if the browser incorrectly calculates width:100% inside a\r\n                 * scrolling element (IE6/7)\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollOversize\": false,\r\n\r\n                /**\r\n                 * Determine if the vertical scrollbar is on the right or left of the\r\n                 * scrolling container - needed for rtl language layout, although not\r\n                 * all browsers move the scrollbar (Safari).\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollbarLeft\": false\r\n            },\r\n\r\n\r\n            \"ajax\": null,\r\n\r\n\r\n            /**\r\n             * Array referencing the nodes which are used for the features. The\r\n             * parameters of this object match what is allowed by sDom - i.e.\r\n             *   <ul>\r\n             *     <li>'l' - Length changing</li>\r\n             *     <li>'f' - Filtering input</li>\r\n             *     <li>'t' - The table!</li>\r\n             *     <li>'i' - Information</li>\r\n             *     <li>'p' - Pagination</li>\r\n             *     <li>'r' - pRocessing</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aanFeatures\": [],\r\n\r\n            /**\r\n             * Store data information - see {@link DataTable.models.oRow} for detailed\r\n             * information.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoData\": [],\r\n\r\n            /**\r\n             * Array of indexes which are in the current display (after filtering etc)\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplay\": [],\r\n\r\n            /**\r\n             * Array of indexes for display - no filtering\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplayMaster\": [],\r\n\r\n            /**\r\n             * Store information about each column that is in use\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoColumns\": [],\r\n\r\n            /**\r\n             * Store information about the table's header\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeader\": [],\r\n\r\n            /**\r\n             * Store information about the table's footer\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooter\": [],\r\n\r\n            /**\r\n             * Store the applied global search information in case we want to force a\r\n             * research or compare the old search to a new one.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             */\r\n            \"oPreviousSearch\": {},\r\n\r\n            /**\r\n             * Store the applied search for each column - see\r\n             * {@link DataTable.models.oSearch} for the format that is used for the\r\n             * filtering information for each column.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreSearchCols\": [],\r\n\r\n            /**\r\n             * Sorting that is applied to the table. Note that the inner arrays are\r\n             * used in the following manner:\r\n             * <ul>\r\n             *   <li>Index 0 - column number</li>\r\n             *   <li>Index 1 - current sorting direction</li>\r\n             * </ul>\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @todo These inner arrays should really be objects\r\n             */\r\n            \"aaSorting\": null,\r\n\r\n            /**\r\n             * Sorting that is always applied to the table (i.e. prefixed in front of\r\n             * aaSorting).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aaSortingFixed\": [],\r\n\r\n            /**\r\n             * Classes to use for the striping of a table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asStripeClasses\": null,\r\n\r\n            /**\r\n             * If restoring a table - we should restore its striping classes as well\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asDestroyStripes\": [],\r\n\r\n            /**\r\n             * If restoring a table - we should restore its width\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"sDestroyWidth\": 0,\r\n\r\n            /**\r\n             * Callback functions array for every time a row is inserted (i.e. on a draw).\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for the header on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeaderCallback\": [],\r\n\r\n            /**\r\n             * Callback function for the footer on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooterCallback\": [],\r\n\r\n            /**\r\n             * Array of callback functions for draw callback functions\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDrawCallback\": [],\r\n\r\n            /**\r\n             * Array of callback functions for row created function\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCreatedCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for just before the table is redrawn. A return of\r\n             * false will be used to cancel the draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreDrawCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for when the table has been initialised.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoInitComplete\": [],\r\n\r\n\r\n            /**\r\n             * Callbacks for modifying the settings to be stored for state saving, prior to\r\n             * saving state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSaveParams\": [],\r\n\r\n            /**\r\n             * Callbacks for modifying the settings that have been stored for state saving\r\n             * prior to using the stored values to restore the state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoadParams\": [],\r\n\r\n            /**\r\n             * Callbacks for operating on the settings object once the saved state has been\r\n             * loaded\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoaded\": [],\r\n\r\n            /**\r\n             * Cache the table ID for quick access\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             */\r\n            \"sTableId\": \"\",\r\n\r\n            /**\r\n             * The TABLE node for the main table\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTable\": null,\r\n\r\n            /**\r\n             * Permanent ref to the thead element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTHead\": null,\r\n\r\n            /**\r\n             * Permanent ref to the tfoot element - if it exists\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTFoot\": null,\r\n\r\n            /**\r\n             * Permanent ref to the tbody element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTBody\": null,\r\n\r\n            /**\r\n             * Cache the wrapper node (contains all DataTables controlled elements)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTableWrapper\": null,\r\n\r\n            /**\r\n             * Indicate if when using server-side processing the loading of data\r\n             * should be deferred until the second draw.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDeferLoading\": false,\r\n\r\n            /**\r\n             * Indicate if all required information has been read in\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bInitialised\": false,\r\n\r\n            /**\r\n             * Information about open rows. Each object in the array has the parameters\r\n             * 'nTr' and 'nParent'\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoOpenRows\": [],\r\n\r\n            /**\r\n             * Dictate the positioning of DataTables' control elements - see\r\n             * {@link DataTable.model.oInit.sDom}.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDom\": null,\r\n\r\n            /**\r\n             * Which type of pagination should be used.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default two_button\r\n             */\r\n            \"sPaginationType\": \"two_button\",\r\n\r\n            /**\r\n             * The state duration (for `stateSave`) in seconds.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iStateDuration\": 0,\r\n\r\n            /**\r\n             * Array of callback functions for state saving. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the JSON string to save that has been thus far created. Returns\r\n             *       a JSON string to be inserted into a json object\r\n             *       (i.e. '\"param\": [ 0, 1, 2]')</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSave\": [],\r\n\r\n            /**\r\n             * Array of callback functions for state loading. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the object stored. May return false to cancel state loading</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoad\": [],\r\n\r\n            /**\r\n             * State that was loaded. Useful for back reference\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oLoadedState\": null,\r\n\r\n            /**\r\n             * Source url for AJAX data for the table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sAjaxSource\": null,\r\n\r\n            /**\r\n             * Property from a given object from which to read the table data from. This\r\n             * can be an empty string (when not server-side processing), in which case\r\n             * it is  assumed an an array is given directly.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sAjaxDataProp\": null,\r\n\r\n            /**\r\n             * Note if draw should be blocked while getting data\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bAjaxDataGet\": true,\r\n\r\n            /**\r\n             * The last jQuery XHR object that was used for server-side data gathering.\r\n             * This can be used for working with the XHR information in one of the\r\n             * callbacks\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"jqXHR\": null,\r\n\r\n            /**\r\n             * JSON returned from the server in the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"json\": undefined,\r\n\r\n            /**\r\n             * Data submitted as part of the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"oAjaxData\": undefined,\r\n\r\n            /**\r\n             * Function to get the server-side data.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnServerData\": null,\r\n\r\n            /**\r\n             * Functions which are called prior to sending an Ajax request so extra\r\n             * parameters can easily be sent to the server\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoServerParams\": [],\r\n\r\n            /**\r\n             * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\r\n             * required).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sServerMethod\": null,\r\n\r\n            /**\r\n             * Format numbers for display.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnFormatNumber\": null,\r\n\r\n            /**\r\n             * List of options that can be used for the user selectable length menu.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLengthMenu\": null,\r\n\r\n            /**\r\n             * Counter for the draws that the table does. Also used as a tracker for\r\n             * server-side processing\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iDraw\": 0,\r\n\r\n            /**\r\n             * Indicate if a redraw is being done - useful for Ajax\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDrawing\": false,\r\n\r\n            /**\r\n             * Draw index (iDraw) of the last error when parsing the returned data\r\n             *  @type int\r\n             *  @default -1\r\n             */\r\n            \"iDrawError\": -1,\r\n\r\n            /**\r\n             * Paging display length\r\n             *  @type int\r\n             *  @default 10\r\n             */\r\n            \"_iDisplayLength\": 10,\r\n\r\n            /**\r\n             * Paging start point - aiDisplay index\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"_iDisplayStart\": 0,\r\n\r\n            /**\r\n             * Server-side processing - number of records in the result set\r\n             * (i.e. before filtering), Use fnRecordsTotal rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type int\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsTotal\": 0,\r\n\r\n            /**\r\n             * Server-side processing - number of records in the current display set\r\n             * (i.e. after filtering). Use fnRecordsDisplay rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type boolean\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsDisplay\": 0,\r\n\r\n            /**\r\n             * Flag to indicate if jQuery UI marking and classes should be used.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bJUI\": null,\r\n\r\n            /**\r\n             * The classes to use for the table\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oClasses\": {},\r\n\r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if filtering has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bFiltered\": false,\r\n\r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if sorting has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bSorted\": false,\r\n\r\n            /**\r\n             * Indicate that if multiple rows are in the header and there is more than\r\n             * one unique cell per column, if the top one (true) or bottom one (false)\r\n             * should be used for sorting / title by DataTables.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bSortCellsTop\": null,\r\n\r\n            /**\r\n             * Initialisation object that is used for the table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInit\": null,\r\n\r\n            /**\r\n             * Destroy callback functions - for plug-ins to attach themselves to the\r\n             * destroy so they can clean up markup and events.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDestroyCallback\": [],\r\n\r\n\r\n            /**\r\n             * Get the number of records in the current record set, before filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsTotal\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                    this._iRecordsTotal * 1 :\r\n                    this.aiDisplayMaster.length;\r\n            },\r\n\r\n            /**\r\n             * Get the number of records in the current record set, after filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsDisplay\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                    this._iRecordsDisplay * 1 :\r\n                    this.aiDisplay.length;\r\n            },\r\n\r\n            /**\r\n             * Get the display end point - aiDisplay index\r\n             *  @type function\r\n             */\r\n            \"fnDisplayEnd\": function ()\r\n            {\r\n                var\r\n                    len      = this._iDisplayLength,\r\n                    start    = this._iDisplayStart,\r\n                    calc     = start + len,\r\n                    records  = this.aiDisplay.length,\r\n                    features = this.oFeatures,\r\n                    paginate = features.bPaginate;\r\n\r\n                if ( features.bServerSide ) {\r\n                    return paginate === false || len === -1 ?\r\n                        start + records :\r\n                        Math.min( start+len, this._iRecordsDisplay );\r\n                }\r\n                else {\r\n                    return ! paginate || calc>records || len===-1 ?\r\n                        records :\r\n                        calc;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * The DataTables object for this table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInstance\": null,\r\n\r\n            /**\r\n             * Unique identifier for each instance of the DataTables object. If there\r\n             * is an ID on the table node, then it takes that value, otherwise an\r\n             * incrementing internal counter is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sInstance\": null,\r\n\r\n            /**\r\n             * tabindex attribute value that is added to DataTables control elements, allowing\r\n             * keyboard navigation of the table and its controls.\r\n             */\r\n            \"iTabIndex\": 0,\r\n\r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollHead\": null,\r\n\r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollFoot\": null,\r\n\r\n            /**\r\n             * Last applied sort\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLastSort\": [],\r\n\r\n            /**\r\n             * Stored plug-in instances\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oPlugins\": {}\r\n        };\r\n\r\n        /**\r\n         * Extension object for DataTables that is used to provide all extension\r\n         * options.\r\n         *\r\n         * Note that the `DataTable.ext` object is available through\r\n         * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\r\n         * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\r\n         *  @namespace\r\n         *  @extends DataTable.models.ext\r\n         */\r\n\r\n\r\n        /**\r\n         * DataTables extensions\r\n         *\r\n         * This namespace acts as a collection area for plug-ins that can be used to\r\n         * extend DataTables capabilities. Indeed many of the build in methods\r\n         * use this method to provide their own capabilities (sorting methods for\r\n         * example).\r\n         *\r\n         * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\r\n         * reasons\r\n         *\r\n         *  @namespace\r\n         */\r\n        DataTable.ext = _ext = {\r\n            /**\r\n             * Element class names\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            classes: {},\r\n\r\n\r\n            /**\r\n             * Error reporting.\r\n             *\r\n             * How should DataTables report an error. Can take the value 'alert' or\r\n             * 'throw'\r\n             *\r\n             *  @type string\r\n             *  @default alert\r\n             */\r\n            errMode: \"alert\",\r\n\r\n\r\n            /**\r\n             * Feature plug-ins.\r\n             *\r\n             * This is an array of objects which describe the feature plug-ins that are\r\n             * available to DataTables. These feature plug-ins are then available for\r\n             * use through the `dom` initialisation option.\r\n             *\r\n             * Each feature plug-in is described by an object which must have the\r\n             * following properties:\r\n             *\r\n             * * `fnInit` - function that is used to initialise the plug-in,\r\n             * * `cFeature` - a character so the feature can be enabled by the `dom`\r\n             *   instillation option. This is case sensitive.\r\n             *\r\n             * The `fnInit` function has the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             *\r\n             * And the following return is expected:\r\n             *\r\n             * * {node|null} The element which contains your feature. Note that the\r\n             *   return may also be void if your plug-in does not require to inject any\r\n             *   DOM elements into DataTables control (`dom`) - for example this might\r\n             *   be useful when developing a plug-in which allows table control via\r\n             *   keyboard entry\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    $.fn.dataTable.ext.features.push( {\r\n\t\t *      \"fnInit\": function( oSettings ) {\r\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\r\n\t\t *      },\r\n\t\t *      \"cFeature\": \"T\"\r\n\t\t *    } );\r\n             */\r\n            feature: [],\r\n\r\n\r\n            /**\r\n             * Row searching.\r\n             *\r\n             * This method of searching is complimentary to the default type based\r\n             * searching, and a lot more comprehensive as it allows you complete control\r\n             * over the searching logic. Each element in this array is a function\r\n             * (parameters described below) that is called for every row in the table,\r\n             * and your logic decides if it should be included in the searching data set\r\n             * or not.\r\n             *\r\n             * Searching functions have the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{array|object}` Data for the row to be processed (same as the\r\n             *    original format that was passed in as the data source, or an array\r\n             *    from a DOM data source\r\n             * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\r\n             *    can be useful to retrieve the `TR` element if you need DOM interaction.\r\n             *\r\n             * And the following return is expected:\r\n             *\r\n             * * {boolean} Include the row in the searched result set (true) or not\r\n             *   (false)\r\n             *\r\n             * Note that as with the main search ability in DataTables, technically this\r\n             * is \"filtering\", since it is subtractive. However, for consistency in\r\n             * naming we call it searching here.\r\n             *\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @example\r\n             *    // The following example shows custom search being applied to the\r\n             *    // fourth column (i.e. the data[3] index) based on two input values\r\n             *    // from the end-user, matching the data in a certain range.\r\n             *    $.fn.dataTable.ext.search.push(\r\n             *      function( settings, data, dataIndex ) {\r\n\t\t *        var min = document.getElementById('min').value * 1;\r\n\t\t *        var max = document.getElementById('max').value * 1;\r\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\r\n\t\t *\r\n\t\t *        if ( min == \"\" && max == \"\" ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min == \"\" && version < max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min < version && \"\" == max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min < version && version < max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        return false;\r\n\t\t *      }\r\n             *    );\r\n             */\r\n            search: [],\r\n\r\n\r\n            /**\r\n             * Internal functions, exposed for used in plug-ins.\r\n             *\r\n             * Please note that you should not need to use the internal methods for\r\n             * anything other than a plug-in (and even then, try to avoid if possible).\r\n             * The internal function may change between releases.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            internal: {},\r\n\r\n\r\n            /**\r\n             * Legacy configuration options. Enable and disable legacy options that\r\n             * are available in DataTables.\r\n             *\r\n             *  @type object\r\n             */\r\n            legacy: {\r\n                /**\r\n                 * Enable / disable DataTables 1.9 compatible server-side processing\r\n                 * requests\r\n                 *\r\n                 *  @type boolean\r\n                 *  @default null\r\n                 */\r\n                ajax: null\r\n            },\r\n\r\n\r\n            /**\r\n             * Pagination plug-in methods.\r\n             *\r\n             * Each entry in this object is a function and defines which buttons should\r\n             * be shown by the pagination rendering method that is used for the table:\r\n             * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\r\n             * buttons are displayed in the document, while the functions here tell it\r\n             * what buttons to display. This is done by returning an array of button\r\n             * descriptions (what each button will do).\r\n             *\r\n             * Pagination types (the four built in options and any additional plug-in\r\n             * options defined here) can be used through the `paginationType`\r\n             * initialisation parameter.\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{int} page` The current page index\r\n             * 2. `{int} pages` The number of pages in the table\r\n             *\r\n             * Each function is expected to return an array where each element of the\r\n             * array can be one of:\r\n             *\r\n             * * `first` - Jump to first page when activated\r\n             * * `last` - Jump to last page when activated\r\n             * * `previous` - Show previous page when activated\r\n             * * `next` - Show next page when activated\r\n             * * `{int}` - Show page of the index given\r\n             * * `{array}` - A nested array containing the above elements to add a\r\n             *   containing 'DIV' element (might be useful for styling).\r\n             *\r\n             * Note that DataTables v1.9- used this object slightly differently whereby\r\n             * an object with two functions would be defined for each plug-in. That\r\n             * ability is still supported by DataTables 1.10+ to provide backwards\r\n             * compatibility, but this option of use is now decremented and no longer\r\n             * documented in DataTables 1.10+.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             *\r\n             *  @example\r\n             *    // Show previous, next and current page buttons only\r\n             *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\r\n\t\t *      return [ 'previous', page, 'next' ];\r\n\t\t *    };\r\n             */\r\n            pager: {},\r\n\r\n\r\n            renderer: {\r\n                pageButton: {},\r\n                header: {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Ordering plug-ins - custom data source\r\n             *\r\n             * The extension options for ordering of data available here is complimentary\r\n             * to the default type based ordering that DataTables typically uses. It\r\n             * allows much greater control over the the data that is being used to\r\n             * order a column, but is necessarily therefore more complex.\r\n             *\r\n             * This type of ordering is useful if you want to do ordering based on data\r\n             * live from the DOM (for example the contents of an 'input' element) rather\r\n             * than just the static string that DataTables knows of.\r\n             *\r\n             * The way these plug-ins work is that you create an array of the values you\r\n             * wish to be ordering for the column in question and then return that\r\n             * array. The data in the array much be in the index order of the rows in\r\n             * the table (not the currently ordering order!). Which order data gathering\r\n             * function is run here depends on the `dt-init columns.orderDataType`\r\n             * parameter that is used for the column (if any).\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{int}` Target column index\r\n             *\r\n             * Each function is expected to return an array:\r\n             *\r\n             * * `{array}` Data for the column to be ordering upon\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    // Ordering using `input` node values\r\n             *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\r\n             *    {\r\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\r\n\t\t *        return $('input', td).val();\r\n\t\t *      } );\r\n\t\t *    }\r\n             */\r\n            order: {},\r\n\r\n\r\n            /**\r\n             * Type based plug-ins.\r\n             *\r\n             * Each column in DataTables has a type assigned to it, either by automatic\r\n             * detection or by direct assignment using the `type` option for the column.\r\n             * The type of a column will effect how it is ordering and search (plug-ins\r\n             * can also make use of the column type if required).\r\n             *\r\n             * @namespace\r\n             */\r\n            type: {\r\n                /**\r\n                 * Type detection functions.\r\n                 *\r\n                 * The functions defined in this object are used to automatically detect\r\n                 * a column's type, making initialisation of DataTables super easy, even\r\n                 * when complex data is in the table.\r\n                 *\r\n                 * The functions defined take two parameters:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be analysed\r\n                 *  2. `{settings}` DataTables settings object. This can be used to\r\n                 *     perform context specific type detection - for example detection\r\n                 *     based on language settings such as using a comma for a decimal\r\n                 *     place. Generally speaking the options from the settings will not\r\n                 *     be required\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Data type detected, or null if unknown (and thus\r\n                 *   pass it on to the other type detection functions.\r\n                 *\r\n                 *  @type array\r\n                 *\r\n                 *  @example\r\n                 *    // Currency type detection plug-in:\r\n                 *    $.fn.dataTable.ext.type.detect.push(\r\n                 *      function ( data, settings ) {\r\n\t\t\t *        // Check the numeric part\r\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {\r\n\t\t\t *          return null;\r\n\t\t\t *        }\r\n\t\t\t *\r\n\t\t\t *        // Check prefixed by currency\r\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\r\n\t\t\t *          return 'currency';\r\n\t\t\t *        }\r\n\t\t\t *        return null;\r\n\t\t\t *      }\r\n                 *    );\r\n                 */\r\n                detect: [],\r\n\r\n\r\n                /**\r\n                 * Type based search formatting.\r\n                 *\r\n                 * The type based searching functions can be used to pre-format the\r\n                 * data to be search on. For example, it can be used to strip HTML\r\n                 * tags or to de-format telephone numbers for numeric only searching.\r\n                 *\r\n                 * Note that is a search is not defined for a column of a given type,\r\n                 * no search formatting will be performed.\r\n                 *\r\n                 * Pre-processing of searching data plug-ins - When you assign the sType\r\n                 * for a column (or have it automatically detected for you by DataTables\r\n                 * or a type detection plug-in), you will typically be using this for\r\n                 * custom sorting, but it can also be used to provide custom searching\r\n                 * by allowing you to pre-processing the data and returning the data in\r\n                 * the format that should be searched upon. This is done by adding\r\n                 * functions this object with a parameter name which matches the sType\r\n                 * for that target column. This is the corollary of <i>afnSortData</i>\r\n                 * for searching data.\r\n                 *\r\n                 * The functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for searching\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Formatted string that will be used for the searching.\r\n                 *\r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\r\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\r\n\t\t\t *    }\r\n                 */\r\n                search: {},\r\n\r\n\r\n                /**\r\n                 * Type based ordering.\r\n                 *\r\n                 * The column type tells DataTables what ordering to apply to the table\r\n                 * when a column is sorted upon. The order for each type that is defined,\r\n                 * is defined by the functions available in this object.\r\n                 *\r\n                 * Each ordering option can be described by three properties added to\r\n                 * this object:\r\n                 *\r\n                 * * `{type}-pre` - Pre-formatting function\r\n                 * * `{type}-asc` - Ascending order function\r\n                 * * `{type}-desc` - Descending order function\r\n                 *\r\n                 * All three can be used together, only `{type}-pre` or only\r\n                 * `{type}-asc` and `{type}-desc` together. It is generally recommended\r\n                 * that only `{type}-pre` is used, as this provides the optimal\r\n                 * implementation in terms of speed, although the others are provided\r\n                 * for compatibility with existing Javascript sort functions.\r\n                 *\r\n                 * `{type}-pre`: Functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for ordering\r\n                 *\r\n                 * And return:\r\n                 *\r\n                 * * `{*}` Data to be sorted upon\r\n                 *\r\n                 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\r\n                 * functions, taking two parameters:\r\n                 *\r\n                 *  1. `{*}` Data to compare to the second parameter\r\n                 *  2. `{*}` Data to compare to the first parameter\r\n                 *\r\n                 * And returning:\r\n                 *\r\n                 * * `{*}` Ordering match: <0 if first parameter should be sorted lower\r\n                 *   than the second parameter, ===0 if the two parameters are equal and\r\n                 *   >0 if the first parameter should be sorted height than the second\r\n                 *   parameter.\r\n                 *\r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    // Numeric ordering of formatted numbers with a pre-formatter\r\n                 *    $.extend( $.fn.dataTable.ext.type.order, {\r\n\t\t\t *      \"string-pre\": function(x) {\r\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\r\n\t\t\t *        return parseFloat( a );\r\n\t\t\t *      }\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Case-sensitive string ordering, with no pre-formatting method\r\n                 *    $.extend( $.fn.dataTable.ext.order, {\r\n\t\t\t *      \"string-case-asc\": function(x,y) {\r\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n\t\t\t *      },\r\n\t\t\t *      \"string-case-desc\": function(x,y) {\r\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n\t\t\t *      }\r\n\t\t\t *    } );\r\n                 */\r\n                order: {}\r\n            },\r\n\r\n            /**\r\n             * Unique DataTables instance counter\r\n             *\r\n             * @type int\r\n             * @private\r\n             */\r\n            _unique: 0,\r\n\r\n\r\n            //\r\n            // Depreciated\r\n            // The following properties are retained for backwards compatiblity only.\r\n            // The should not be used in new projects and will be removed in a future\r\n            // version\r\n            //\r\n\r\n            /**\r\n             * Version check function.\r\n             *  @type function\r\n             *  @depreciated Since 1.10\r\n             */\r\n            fnVersionCheck: DataTable.fnVersionCheck,\r\n\r\n\r\n            /**\r\n             * Index for what 'this' index API functions should use\r\n             *  @type int\r\n             *  @deprecated Since v1.10\r\n             */\r\n            iApiIndex: 0,\r\n\r\n\r\n            /**\r\n             * jQuery UI class container\r\n             *  @type object\r\n             *  @deprecated Since v1.10\r\n             */\r\n            oJUIClasses: {},\r\n\r\n\r\n            /**\r\n             * Software version\r\n             *  @type string\r\n             *  @deprecated Since v1.10\r\n             */\r\n            sVersion: DataTable.version\r\n        };\r\n\r\n\r\n        //\r\n        // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\r\n        //\r\n        $.extend( _ext, {\r\n            afnFiltering: _ext.search,\r\n            aTypes:       _ext.type.detect,\r\n            ofnSearch:    _ext.type.search,\r\n            oSort:        _ext.type.order,\r\n            afnSortData:  _ext.order,\r\n            aoFeatures:   _ext.feature,\r\n            oApi:         _ext.internal,\r\n            oStdClasses:  _ext.classes,\r\n            oPagination:  _ext.pager\r\n        } );\r\n\r\n\r\n        $.extend( DataTable.ext.classes, {\r\n            \"sTable\": \"dataTable\",\r\n            \"sNoFooter\": \"no-footer\",\r\n\r\n            /* Paging buttons */\r\n            \"sPageButton\": \"paginate_button\",\r\n            \"sPageButtonActive\": \"current\",\r\n            \"sPageButtonDisabled\": \"disabled\",\r\n\r\n            /* Striping classes */\r\n            \"sStripeOdd\": \"odd\",\r\n            \"sStripeEven\": \"even\",\r\n\r\n            /* Empty row */\r\n            \"sRowEmpty\": \"dataTables_empty\",\r\n\r\n            /* Features */\r\n            \"sWrapper\": \"dataTables_wrapper\",\r\n            \"sFilter\": \"dataTables_filter\",\r\n            \"sInfo\": \"dataTables_info\",\r\n            \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\r\n            \"sLength\": \"dataTables_length\",\r\n            \"sProcessing\": \"dataTables_processing\",\r\n\r\n            /* Sorting */\r\n            \"sSortAsc\": \"sorting_asc\",\r\n            \"sSortDesc\": \"sorting_desc\",\r\n            \"sSortable\": \"sorting\", /* Sortable in both directions */\r\n            \"sSortableAsc\": \"sorting_asc_disabled\",\r\n            \"sSortableDesc\": \"sorting_desc_disabled\",\r\n            \"sSortableNone\": \"sorting_disabled\",\r\n            \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\r\n\r\n            /* Filtering */\r\n            \"sFilterInput\": \"\",\r\n\r\n            /* Page length */\r\n            \"sLengthSelect\": \"\",\r\n\r\n            /* Scrolling */\r\n            \"sScrollWrapper\": \"dataTables_scroll\",\r\n            \"sScrollHead\": \"dataTables_scrollHead\",\r\n            \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\r\n            \"sScrollBody\": \"dataTables_scrollBody\",\r\n            \"sScrollFoot\": \"dataTables_scrollFoot\",\r\n            \"sScrollFootInner\": \"dataTables_scrollFootInner\",\r\n\r\n            /* Misc */\r\n            \"sHeaderTH\": \"\",\r\n            \"sFooterTH\": \"\",\r\n\r\n            // Deprecated\r\n            \"sSortJUIAsc\": \"\",\r\n            \"sSortJUIDesc\": \"\",\r\n            \"sSortJUI\": \"\",\r\n            \"sSortJUIAscAllowed\": \"\",\r\n            \"sSortJUIDescAllowed\": \"\",\r\n            \"sSortJUIWrapper\": \"\",\r\n            \"sSortIcon\": \"\",\r\n            \"sJUIHeader\": \"\",\r\n            \"sJUIFooter\": \"\"\r\n        } );\r\n\r\n\r\n        (function() {\r\n\r\n            // Reused strings for better compression. Closure compiler appears to have a\r\n            // weird edge case where it is trying to expand strings rather than use the\r\n            // variable version. This results in about 200 bytes being added, for very\r\n            // little preference benefit since it this run on script load only.\r\n            var _empty = '';\r\n            _empty = '';\r\n\r\n            var _stateDefault = _empty + 'ui-state-default';\r\n            var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\r\n            var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\r\n\r\n            $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\r\n                /* Full numbers paging buttons */\r\n                \"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\r\n                \"sPageButtonActive\":   \"ui-state-disabled\",\r\n                \"sPageButtonDisabled\": \"ui-state-disabled\",\r\n\r\n                /* Features */\r\n                \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\r\n                    \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\r\n\r\n                /* Sorting */\r\n                \"sSortAsc\":            _stateDefault+\" sorting_asc\",\r\n                \"sSortDesc\":           _stateDefault+\" sorting_desc\",\r\n                \"sSortable\":           _stateDefault+\" sorting\",\r\n                \"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\r\n                \"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\r\n                \"sSortableNone\":       _stateDefault+\" sorting_disabled\",\r\n                \"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\r\n                \"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\r\n                \"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\r\n                \"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\r\n                \"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\r\n                \"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\r\n                \"sSortIcon\":           \"DataTables_sort_icon\",\r\n\r\n                /* Scrolling */\r\n                \"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\r\n                \"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\r\n\r\n                /* Misc */\r\n                \"sHeaderTH\":  _stateDefault,\r\n                \"sFooterTH\":  _stateDefault,\r\n                \"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\r\n                \"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\r\n            } );\r\n\r\n        }());\r\n\r\n\r\n\r\n        var extPagination = DataTable.ext.pager;\r\n\r\n        function _numbers ( page, pages ) {\r\n            var\r\n                numbers = [],\r\n                buttons = extPagination.numbers_length,\r\n                half = Math.floor( buttons / 2 ),\r\n                i = 1;\r\n\r\n            if ( pages <= buttons ) {\r\n                numbers = _range( 0, pages );\r\n            }\r\n            else if ( page <= half ) {\r\n                numbers = _range( 0, buttons-2 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n            }\r\n            else if ( page >= pages - 1 - half ) {\r\n                numbers = _range( pages-(buttons-2), pages );\r\n                numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n            else {\r\n                numbers = _range( page-1, page+2 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n                numbers.splice( 0, 0, 'ellipsis' );\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n\r\n            numbers.DT_el = 'span';\r\n            return numbers;\r\n        }\r\n\r\n\r\n        $.extend( extPagination, {\r\n            simple: function ( page, pages ) {\r\n                return [ 'previous', 'next' ];\r\n            },\r\n\r\n            full: function ( page, pages ) {\r\n                return [  'first', 'previous', 'next', 'last' ];\r\n            },\r\n\r\n            simple_numbers: function ( page, pages ) {\r\n                return [ 'previous', _numbers(page, pages), 'next' ];\r\n            },\r\n\r\n            full_numbers: function ( page, pages ) {\r\n                return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\r\n            },\r\n\r\n            // For testing and plug-ins to use\r\n            _numbers: _numbers,\r\n            numbers_length: 7\r\n        } );\r\n\r\n\r\n        $.extend( true, DataTable.ext.renderer, {\r\n            pageButton: {\r\n                _: function ( settings, host, idx, buttons, page, pages ) {\r\n                    var classes = settings.oClasses;\r\n                    var lang = settings.oLanguage.oPaginate;\r\n                    var btnDisplay, btnClass, counter=0;\r\n\r\n                    var attach = function( container, buttons ) {\r\n                        var i, ien, node, button;\r\n                        var clickHandler = function ( e ) {\r\n                            _fnPageChange( settings, e.data.action, true );\r\n                        };\r\n\r\n                        for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n                            button = buttons[i];\r\n\r\n                            if ( $.isArray( button ) ) {\r\n                                var inner = $( '<'+(button.DT_el || 'div')+'/>' )\r\n                                    .appendTo( container );\r\n                                attach( inner, button );\r\n                            }\r\n                            else {\r\n                                btnDisplay = '';\r\n                                btnClass = '';\r\n\r\n                                switch ( button ) {\r\n                                    case 'ellipsis':\r\n                                        container.append('<span>&hellip;</span>');\r\n                                        break;\r\n\r\n                                    case 'first':\r\n                                        btnDisplay = lang.sFirst;\r\n                                        btnClass = button + (page > 0 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'previous':\r\n                                        btnDisplay = lang.sPrevious;\r\n                                        btnClass = button + (page > 0 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'next':\r\n                                        btnDisplay = lang.sNext;\r\n                                        btnClass = button + (page < pages-1 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'last':\r\n                                        btnDisplay = lang.sLast;\r\n                                        btnClass = button + (page < pages-1 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    default:\r\n                                        btnDisplay = button + 1;\r\n                                        btnClass = page === button ?\r\n                                            classes.sPageButtonActive : '';\r\n                                        break;\r\n                                }\r\n\r\n                                if ( btnDisplay ) {\r\n                                    node = $('<a>', {\r\n                                        'class': classes.sPageButton+' '+btnClass,\r\n                                        'aria-controls': settings.sTableId,\r\n                                        'data-dt-idx': counter,\r\n                                        'tabindex': settings.iTabIndex,\r\n                                        'id': idx === 0 && typeof button === 'string' ?\r\n                                            settings.sTableId +'_'+ button :\r\n                                            null\r\n                                    } )\r\n                                        .html( btnDisplay )\r\n                                        .appendTo( container );\r\n\r\n                                    _fnBindAction(\r\n                                        node, {action: button}, clickHandler\r\n                                    );\r\n\r\n                                    counter++;\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    // Because this approach is destroying and recreating the paging\r\n                    // elements, focus is lost on the select button which is bad for\r\n                    // accessibility. So we want to restore focus once the draw has\r\n                    // completed\r\n                    var activeEl = $(document.activeElement).data('dt-idx');\r\n\r\n                    attach( $(host).empty(), buttons );\r\n\r\n                    if ( activeEl !== null ) {\r\n                        $(host).find( '[data-dt-idx='+activeEl+']' ).focus();\r\n                    }\r\n                }\r\n            }\r\n        } );\r\n\r\n\r\n\r\n        var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\r\n            if ( !d || d === '-' ) {\r\n                return -Infinity;\r\n            }\r\n\r\n            // If a decimal place other than `.` is used, it needs to be given to the\r\n            // function so we can detect it and replace with a `.` which is the only\r\n            // decimal place Javascript recognises - it is not locale aware.\r\n            if ( decimalPlace ) {\r\n                d = _numToDecimal( d, decimalPlace );\r\n            }\r\n\r\n            if ( d.replace ) {\r\n                if ( re1 ) {\r\n                    d = d.replace( re1, '' );\r\n                }\r\n\r\n                if ( re2 ) {\r\n                    d = d.replace( re2, '' );\r\n                }\r\n            }\r\n\r\n            return d * 1;\r\n        };\r\n\r\n\r\n        // Add the numeric 'deformatting' functions for sorting. This is done in a\r\n        // function to provide an easy ability for the language options to add\r\n        // additional methods if a non-period decimal place is used.\r\n        function _addNumericSort ( decimalPlace ) {\r\n            $.each(\r\n                {\r\n                    // Plain numbers\r\n                    \"num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace );\r\n                    },\r\n\r\n                    // Formatted numbers\r\n                    \"num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_formatted_numeric );\r\n                    },\r\n\r\n                    // HTML numeric\r\n                    \"html-num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html );\r\n                    },\r\n\r\n                    // HTML numeric, formatted\r\n                    \"html-num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\r\n                    }\r\n                },\r\n                function ( key, fn ) {\r\n                    _ext.type.order[ key+decimalPlace+'-pre' ] = fn;\r\n                }\r\n            );\r\n        }\r\n\r\n\r\n        // Default sort methods\r\n        $.extend( _ext.type.order, {\r\n            // Dates\r\n            \"date-pre\": function ( d ) {\r\n                return Date.parse( d ) || 0;\r\n            },\r\n\r\n            // html\r\n            \"html-pre\": function ( a ) {\r\n                return ! a ?\r\n                    '' :\r\n                    a.replace ?\r\n                        a.replace( /<.*?>/g, \"\" ).toLowerCase() :\r\n                        a+'';\r\n            },\r\n\r\n            // string\r\n            \"string-pre\": function ( a ) {\r\n                return typeof a === 'string' ?\r\n                    a.toLowerCase() :\r\n                    ! a || ! a.toString ?\r\n                        '' :\r\n                        a.toString();\r\n            },\r\n\r\n            // string-asc and -desc are retained only for compatibility with the old\r\n            // sort methods\r\n            \"string-asc\": function ( x, y ) {\r\n                return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n            },\r\n\r\n            \"string-desc\": function ( x, y ) {\r\n                return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n            }\r\n        } );\r\n\r\n\r\n        // Numeric sorting types - order doesn't matter here\r\n        _addNumericSort( '' );\r\n\r\n\r\n        // Built in type detection. See model.ext.aTypes for information about\r\n        // what is required from this methods.\r\n        $.extend( DataTable.ext.type.detect, [\r\n            // Plain numbers - first since V8 detects some plain numbers as dates\r\n            // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal ) ? 'num'+decimal : null;\r\n            },\r\n\r\n            // Dates (only those recognised by the browser's Date.parse)\r\n            function ( d, settings )\r\n            {\r\n                // V8 will remove any unknown characters at the start of the expression,\r\n                // leading to false matches such as `$245.12` being a valid date. See\r\n                // forum thread 18941 for detail.\r\n                if ( d && ! _re_date_start.test(d) ) {\r\n                    return null;\r\n                }\r\n                var parsed = Date.parse(d);\r\n                return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\r\n            },\r\n\r\n            // Formatted numbers\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\r\n            },\r\n\r\n            // HTML numeric\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\r\n            },\r\n\r\n            // HTML numeric, formatted\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\r\n            },\r\n\r\n            // HTML (this is strict checking - there must be html)\r\n            function ( d, settings )\r\n            {\r\n                return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\r\n                    'html' : null;\r\n            }\r\n        ] );\r\n\r\n\r\n\r\n        // Filter formatting functions. See model.ext.ofnSearch for information about\r\n        // what is required from these methods.\r\n\r\n\r\n        $.extend( DataTable.ext.type.search, {\r\n            html: function ( data ) {\r\n                return _empty(data) ?\r\n                    '' :\r\n                    typeof data === 'string' ?\r\n                        data\r\n                            .replace( _re_new_lines, \" \" )\r\n                            .replace( _re_html, \"\" ) :\r\n                        '';\r\n            },\r\n\r\n            string: function ( data ) {\r\n                return _empty(data) ?\r\n                    '' :\r\n                    typeof data === 'string' ?\r\n                        data.replace( _re_new_lines, \" \" ) :\r\n                        data;\r\n            }\r\n        } );\r\n\r\n\r\n\r\n        $.extend( true, DataTable.ext.renderer, {\r\n            header: {\r\n                _: function ( settings, cell, column, classes ) {\r\n                    // No additional mark-up required\r\n                    // Attach a sort listener to update on sort - note that using the\r\n                    // `DT` namespace will allow the event to be removed automatically\r\n                    // on destroy, while the `dt` namespaced event is the one we are\r\n                    // listening for\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, settings, sorting, columns ) {\r\n                        var colIdx = column.idx;\r\n\r\n                        cell\r\n                            .removeClass(\r\n                                column.sSortingClass +' '+\r\n                                    classes.sSortAsc +' '+\r\n                                    classes.sSortDesc\r\n                            )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                            );\r\n                    } );\r\n                },\r\n\r\n                jqueryui: function ( settings, cell, column, classes ) {\r\n                    var colIdx = column.idx;\r\n\r\n                    $('<div/>')\r\n                        .addClass( classes.sSortJUIWrapper )\r\n                        .append( cell.contents() )\r\n                        .append( $('<span/>')\r\n                            .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\r\n                        )\r\n                        .appendTo( cell );\r\n\r\n                    // Attach a sort listener to update on sort\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, settings, sorting, columns ) {\r\n                        cell\r\n                            .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                            );\r\n\r\n                        cell\r\n                            .find( 'span.'+classes.sSortIcon )\r\n                            .removeClass(\r\n                                classes.sSortJUIAsc +\" \"+\r\n                                    classes.sSortJUIDesc +\" \"+\r\n                                    classes.sSortJUI +\" \"+\r\n                                    classes.sSortJUIAscAllowed +\" \"+\r\n                                    classes.sSortJUIDescAllowed\r\n                            )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortJUIDesc :\r\n                                column.sSortingClassJUI\r\n                            );\r\n                    } );\r\n                }\r\n            }\r\n        } );\r\n\r\n        /*\r\n         * Public helper functions. These aren't used internally by DataTables, or\r\n         * called by any of the options passed into DataTables, but they can be used\r\n         * externally by developers working with DataTables. They are helper functions\r\n         * to make working with DataTables a little bit easier.\r\n         */\r\n\r\n        /**\r\n         * Helpers for `columns.render`.\r\n         *\r\n         * The options defined here can be used with the `columns.render` initialisation\r\n         * option to provide a display renderer. The following functions are defined:\r\n         *\r\n         * * `number` - Will format numeric data (defined by `columns.data`) for\r\n         *   display, retaining the original unformatted data for sorting and filtering.\r\n         *   It takes 4 parameters:\r\n         *   * `string` - Thousands grouping separator\r\n         *   * `string` - Decimal point indicator\r\n         *   * `integer` - Number of decimal points to show\r\n         *   * `string` (optional) - Prefix.\r\n         *\r\n         * @example\r\n         *   // Column definition using the number renderer\r\n         *   {\r\n\t *     data: \"salary\",\r\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\r\n\t *   }\r\n         *\r\n         * @namespace\r\n         */\r\n        DataTable.render = {\r\n            number: function ( thousands, decimal, precision, prefix ) {\r\n                return {\r\n                    display: function ( d ) {\r\n                        d = parseFloat( d );\r\n                        var intPart = parseInt( d, 10 );\r\n                        var floatPart = precision ?\r\n                            (decimal+(d - intPart).toFixed( precision )).substring( 2 ):\r\n                            '';\r\n\r\n                        return (prefix||'') +\r\n                            intPart.toString().replace(\r\n                                /\\B(?=(\\d{3})+(?!\\d))/g, thousands\r\n                            ) +\r\n                            floatPart;\r\n                    }\r\n                };\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         * This is really a good bit rubbish this method of exposing the internal methods\r\n         * publicly... - To be fixed in 2.0 using methods on the prototype\r\n         */\r\n\r\n\r\n        /**\r\n         * Create a wrapper function for exporting an internal functions to an external API.\r\n         *  @param {string} fn API function name\r\n         *  @returns {function} wrapped function\r\n         *  @memberof DataTable#internal\r\n         */\r\n        function _fnExternApiFunc (fn)\r\n        {\r\n            return function() {\r\n                var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\r\n                    Array.prototype.slice.call(arguments)\r\n                );\r\n                return DataTable.ext.internal[fn].apply( this, args );\r\n            };\r\n        }\r\n\r\n\r\n        /**\r\n         * Reference to internal functions for use by plug-in developers. Note that\r\n         * these methods are references to internal functions and are considered to be\r\n         * private. If you use these methods, be aware that they are liable to change\r\n         * between versions.\r\n         *  @namespace\r\n         */\r\n        $.extend( DataTable.ext.internal, {\r\n            _fnExternApiFunc: _fnExternApiFunc,\r\n            _fnBuildAjax: _fnBuildAjax,\r\n            _fnAjaxUpdate: _fnAjaxUpdate,\r\n            _fnAjaxParameters: _fnAjaxParameters,\r\n            _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\r\n            _fnAjaxDataSrc: _fnAjaxDataSrc,\r\n            _fnAddColumn: _fnAddColumn,\r\n            _fnColumnOptions: _fnColumnOptions,\r\n            _fnAdjustColumnSizing: _fnAdjustColumnSizing,\r\n            _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\r\n            _fnColumnIndexToVisible: _fnColumnIndexToVisible,\r\n            _fnVisbleColumns: _fnVisbleColumns,\r\n            _fnGetColumns: _fnGetColumns,\r\n            _fnColumnTypes: _fnColumnTypes,\r\n            _fnApplyColumnDefs: _fnApplyColumnDefs,\r\n            _fnHungarianMap: _fnHungarianMap,\r\n            _fnCamelToHungarian: _fnCamelToHungarian,\r\n            _fnLanguageCompat: _fnLanguageCompat,\r\n            _fnBrowserDetect: _fnBrowserDetect,\r\n            _fnAddData: _fnAddData,\r\n            _fnAddTr: _fnAddTr,\r\n            _fnNodeToDataIndex: _fnNodeToDataIndex,\r\n            _fnNodeToColumnIndex: _fnNodeToColumnIndex,\r\n            _fnGetCellData: _fnGetCellData,\r\n            _fnSetCellData: _fnSetCellData,\r\n            _fnSplitObjNotation: _fnSplitObjNotation,\r\n            _fnGetObjectDataFn: _fnGetObjectDataFn,\r\n            _fnSetObjectDataFn: _fnSetObjectDataFn,\r\n            _fnGetDataMaster: _fnGetDataMaster,\r\n            _fnClearTable: _fnClearTable,\r\n            _fnDeleteIndex: _fnDeleteIndex,\r\n            _fnInvalidateRow: _fnInvalidateRow,\r\n            _fnGetRowElements: _fnGetRowElements,\r\n            _fnCreateTr: _fnCreateTr,\r\n            _fnBuildHead: _fnBuildHead,\r\n            _fnDrawHead: _fnDrawHead,\r\n            _fnDraw: _fnDraw,\r\n            _fnReDraw: _fnReDraw,\r\n            _fnAddOptionsHtml: _fnAddOptionsHtml,\r\n            _fnDetectHeader: _fnDetectHeader,\r\n            _fnGetUniqueThs: _fnGetUniqueThs,\r\n            _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\r\n            _fnFilterComplete: _fnFilterComplete,\r\n            _fnFilterCustom: _fnFilterCustom,\r\n            _fnFilterColumn: _fnFilterColumn,\r\n            _fnFilter: _fnFilter,\r\n            _fnFilterCreateSearch: _fnFilterCreateSearch,\r\n            _fnEscapeRegex: _fnEscapeRegex,\r\n            _fnFilterData: _fnFilterData,\r\n            _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\r\n            _fnUpdateInfo: _fnUpdateInfo,\r\n            _fnInfoMacros: _fnInfoMacros,\r\n            _fnInitialise: _fnInitialise,\r\n            _fnInitComplete: _fnInitComplete,\r\n            _fnLengthChange: _fnLengthChange,\r\n            _fnFeatureHtmlLength: _fnFeatureHtmlLength,\r\n            _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\r\n            _fnPageChange: _fnPageChange,\r\n            _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\r\n            _fnProcessingDisplay: _fnProcessingDisplay,\r\n            _fnFeatureHtmlTable: _fnFeatureHtmlTable,\r\n            _fnScrollDraw: _fnScrollDraw,\r\n            _fnApplyToChildren: _fnApplyToChildren,\r\n            _fnCalculateColumnWidths: _fnCalculateColumnWidths,\r\n            _fnThrottle: _fnThrottle,\r\n            _fnConvertToWidth: _fnConvertToWidth,\r\n            _fnScrollingWidthAdjust: _fnScrollingWidthAdjust,\r\n            _fnGetWidestNode: _fnGetWidestNode,\r\n            _fnGetMaxLenString: _fnGetMaxLenString,\r\n            _fnStringToCss: _fnStringToCss,\r\n            _fnScrollBarWidth: _fnScrollBarWidth,\r\n            _fnSortFlatten: _fnSortFlatten,\r\n            _fnSort: _fnSort,\r\n            _fnSortAria: _fnSortAria,\r\n            _fnSortListener: _fnSortListener,\r\n            _fnSortAttachListener: _fnSortAttachListener,\r\n            _fnSortingClasses: _fnSortingClasses,\r\n            _fnSortData: _fnSortData,\r\n            _fnSaveState: _fnSaveState,\r\n            _fnLoadState: _fnLoadState,\r\n            _fnSettingsFromNode: _fnSettingsFromNode,\r\n            _fnLog: _fnLog,\r\n            _fnMap: _fnMap,\r\n            _fnBindAction: _fnBindAction,\r\n            _fnCallbackReg: _fnCallbackReg,\r\n            _fnCallbackFire: _fnCallbackFire,\r\n            _fnLengthOverflow: _fnLengthOverflow,\r\n            _fnRenderer: _fnRenderer,\r\n            _fnDataSource: _fnDataSource,\r\n            _fnRowAttributes: _fnRowAttributes,\r\n            _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\r\n            // in 1.10, so this dead-end function is\r\n            // added to prevent errors\r\n        } );\r\n\r\n\r\n        // jQuery access\r\n        $.fn.dataTable = DataTable;\r\n\r\n        // Legacy aliases\r\n        $.fn.dataTableSettings = DataTable.settings;\r\n        $.fn.dataTableExt = DataTable.ext;\r\n\r\n        // With a capital `D` we return a DataTables API instance rather than a\r\n        // jQuery object\r\n        $.fn.DataTable = function ( opts ) {\r\n            return $(this).dataTable( opts ).api();\r\n        };\r\n\r\n        // All properties that are available to $.fn.dataTable should also be\r\n        // available on $.fn.DataTable\r\n        $.each( DataTable, function ( prop, val ) {\r\n            $.fn.DataTable[ prop ] = val;\r\n        } );\r\n\r\n\r\n        // Information about events fired by DataTables - for documentation.\r\n        /**\r\n         * Draw event, fired whenever the table is redrawn on the page, at the same\r\n         * point as fnDrawCallback. This may be useful for binding events or\r\n         * performing calculations when the table is altered at all.\r\n         *  @name DataTable#draw.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Search event, fired when the searching applied to the table (using the\r\n         * built-in global search, or column filters) is altered.\r\n         *  @name DataTable#search.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Page change event, fired when the paging of the table is altered.\r\n         *  @name DataTable#page.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Order event, fired when the ordering applied to the table is altered.\r\n         *  @name DataTable#order.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * DataTables initialisation complete event, fired when the table is fully\r\n         * drawn, including Ajax data loaded, if Ajax data is required.\r\n         *  @name DataTable#init.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The JSON object request from the server - only\r\n         *    present if client-side Ajax sourced data is used</li></ol>\r\n         */\r\n\r\n        /**\r\n         * State save event, fired when the table has changed state a new state save\r\n         * is required. This event allows modification of the state saving object\r\n         * prior to actually doing the save, including addition or other state\r\n         * properties (for plug-ins) or modification of a DataTables core property.\r\n         *  @name DataTable#stateSaveParams.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The state information to be saved\r\n         */\r\n\r\n        /**\r\n         * State load event, fired when the table is loading state from the stored\r\n         * data, but prior to the settings object being modified by the saved state\r\n         * - allowing modification of the saved state is required or loading of\r\n         * state for a plug-in.\r\n         *  @name DataTable#stateLoadParams.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The saved state information\r\n         */\r\n\r\n        /**\r\n         * State loaded event, fired when state has been loaded from stored data and\r\n         * the settings object has been modified by the loaded data.\r\n         *  @name DataTable#stateLoaded.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The saved state information\r\n         */\r\n\r\n        /**\r\n         * Processing event, fired when DataTables is doing some kind of processing\r\n         * (be it, order, searcg or anything else). It can be used to indicate to\r\n         * the end user that there is something happening, or that something has\r\n         * finished.\r\n         *  @name DataTable#processing.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {boolean} bShow Flag for if DataTables is doing processing or not\r\n         */\r\n\r\n        /**\r\n         * Ajax (XHR) event, fired whenever an Ajax request is completed from a\r\n         * request to made to the server for new data. This event is called before\r\n         * DataTables processed the returned data, so it can also be used to pre-\r\n         * process the data returned from the server, if needed.\r\n         *\r\n         * Note that this trigger is called in `fnServerData`, if you override\r\n         * `fnServerData` and which to use this event, you need to trigger it in you\r\n         * success function.\r\n         *  @name DataTable#xhr.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {object} json JSON returned from the server\r\n         *\r\n         *  @example\r\n         *     // Use a custom property returned from the server in another DOM element\r\n         *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n\t *       $('#status').html( json.status );\r\n\t *     } );\r\n         *\r\n         *  @example\r\n         *     // Pre-process the data returned from the server\r\n         *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\r\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\r\n\t *       }\r\n\t *       // Note no return - manipulate the data directly in the JSON object.\r\n\t *     } );\r\n         */\r\n\r\n        /**\r\n         * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\r\n         * or passing the bDestroy:true parameter in the initialisation object. This\r\n         * can be used to remove bound events, added DOM nodes, etc.\r\n         *  @name DataTable#destroy.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Page length change event, fired when number of records to show on each\r\n         * page (the length) is changed.\r\n         *  @name DataTable#length.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {integer} len New length\r\n         */\r\n\r\n        /**\r\n         * Column sizing has changed.\r\n         *  @name DataTable#column-sizing.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Column visibility has changed.\r\n         *  @name DataTable#column-visibility.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {int} column Column index\r\n         *  @param {bool} vis `false` if column now hidden, or `true` if visible\r\n         */\r\n\r\n        return $.fn.dataTable;\r\n    }));\r\n\r\n}(window, document));\r\n\r\n","/* Set the defaults for DataTables initialisation */\r\n$.extend( true, $.fn.dataTable.defaults, {\r\n    \"sDom\":\r\n        \"<'row'<'col-xs-6'l><'col-xs-6'f>r>\"+\r\n            \"t\"+\r\n            \"<'row'<'col-xs-6'i><'col-xs-6'p>>\",\r\n    \"oLanguage\": {\r\n        \"sLengthMenu\": \"_MENU_ records per page\"\r\n    }\r\n} );\r\n\r\n\r\n/* Default class modification */\r\n$.extend( $.fn.dataTableExt.oStdClasses, {\r\n    \"sWrapper\": \"dataTables_wrapper form-inline\",\r\n    \"sFilterInput\": \"form-control input-sm\",\r\n    \"sLengthSelect\": \"form-control input-sm\"\r\n} );\r\n\r\n// In 1.10 we use the pagination renderers to draw the Bootstrap paging,\r\n// rather than  custom plug-in\r\nif ( $.fn.dataTable.Api ) {\r\n    $.fn.dataTable.defaults.renderer = 'bootstrap';\r\n    $.fn.dataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {\r\n        var api = new $.fn.dataTable.Api( settings );\r\n        var classes = settings.oClasses;\r\n        var lang = settings.oLanguage.oPaginate;\r\n        var btnDisplay, btnClass;\r\n\r\n        var attach = function( container, buttons ) {\r\n            var i, ien, node, button;\r\n            var clickHandler = function ( e ) {\r\n                e.preventDefault();\r\n                if ( e.data.action !== 'ellipsis' ) {\r\n                    api.page( e.data.action ).draw( false );\r\n                }\r\n            };\r\n\r\n            for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n                button = buttons[i];\r\n\r\n                if ( $.isArray( button ) ) {\r\n                    attach( container, button );\r\n                }\r\n                else {\r\n                    btnDisplay = '';\r\n                    btnClass = '';\r\n\r\n                    switch ( button ) {\r\n                        case 'ellipsis':\r\n                            btnDisplay = '&hellip;';\r\n                            btnClass = 'disabled';\r\n                            break;\r\n\r\n                        case 'first':\r\n                            btnDisplay = lang.sFirst;\r\n                            btnClass = button + (page > 0 ?\r\n                                '' : ' disabled');\r\n                            break;\r\n\r\n                        case 'previous':\r\n                            btnDisplay = lang.sPrevious;\r\n                            btnClass = button + (page > 0 ?\r\n                                '' : ' disabled');\r\n                            break;\r\n\r\n                        case 'next':\r\n                            btnDisplay = lang.sNext;\r\n                            btnClass = button + (page < pages-1 ?\r\n                                '' : ' disabled');\r\n                            break;\r\n\r\n                        case 'last':\r\n                            btnDisplay = lang.sLast;\r\n                            btnClass = button + (page < pages-1 ?\r\n                                '' : ' disabled');\r\n                            break;\r\n\r\n                        default:\r\n                            btnDisplay = button + 1;\r\n                            btnClass = page === button ?\r\n                                'active' : '';\r\n                            break;\r\n                    }\r\n\r\n                    if ( btnDisplay ) {\r\n                        node = $('<li>', {\r\n                            'class': classes.sPageButton+' '+btnClass,\r\n                            'aria-controls': settings.sTableId,\r\n                            'tabindex': settings.iTabIndex,\r\n                            'id': idx === 0 && typeof button === 'string' ?\r\n                                settings.sTableId +'_'+ button :\r\n                                null\r\n                        } )\r\n                            .append( $('<a>', {\r\n                                'href': '#'\r\n                            } )\r\n                                .html( btnDisplay )\r\n                            )\r\n                            .appendTo( container );\r\n\r\n                        settings.oApi._fnBindAction(\r\n                            node, {action: button}, clickHandler\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        attach(\r\n            $(host).empty().html('<ul class=\"pagination\"/>').children('ul'),\r\n            buttons\r\n        );\r\n    }\r\n}\r\nelse {\r\n    // Integration for 1.9-\r\n    $.fn.dataTable.defaults.sPaginationType = 'bootstrap';\r\n\r\n    /* API method to get paging information */\r\n    $.fn.dataTableExt.oApi.fnPagingInfo = function ( oSettings )\r\n    {\r\n        return {\r\n            \"iStart\":         oSettings._iDisplayStart,\r\n            \"iEnd\":           oSettings.fnDisplayEnd(),\r\n            \"iLength\":        oSettings._iDisplayLength,\r\n            \"iTotal\":         oSettings.fnRecordsTotal(),\r\n            \"iFilteredTotal\": oSettings.fnRecordsDisplay(),\r\n            \"iPage\":          oSettings._iDisplayLength === -1 ?\r\n                0 : Math.ceil( oSettings._iDisplayStart / oSettings._iDisplayLength ),\r\n            \"iTotalPages\":    oSettings._iDisplayLength === -1 ?\r\n                0 : Math.ceil( oSettings.fnRecordsDisplay() / oSettings._iDisplayLength )\r\n        };\r\n    };\r\n\r\n    /* Bootstrap style pagination control */\r\n    $.extend( $.fn.dataTableExt.oPagination, {\r\n        \"bootstrap\": {\r\n            \"fnInit\": function( oSettings, nPaging, fnDraw ) {\r\n                var oLang = oSettings.oLanguage.oPaginate;\r\n                var fnClickHandler = function ( e ) {\r\n                    e.preventDefault();\r\n                    if ( oSettings.oApi._fnPageChange(oSettings, e.data.action) ) {\r\n                        fnDraw( oSettings );\r\n                    }\r\n                };\r\n\r\n                $(nPaging).append(\r\n                    '<ul class=\"pagination\">'+\r\n                        '<li class=\"prev disabled\"><a href=\"#\">&larr; '+oLang.sPrevious+'</a></li>'+\r\n                        '<li class=\"next disabled\"><a href=\"#\">'+oLang.sNext+' &rarr; </a></li>'+\r\n                        '</ul>'\r\n                );\r\n                var els = $('a', nPaging);\r\n                $(els[0]).bind( 'click.DT', { action: \"previous\" }, fnClickHandler );\r\n                $(els[1]).bind( 'click.DT', { action: \"next\" }, fnClickHandler );\r\n            },\r\n\r\n            \"fnUpdate\": function ( oSettings, fnDraw ) {\r\n                var iListLength = 5;\r\n                var oPaging = oSettings.oInstance.fnPagingInfo();\r\n                var an = oSettings.aanFeatures.p;\r\n                var i, ien, j, sClass, iStart, iEnd, iHalf=Math.floor(iListLength/2);\r\n\r\n                if ( oPaging.iTotalPages < iListLength) {\r\n                    iStart = 1;\r\n                    iEnd = oPaging.iTotalPages;\r\n                }\r\n                else if ( oPaging.iPage <= iHalf ) {\r\n                    iStart = 1;\r\n                    iEnd = iListLength;\r\n                } else if ( oPaging.iPage >= (oPaging.iTotalPages-iHalf) ) {\r\n                    iStart = oPaging.iTotalPages - iListLength + 1;\r\n                    iEnd = oPaging.iTotalPages;\r\n                } else {\r\n                    iStart = oPaging.iPage - iHalf + 1;\r\n                    iEnd = iStart + iListLength - 1;\r\n                }\r\n\r\n                for ( i=0, ien=an.length ; i<ien ; i++ ) {\r\n                    // Remove the middle elements\r\n                    $('li:gt(0)', an[i]).filter(':not(:last)').remove();\r\n\r\n                    // Add the new list items and their event handlers\r\n                    for ( j=iStart ; j<=iEnd ; j++ ) {\r\n                        sClass = (j==oPaging.iPage+1) ? 'class=\"active\"' : '';\r\n                        $('<li '+sClass+'><a href=\"#\">'+j+'</a></li>')\r\n                            .insertBefore( $('li:last', an[i])[0] )\r\n                            .bind('click', function (e) {\r\n                                e.preventDefault();\r\n                                oSettings._iDisplayStart = (parseInt($('a', this).text(),10)-1) * oPaging.iLength;\r\n                                fnDraw( oSettings );\r\n                            } );\r\n                    }\r\n\r\n                    // Add / remove disabled classes from the static elements\r\n                    if ( oPaging.iPage === 0 ) {\r\n                        $('li:first', an[i]).addClass('disabled');\r\n                    } else {\r\n                        $('li:first', an[i]).removeClass('disabled');\r\n                    }\r\n\r\n                    if ( oPaging.iPage === oPaging.iTotalPages-1 || oPaging.iTotalPages === 0 ) {\r\n                        $('li:last', an[i]).addClass('disabled');\r\n                    } else {\r\n                        $('li:last', an[i]).removeClass('disabled');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } );\r\n}\r\n\r\n\r\n/*\r\n * TableTools Bootstrap compatibility\r\n * Required TableTools 2.1+\r\n */\r\nif ( $.fn.DataTable.TableTools ) {\r\n    // Set the classes that TableTools uses to something suitable for Bootstrap\r\n    $.extend( true, $.fn.DataTable.TableTools.classes, {\r\n        \"container\": \"DTTT btn-group\",\r\n        \"buttons\": {\r\n            \"normal\": \"btn btn-default\",\r\n            \"disabled\": \"disabled\"\r\n        },\r\n        \"collection\": {\r\n            \"container\": \"DTTT_dropdown dropdown-menu\",\r\n            \"buttons\": {\r\n                \"normal\": \"\",\r\n                \"disabled\": \"disabled\"\r\n            }\r\n        },\r\n        \"print\": {\r\n            \"info\": \"DTTT_print_info modal\"\r\n        },\r\n        \"select\": {\r\n            \"row\": \"active\"\r\n        }\r\n    } );\r\n\r\n    // Have the collection use a bootstrap compatible dropdown\r\n    $.extend( true, $.fn.DataTable.TableTools.DEFAULTS.oTags, {\r\n        \"collection\": {\r\n            \"container\": \"ul\",\r\n            \"button\": \"li\",\r\n            \"liner\": \"a\"\r\n        }\r\n    } );\r\n}\r\n","/// Knockout Mapping plugin v2.4.1\r\n/// (c) 2013 Steven Sanderson, Roy Jacobs - http://knockoutjs.com/\r\n/// License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n(function(e){\"function\"===typeof require&&\"object\"===typeof exports&&\"object\"===typeof module?e(require(\"knockout\"),exports):\"function\"===typeof define&&define.amd?define([\"knockout\",\"exports\"],e):e(ko,ko.mapping={})})(function(e,f){function y(b,c){var a,d;for(d in c)if(c.hasOwnProperty(d)&&c[d])if(a=f.getType(b[d]),d&&b[d]&&\"array\"!==a&&\"string\"!==a)y(b[d],c[d]);else if(\"array\"===f.getType(b[d])&&\"array\"===f.getType(c[d])){a=b;for(var e=d,l=b[d],n=c[d],t={},g=l.length-1;0<=g;--g)t[l[g]]=l[g];for(g=\r\nn.length-1;0<=g;--g)t[n[g]]=n[g];l=[];n=void 0;for(n in t)l.push(t[n]);a[e]=l}else b[d]=c[d]}function E(b,c){var a={};y(a,b);y(a,c);return a}function z(b,c){for(var a=E({},b),e=L.length-1;0<=e;e--){var f=L[e];a[f]&&(a[\"\"]instanceof Object||(a[\"\"]={}),a[\"\"][f]=a[f],delete a[f])}c&&(a.ignore=h(c.ignore,a.ignore),a.include=h(c.include,a.include),a.copy=h(c.copy,a.copy),a.observe=h(c.observe,a.observe));a.ignore=h(a.ignore,j.ignore);a.include=h(a.include,j.include);a.copy=h(a.copy,j.copy);a.observe=h(a.observe,\r\n    j.observe);a.mappedProperties=a.mappedProperties||{};a.copiedProperties=a.copiedProperties||{};return a}function h(b,c){\"array\"!==f.getType(b)&&(b=\"undefined\"===f.getType(b)?[]:[b]);\"array\"!==f.getType(c)&&(c=\"undefined\"===f.getType(c)?[]:[c]);return e.utils.arrayGetDistinctValues(b.concat(c))}function F(b,c,a,d,k,l,n){var t=\"array\"===f.getType(e.utils.unwrapObservable(c));l=l||\"\";if(f.isMapped(b)){var g=e.utils.unwrapObservable(b)[p];a=E(g,a)}var j=n||k,h=function(){return a[d]&&a[d].create instanceof\r\n    Function},x=function(b){var f=G,g=e.dependentObservable;e.dependentObservable=function(a,b,c){c=c||{};a&&\"object\"==typeof a&&(c=a);var d=c.deferEvaluation,M=!1;c.deferEvaluation=!0;a=new H(a,b,c);if(!d){var g=a,d=e.dependentObservable;e.dependentObservable=H;a=e.isWriteableObservable(g);e.dependentObservable=d;d=H({read:function(){M||(e.utils.arrayRemoveItem(f,g),M=!0);return g.apply(g,arguments)},write:a&&function(a){return g(a)},deferEvaluation:!0});d.__DO=g;a=d;f.push(a)}return a};e.dependentObservable.fn=\r\n    H.fn;e.computed=e.dependentObservable;b=e.utils.unwrapObservable(k)instanceof Array?a[d].create({data:b||c,parent:j,skip:N}):a[d].create({data:b||c,parent:j});e.dependentObservable=g;e.computed=e.dependentObservable;return b},u=function(){return a[d]&&a[d].update instanceof Function},v=function(b,f){var g={data:f||c,parent:j,target:e.utils.unwrapObservable(b)};e.isWriteableObservable(b)&&(g.observable=b);return a[d].update(g)};if(n=I.get(c))return n;d=d||\"\";if(t){var t=[],s=!1,m=function(a){return a};\r\n    a[d]&&a[d].key&&(m=a[d].key,s=!0);e.isObservable(b)||(b=e.observableArray([]),b.mappedRemove=function(a){var c=\"function\"==typeof a?a:function(b){return b===m(a)};return b.remove(function(a){return c(m(a))})},b.mappedRemoveAll=function(a){var c=C(a,m);return b.remove(function(a){return-1!=e.utils.arrayIndexOf(c,m(a))})},b.mappedDestroy=function(a){var c=\"function\"==typeof a?a:function(b){return b===m(a)};return b.destroy(function(a){return c(m(a))})},b.mappedDestroyAll=function(a){var c=C(a,m);return b.destroy(function(a){return-1!=\r\n        e.utils.arrayIndexOf(c,m(a))})},b.mappedIndexOf=function(a){var c=C(b(),m);a=m(a);return e.utils.arrayIndexOf(c,a)},b.mappedGet=function(a){return b()[b.mappedIndexOf(a)]},b.mappedCreate=function(a){if(-1!==b.mappedIndexOf(a))throw Error(\"There already is an object with the key that you specified.\");var c=h()?x(a):a;u()&&(a=v(c,a),e.isWriteableObservable(c)?c(a):c=a);b.push(c);return c});n=C(e.utils.unwrapObservable(b),m).sort();g=C(c,m);s&&g.sort();s=e.utils.compareArrays(n,g);n={};var J,A=e.utils.unwrapObservable(c),\r\n        y={},z=!0,g=0;for(J=A.length;g<J;g++){var r=m(A[g]);if(void 0===r||r instanceof Object){z=!1;break}y[r]=A[g]}var A=[],B=0,g=0;for(J=s.length;g<J;g++){var r=s[g],q,w=l+\"[\"+g+\"]\";switch(r.status){case \"added\":var D=z?y[r.value]:K(e.utils.unwrapObservable(c),r.value,m);q=F(void 0,D,a,d,b,w,k);h()||(q=e.utils.unwrapObservable(q));w=O(e.utils.unwrapObservable(c),D,n);q===N?B++:A[w-B]=q;n[w]=!0;break;case \"retained\":D=z?y[r.value]:K(e.utils.unwrapObservable(c),r.value,m);q=K(b,r.value,m);F(q,D,a,d,b,w,\r\n        k);w=O(e.utils.unwrapObservable(c),D,n);A[w]=q;n[w]=!0;break;case \"deleted\":q=K(b,r.value,m)}t.push({event:r.status,item:q})}b(A);a[d]&&a[d].arrayChanged&&e.utils.arrayForEach(t,function(b){a[d].arrayChanged(b.event,b.item)})}else if(P(c)){b=e.utils.unwrapObservable(b);if(!b){if(h())return s=x(),u()&&(s=v(s)),s;if(u())return v(s);b={}}u()&&(b=v(b));I.save(c,b);if(u())return b;Q(c,function(d){var f=l.length?l+\".\"+d:d;if(-1==e.utils.arrayIndexOf(a.ignore,f))if(-1!=e.utils.arrayIndexOf(a.copy,f))b[d]=\r\n    c[d];else if(\"object\"!=typeof c[d]&&\"array\"!=typeof c[d]&&0<a.observe.length&&-1==e.utils.arrayIndexOf(a.observe,f))b[d]=c[d],a.copiedProperties[f]=!0;else{var g=I.get(c[d]),k=F(b[d],c[d],a,d,b,f,b),g=g||k;if(0<a.observe.length&&-1==e.utils.arrayIndexOf(a.observe,f))b[d]=g(),a.copiedProperties[f]=!0;else{if(e.isWriteableObservable(b[d])){if(g=e.utils.unwrapObservable(g),b[d]()!==g)b[d](g)}else g=void 0===b[d]?g:e.utils.unwrapObservable(g),b[d]=g;a.mappedProperties[f]=!0}}})}else switch(f.getType(c)){case \"function\":u()?\r\n    e.isWriteableObservable(c)?(c(v(c)),b=c):b=v(c):b=c;break;default:if(e.isWriteableObservable(b))return q=u()?v(b):e.utils.unwrapObservable(c),b(q),q;h()||u();b=h()?x():e.observable(e.utils.unwrapObservable(c));u()&&b(v(b))}return b}function O(b,c,a){for(var d=0,e=b.length;d<e;d++)if(!0!==a[d]&&b[d]===c)return d;return null}function R(b,c){var a;c&&(a=c(b));\"undefined\"===f.getType(a)&&(a=b);return e.utils.unwrapObservable(a)}function K(b,c,a){b=e.utils.unwrapObservable(b);for(var d=0,f=b.length;d<\r\n    f;d++){var l=b[d];if(R(l,a)===c)return l}throw Error(\"When calling ko.update*, the key '\"+c+\"' was not found!\");}function C(b,c){return e.utils.arrayMap(e.utils.unwrapObservable(b),function(a){return c?R(a,c):a})}function Q(b,c){if(\"array\"===f.getType(b))for(var a=0;a<b.length;a++)c(a);else for(a in b)c(a)}function P(b){var c=f.getType(b);return(\"object\"===c||\"array\"===c)&&null!==b}function T(){var b=[],c=[];this.save=function(a,d){var f=e.utils.arrayIndexOf(b,a);0<=f?c[f]=d:(b.push(a),c.push(d))};\r\n    this.get=function(a){a=e.utils.arrayIndexOf(b,a);return 0<=a?c[a]:void 0}}function S(){var b={},c=function(a){var c;try{c=a}catch(e){c=\"$$$\"}a=b[c];void 0===a&&(a=new T,b[c]=a);return a};this.save=function(a,b){c(a).save(a,b)};this.get=function(a){return c(a).get(a)}}var p=\"__ko_mapping__\",H=e.dependentObservable,B=0,G,I,L=[\"create\",\"update\",\"key\",\"arrayChanged\"],N={},x={include:[\"_destroy\"],ignore:[],copy:[],observe:[]},j=x;f.isMapped=function(b){return(b=e.utils.unwrapObservable(b))&&b[p]};f.fromJS=\r\n    function(b){if(0==arguments.length)throw Error(\"When calling ko.fromJS, pass the object you want to convert.\");try{B++||(G=[],I=new S);var c,a;2==arguments.length&&(arguments[1][p]?a=arguments[1]:c=arguments[1]);3==arguments.length&&(c=arguments[1],a=arguments[2]);a&&(c=E(c,a[p]));c=z(c);var d=F(a,b,c);a&&(d=a);if(!--B)for(;G.length;){var e=G.pop();e&&(e(),e.__DO.throttleEvaluation=e.throttleEvaluation)}d[p]=E(d[p],c);return d}catch(f){throw B=0,f;}};f.fromJSON=function(b){var c=e.utils.parseJson(b);\r\n    arguments[0]=c;return f.fromJS.apply(this,arguments)};f.updateFromJS=function(){throw Error(\"ko.mapping.updateFromJS, use ko.mapping.fromJS instead. Please note that the order of parameters is different!\");};f.updateFromJSON=function(){throw Error(\"ko.mapping.updateFromJSON, use ko.mapping.fromJSON instead. Please note that the order of parameters is different!\");};f.toJS=function(b,c){j||f.resetDefaultOptions();if(0==arguments.length)throw Error(\"When calling ko.mapping.toJS, pass the object you want to convert.\");\r\n    if(\"array\"!==f.getType(j.ignore))throw Error(\"ko.mapping.defaultOptions().ignore should be an array.\");if(\"array\"!==f.getType(j.include))throw Error(\"ko.mapping.defaultOptions().include should be an array.\");if(\"array\"!==f.getType(j.copy))throw Error(\"ko.mapping.defaultOptions().copy should be an array.\");c=z(c,b[p]);return f.visitModel(b,function(a){return e.utils.unwrapObservable(a)},c)};f.toJSON=function(b,c){var a=f.toJS(b,c);return e.utils.stringifyJson(a)};f.defaultOptions=function(){if(0<arguments.length)j=\r\n    arguments[0];else return j};f.resetDefaultOptions=function(){j={include:x.include.slice(0),ignore:x.ignore.slice(0),copy:x.copy.slice(0)}};f.getType=function(b){if(b&&\"object\"===typeof b){if(b.constructor===Date)return\"date\";if(b.constructor===Array)return\"array\"}return typeof b};f.visitModel=function(b,c,a){a=a||{};a.visitedObjects=a.visitedObjects||new S;var d,k=e.utils.unwrapObservable(b);if(P(k))a=z(a,k[p]),c(b,a.parentName),d=\"array\"===f.getType(k)?[]:{};else return c(b,a.parentName);a.visitedObjects.save(b,\r\n    d);var l=a.parentName;Q(k,function(b){if(!(a.ignore&&-1!=e.utils.arrayIndexOf(a.ignore,b))){var j=k[b],g=a,h=l||\"\";\"array\"===f.getType(k)?l&&(h+=\"[\"+b+\"]\"):(l&&(h+=\".\"),h+=b);g.parentName=h;if(!(-1===e.utils.arrayIndexOf(a.copy,b)&&-1===e.utils.arrayIndexOf(a.include,b)&&k[p]&&k[p].mappedProperties&&!k[p].mappedProperties[b]&&k[p].copiedProperties&&!k[p].copiedProperties[b]&&\"array\"!==f.getType(k)))switch(f.getType(e.utils.unwrapObservable(j))){case \"object\":case \"array\":case \"undefined\":g=a.visitedObjects.get(j);\r\n    d[b]=\"undefined\"!==f.getType(g)?g:f.visitModel(j,c,a);break;default:d[b]=c(j,a.parentName)}}});return d}});","$(document).ready(function() {\r\n\r\n    var dt = $('#invoice-table').DataTable( {\r\n        columns: [\r\n            { data: 'id()'},\r\n            { data: 'name()' },\r\n            { data: 'start_date()' },\r\n            { data: 'end_date()' },\r\n            { data: 'reference()' },\r\n            { data: 'send()' }\r\n        ],\r\n        \"language\": {\r\n            \"emptyTable\": \"No Invoices available, please try different filters\"\r\n        }\r\n    } );\r\n\r\n    dt.column( 0 ).visible(false);\r\n    dt.column( 3 ).order( 'desc' );\r\n    //this is a comment\r\n    invoices_view_model.dt = dt;\r\n\r\n    // Update the table when the `people` array has items added or removed\r\n    invoices_view_model.invoices.subscribeArrayChanged(\r\n        function ( addedItem ) {\r\n            var row = dt.row.add( addedItem).draw();\r\n            ko.applyBindings(invoices_view_model, row.node());\r\n        },\r\n        function ( deletedItem ) {\r\n            //var rowIdx = dt.column( 0 ).data().indexOf( deletedItem.id() );\r\n            dt.row( 0 ).remove().draw();\r\n        }\r\n    );\r\n} );","// Helper function so we know what has changed\r\nko.observableArray.fn.subscribeArrayChanged = function(addCallback, deleteCallback) {\r\n    var previousValue = undefined;\r\n    this.subscribe(function(_previousValue) {\r\n        previousValue = _previousValue.slice(0);\r\n    }, undefined, 'beforeChange');\r\n    this.subscribe(function(latestValue) {\r\n        var editScript = ko.utils.compareArrays(previousValue, latestValue);\r\n        for (var i = 0, j = editScript.length; i < j; i++) {\r\n            switch (editScript[i].status) {\r\n                case \"retained\":\r\n                    break;\r\n                case \"deleted\":\r\n                    if (deleteCallback)\r\n                        deleteCallback(editScript[i].value);\r\n                    break;\r\n                case \"added\":\r\n                    if (addCallback)\r\n                        addCallback(editScript[i].value);\r\n                    break;\r\n            }\r\n        }\r\n        previousValue = undefined;\r\n    });\r\n};\r\n\r\nvar invoices_view_model = new InvoicesViewModel();\r\n\r\nfunction InvoicesViewModel() {\r\n    var self = this;\r\n\r\n    self.invoice_start_date = ko.observable(\"\");\r\n\r\n    self.invoice_end_date = ko.observable(\"\");\r\n\r\n    self.selected_team = ko.observable(new Team(\"\", \"\"));\r\n\r\n    self.invoices = ko.observableArray([]);\r\n\r\n    self.invoices_found = ko.observable(false);\r\n\r\n    self.saved = ko.observable(true);\r\n\r\n    self.teams  = ko.observableArray([]);\r\n\r\n    self.invoices_to_send = ko.observableArray([]);\r\n\r\n    self.error_modal = {\r\n        error_message: ko.observable(),\r\n        error_code: ko.observable(),\r\n        show: ko.observable(false),\r\n        body: ko.observable(),\r\n        header: ko.observable(),\r\n        onClose: function() {}\r\n    };\r\n\r\n    self.showErrorModal = function(error_message, error_code) {\r\n        self.error_modal.show(true);\r\n        self.error_modal.error_message(error_message);\r\n        self.error_modal.error_code(error_code);\r\n\r\n        if(error_code < 500) {\r\n            self.error_modal.header(\"Notice\");\r\n            self.error_modal.body(\"Please Note:\");\r\n        } else if(error_code < 1000) {\r\n            self.error_modal.header(\"Warning\");\r\n            self.error_modal.body(\"Warning:\");\r\n        } else if(error_code < 1500) {\r\n            self.error_modal.header(\"Error\");\r\n            self.error_modal.body(\"The application has encountered an error:\");\r\n        } else {\r\n            self.error_modal.header(\"Fatal Error\");\r\n            self.error_modal.body(\"The application has encountered a fatal error:\");\r\n        }\r\n    };\r\n\r\n    self.prevWeek = function(date) {\r\n        if(date()) date(moment(date(), \"YYYY-MM-DD\").add('w', -1).format(\"YYYY-MM-DD\"));\r\n    };\r\n    self.nextWeek = function(date) {\r\n        if(date()) date(moment(date(), \"YYYY-MM-DD\").add('w', 1).format(\"YYYY-MM-DD\"));\r\n    };\r\n\r\n    self.xeroSubmit = function() {\r\n        var jsonData = {};\r\n        jsonData.invoices = self.invoices_to_send();\r\n\r\n        jsonData.callback = 'invoices-to-xero';\r\n        jsonData = JSON.stringify(jsonData);\r\n        $.post(\r\n            \"xero/oauth-url\",\r\n            { data: jsonData },\r\n            function(returnedData) {\r\n                if(returnedData.result == '0' && typeof returnedData.data.url !== 'undefined') {\r\n                    window.location.href = returnedData.data.url;\r\n                }\r\n            },\r\n            \"json\"\r\n        );\r\n    };\r\n\r\n    self.getInvoices = function() {\r\n        var data = {};\r\n        if(self.invoice_start_date()) data.start_date = self.invoice_start_date();\r\n        if(self.invoice_end_date()) data.end_date = self.invoice_end_date();\r\n        if(self.selected_team().team_id()) data.team_id = self.selected_team().team_id();\r\n\r\n        $.getJSON(\"invoice/invoice\", data, function(allData) {\r\n            if(allData['result'] == 0) {\r\n                self.invoices_found(true);\r\n                self.invoices.removeAll();\r\n\r\n                self.invoices($.map(allData.data.invoices, function(val, key) {return new Invoice(val)}));\r\n            } else {\r\n                self.showErrorModal(allData['message'], allData['result']);\r\n            }\r\n        });\r\n    };\r\n\r\n    //this is a comment\r\n    $.getJSON(\"team/available-teams\", function(allData) {\r\n        var mappedTeams = $.map(allData, function(val, key) { return new Team(val, key)});\r\n        mappedTeams.unshift(new Team(\"\", \"\"));\r\n        self.teams(mappedTeams);\r\n    });\r\n\r\n    self.getInvoices();\r\n}\r\n\r\nfunction Invoice(invoice) {\r\n    var parent = this;\r\n\r\n    this.id = ko.observable(invoice.id);\r\n    this.name = ko.observable(invoice.invoicetemplate.name);\r\n    this.start_date = ko.observable(invoice.start_date);\r\n    this.end_date = ko.observable(invoice.end_date);\r\n    this.time_period = ko.observable(moment(this.start_date()).format(\"D MMM, YYYY\") + \" - \" + moment(this.end_date()).format(\"D MMM, YYYY\"));\r\n\r\n    this.reference = ko.observable(invoice.reference);\r\n\r\n    this.already_sent_to_xero = ko.observable(invoice.sent);\r\n\r\n    if(this.already_sent_to_xero() == false) {\r\n        this.send = ko.observable(\r\n            \"<td><div class='checkbox'><label><input type='checkbox' value='\"+ this.id() +\"' data-bind='checked: invoices_to_send'> Send</label></td>\"\r\n        );\r\n    } else {\r\n        this.send = ko.observable(\"<td>Already Sent</td>\");\r\n    }\r\n\r\n    $.each( [ 'id', 'name', 'start_date', 'end_date', 'reference', 'send' ], function (i, prop) {\r\n        parent[ prop ].subscribe( function (val) {\r\n            // Find the row in the DataTable and invalidate it, which will\r\n            // cause DataTables to re-read the data\r\n            var row_nodes = dt.rows().nodes();\r\n            dt.rows().invalidate();\r\n\r\n            for(var i = 0; i < row_nodes.length; i++) {\r\n                ko.cleanNode(row_nodes[i]);\r\n                ko.applyBindings(invoices_view_model, row_nodes[i]);\r\n            }\r\n\r\n            dt.draw();\r\n        } );\r\n    } );\r\n\r\n}\r\n\r\nfunction Team(val, key) {\r\n    this.team_id = ko.observable(key);\r\n    this.team_name = ko.observable(val);\r\n}\r\n\r\n/* Custom binding for making denial modal */\r\nko.bindingHandlers.bootstrapModal = {\r\n    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n        var props = valueAccessor(),\r\n            vm = bindingContext.createChildContext(viewModel);\r\n        ko.utils.extend(vm, props);\r\n        vm.close = function() {\r\n            vm.show(false);\r\n            vm.onClose();\r\n        };\r\n        vm.action = function() {\r\n            vm.onAction();\r\n        };\r\n        ko.utils.toggleDomNodeCssClass(element, \"modal fade\", true);\r\n        ko.renderTemplate(\"denyModal\", vm, null, element);\r\n        var showHide = ko.computed(function() {\r\n            $(element).modal(vm.show() ? 'show' : 'hide');\r\n        });\r\n        return {\r\n            controlsDescendantBindings: true\r\n        };\r\n    }\r\n};\r\n\r\n// Activates knockout.js\r\nko.applyBindings(invoices_view_model);","/* Custom binding for making error modal */\r\nko.bindingHandlers.bootstrapErrorModal = {\r\n    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n        var props = valueAccessor(),\r\n            vm = bindingContext.createChildContext(viewModel);\r\n        ko.utils.extend(vm, props);\r\n        vm.close = function() {\r\n            vm.show(false);\r\n            vm.onClose();\r\n        };\r\n        ko.utils.toggleDomNodeCssClass(element, \"modal fade\", true);\r\n        ko.renderTemplate(\"errorModal\", vm, null, element);\r\n        var showHide = ko.computed(function() {\r\n            $(element).modal(vm.show() ? 'show' : 'hide');\r\n        });\r\n        return {\r\n            controlsDescendantBindings: true\r\n        };\r\n    }\r\n};\r\n\r\nvar error_modal = {\r\n    error_message: ko.observable(),\r\n    error_code: ko.observable(),\r\n    show: ko.observable(false), /* Set to true to show initially */\r\n    body: ko.observable(),\r\n    header: ko.observable(),\r\n    onClose: function() {}\r\n};\r\n\r\nvar errorModal = function(error_message, error_code) {\r\n    self.error_modal.show(true);\r\n    self.error_modal.error_message(error_message);\r\n    self.error_modal.error_code(error_code);\r\n\r\n    if(error_code < 500) {\r\n        self.error_modal.header(\"Notice\");\r\n        self.error_modal.body(\"Please Note:\");\r\n    } else if(error_code < 1000) {\r\n        self.error_modal.header(\"Warning\");\r\n        self.error_modal.body(\"Warning:\");\r\n    } else if(error_code < 1500) {\r\n        self.error_modal.header(\"Error\");\r\n        self.error_modal.body(\"The application has encountered an error:\");\r\n    } else {\r\n        self.error_modal.header(\"Fatal Error\");\r\n        self.error_modal.body(\"The application has encountered a fatal error:\");\r\n    }\r\n};"],"sourceRoot":"/source/"}