{"version":3,"sources":["qunit-1.14.0.js","knockout.js","test.js"],"names":[],"mappingsupLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"js-tests.js","sourcesContent":["/*!\r\n * QUnit 1.14.0\r\n * http://qunitjs.com/\r\n *\r\n * Copyright 2013 jQuery Foundation and other contributors\r\n * Released under the MIT license\r\n * http://jquery.org/license\r\n *\r\n * Date: 2014-01-31T16:40Z\r\n */\r\n\r\n(function( window ) {\r\n\r\n    var QUnit,\r\n        assert,\r\n        config,\r\n        onErrorFnPrev,\r\n        testId = 0,\r\n        fileName = (sourceFromStacktrace( 0 ) || \"\" ).replace(/(:\\d+)+\\)?/, \"\").replace(/.+\\//, \"\"),\r\n        toString = Object.prototype.toString,\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n    // Keep a local reference to Date (GH-283)\r\n        Date = window.Date,\r\n        setTimeout = window.setTimeout,\r\n        clearTimeout = window.clearTimeout,\r\n        defined = {\r\n            document: typeof window.document !== \"undefined\",\r\n            setTimeout: typeof window.setTimeout !== \"undefined\",\r\n            sessionStorage: (function() {\r\n                var x = \"qunit-test-string\";\r\n                try {\r\n                    sessionStorage.setItem( x, x );\r\n                    sessionStorage.removeItem( x );\r\n                    return true;\r\n                } catch( e ) {\r\n                    return false;\r\n                }\r\n            }())\r\n        },\r\n        /**\r\n         * Provides a normalized error string, correcting an issue\r\n         * with IE 7 (and prior) where Error.prototype.toString is\r\n         * not properly implemented\r\n         *\r\n         * Based on http://es5.github.com/#x15.11.4.4\r\n         *\r\n         * @param {String|Error} error\r\n         * @return {String} error message\r\n         */\r\n            errorString = function( error ) {\r\n            var name, message,\r\n                errorString = error.toString();\r\n            if ( errorString.substring( 0, 7 ) === \"[object\" ) {\r\n                name = error.name ? error.name.toString() : \"Error\";\r\n                message = error.message ? error.message.toString() : \"\";\r\n                if ( name && message ) {\r\n                    return name + \": \" + message;\r\n                } else if ( name ) {\r\n                    return name;\r\n                } else if ( message ) {\r\n                    return message;\r\n                } else {\r\n                    return \"Error\";\r\n                }\r\n            } else {\r\n                return errorString;\r\n            }\r\n        },\r\n        /**\r\n         * Makes a clone of an object using only Array or Object as base,\r\n         * and copies over the own enumerable properties.\r\n         *\r\n         * @param {Object} obj\r\n         * @return {Object} New object with only the own properties (recursively).\r\n         */\r\n            objectValues = function( obj ) {\r\n            // Grunt 0.3.x uses an older version of jshint that still has jshint/jshint#392.\r\n            /*jshint newcap: false */\r\n            var key, val,\r\n                vals = QUnit.is( \"array\", obj ) ? [] : {};\r\n            for ( key in obj ) {\r\n                if ( hasOwn.call( obj, key ) ) {\r\n                    val = obj[key];\r\n                    vals[key] = val === Object(val) ? objectValues(val) : val;\r\n                }\r\n            }\r\n            return vals;\r\n        };\r\n\r\n\r\n// Root QUnit object.\r\n// `QUnit` initialized at top of scope\r\n    QUnit = {\r\n\r\n        // call on start of module test to prepend name to all tests\r\n        module: function( name, testEnvironment ) {\r\n            config.currentModule = name;\r\n            config.currentModuleTestEnvironment = testEnvironment;\r\n            config.modules[name] = true;\r\n        },\r\n\r\n        asyncTest: function( testName, expected, callback ) {\r\n            if ( arguments.length === 2 ) {\r\n                callback = expected;\r\n                expected = null;\r\n            }\r\n\r\n            QUnit.test( testName, expected, callback, true );\r\n        },\r\n\r\n        test: function( testName, expected, callback, async ) {\r\n            var test,\r\n                nameHtml = \"<span class='test-name'>\" + escapeText( testName ) + \"</span>\";\r\n\r\n            if ( arguments.length === 2 ) {\r\n                callback = expected;\r\n                expected = null;\r\n            }\r\n\r\n            if ( config.currentModule ) {\r\n                nameHtml = \"<span class='module-name'>\" + escapeText( config.currentModule ) + \"</span>: \" + nameHtml;\r\n            }\r\n\r\n            test = new Test({\r\n                nameHtml: nameHtml,\r\n                testName: testName,\r\n                expected: expected,\r\n                async: async,\r\n                callback: callback,\r\n                module: config.currentModule,\r\n                moduleTestEnvironment: config.currentModuleTestEnvironment,\r\n                stack: sourceFromStacktrace( 2 )\r\n            });\r\n\r\n            if ( !validTest( test ) ) {\r\n                return;\r\n            }\r\n\r\n            test.queue();\r\n        },\r\n\r\n        // Specify the number of expected assertions to guarantee that failed test (no assertions are run at all) don't slip through.\r\n        expect: function( asserts ) {\r\n            if (arguments.length === 1) {\r\n                config.current.expected = asserts;\r\n            } else {\r\n                return config.current.expected;\r\n            }\r\n        },\r\n\r\n        start: function( count ) {\r\n            // QUnit hasn't been initialized yet.\r\n            // Note: RequireJS (et al) may delay onLoad\r\n            if ( config.semaphore === undefined ) {\r\n                QUnit.begin(function() {\r\n                    // This is triggered at the top of QUnit.load, push start() to the event loop, to allow QUnit.load to finish first\r\n                    setTimeout(function() {\r\n                        QUnit.start( count );\r\n                    });\r\n                });\r\n                return;\r\n            }\r\n\r\n            config.semaphore -= count || 1;\r\n            // don't start until equal number of stop-calls\r\n            if ( config.semaphore > 0 ) {\r\n                return;\r\n            }\r\n            // ignore if start is called more often then stop\r\n            if ( config.semaphore < 0 ) {\r\n                config.semaphore = 0;\r\n                QUnit.pushFailure( \"Called start() while already started (QUnit.config.semaphore was 0 already)\", null, sourceFromStacktrace(2) );\r\n                return;\r\n            }\r\n            // A slight delay, to avoid any current callbacks\r\n            if ( defined.setTimeout ) {\r\n                setTimeout(function() {\r\n                    if ( config.semaphore > 0 ) {\r\n                        return;\r\n                    }\r\n                    if ( config.timeout ) {\r\n                        clearTimeout( config.timeout );\r\n                    }\r\n\r\n                    config.blocking = false;\r\n                    process( true );\r\n                }, 13);\r\n            } else {\r\n                config.blocking = false;\r\n                process( true );\r\n            }\r\n        },\r\n\r\n        stop: function( count ) {\r\n            config.semaphore += count || 1;\r\n            config.blocking = true;\r\n\r\n            if ( config.testTimeout && defined.setTimeout ) {\r\n                clearTimeout( config.timeout );\r\n                config.timeout = setTimeout(function() {\r\n                    QUnit.ok( false, \"Test timed out\" );\r\n                    config.semaphore = 1;\r\n                    QUnit.start();\r\n                }, config.testTimeout );\r\n            }\r\n        }\r\n    };\r\n\r\n// We use the prototype to distinguish between properties that should\r\n// be exposed as globals (and in exports) and those that shouldn't\r\n    (function() {\r\n        function F() {}\r\n        F.prototype = QUnit;\r\n        QUnit = new F();\r\n        // Make F QUnit's constructor so that we can add to the prototype later\r\n        QUnit.constructor = F;\r\n    }());\r\n\r\n    /**\r\n     * Config object: Maintain internal state\r\n     * Later exposed as QUnit.config\r\n     * `config` initialized at top of scope\r\n     */\r\n    config = {\r\n        // The queue of tests to run\r\n        queue: [],\r\n\r\n        // block until document ready\r\n        blocking: true,\r\n\r\n        // when enabled, show only failing tests\r\n        // gets persisted through sessionStorage and can be changed in UI via checkbox\r\n        hidepassed: false,\r\n\r\n        // by default, run previously failed tests first\r\n        // very useful in combination with \"Hide passed tests\" checked\r\n        reorder: true,\r\n\r\n        // by default, modify document.title when suite is done\r\n        altertitle: true,\r\n\r\n        // by default, scroll to top of the page when suite is done\r\n        scrolltop: true,\r\n\r\n        // when enabled, all tests must call expect()\r\n        requireExpects: false,\r\n\r\n        // add checkboxes that are persisted in the query-string\r\n        // when enabled, the id is set to `true` as a `QUnit.config` property\r\n        urlConfig: [\r\n            {\r\n                id: \"noglobals\",\r\n                label: \"Check for Globals\",\r\n                tooltip: \"Enabling this will test if any test introduces new properties on the `window` object. Stored as query-strings.\"\r\n            },\r\n            {\r\n                id: \"notrycatch\",\r\n                label: \"No try-catch\",\r\n                tooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings.\"\r\n            }\r\n        ],\r\n\r\n        // Set of all modules.\r\n        modules: {},\r\n\r\n        // logging callback queues\r\n        begin: [],\r\n        done: [],\r\n        log: [],\r\n        testStart: [],\r\n        testDone: [],\r\n        moduleStart: [],\r\n        moduleDone: []\r\n    };\r\n\r\n// Initialize more QUnit.config and QUnit.urlParams\r\n    (function() {\r\n        var i, current,\r\n            location = window.location || { search: \"\", protocol: \"file:\" },\r\n            params = location.search.slice( 1 ).split( \"&\" ),\r\n            length = params.length,\r\n            urlParams = {};\r\n\r\n        if ( params[ 0 ] ) {\r\n            for ( i = 0; i < length; i++ ) {\r\n                current = params[ i ].split( \"=\" );\r\n                current[ 0 ] = decodeURIComponent( current[ 0 ] );\r\n\r\n                // allow just a key to turn on a flag, e.g., test.html?noglobals\r\n                current[ 1 ] = current[ 1 ] ? decodeURIComponent( current[ 1 ] ) : true;\r\n                if ( urlParams[ current[ 0 ] ] ) {\r\n                    urlParams[ current[ 0 ] ] = [].concat( urlParams[ current[ 0 ] ], current[ 1 ] );\r\n                } else {\r\n                    urlParams[ current[ 0 ] ] = current[ 1 ];\r\n                }\r\n            }\r\n        }\r\n\r\n        QUnit.urlParams = urlParams;\r\n\r\n        // String search anywhere in moduleName+testName\r\n        config.filter = urlParams.filter;\r\n\r\n        // Exact match of the module name\r\n        config.module = urlParams.module;\r\n\r\n        config.testNumber = [];\r\n        if ( urlParams.testNumber ) {\r\n\r\n            // Ensure that urlParams.testNumber is an array\r\n            urlParams.testNumber = [].concat( urlParams.testNumber );\r\n            for ( i = 0; i < urlParams.testNumber.length; i++ ) {\r\n                current = urlParams.testNumber[ i ];\r\n                config.testNumber.push( parseInt( current, 10 ) );\r\n            }\r\n        }\r\n\r\n        // Figure out if we're running the tests from a server or not\r\n        QUnit.isLocal = location.protocol === \"file:\";\r\n    }());\r\n\r\n    extend( QUnit, {\r\n\r\n        config: config,\r\n\r\n        // Initialize the configuration options\r\n        init: function() {\r\n            extend( config, {\r\n                stats: { all: 0, bad: 0 },\r\n                moduleStats: { all: 0, bad: 0 },\r\n                started: +new Date(),\r\n                updateRate: 1000,\r\n                blocking: false,\r\n                autostart: true,\r\n                autorun: false,\r\n                filter: \"\",\r\n                queue: [],\r\n                semaphore: 1\r\n            });\r\n\r\n            var tests, banner, result,\r\n                qunit = id( \"qunit\" );\r\n\r\n            if ( qunit ) {\r\n                qunit.innerHTML =\r\n                    \"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\r\n                        \"<h2 id='qunit-banner'></h2>\" +\r\n                        \"<div id='qunit-testrunner-toolbar'></div>\" +\r\n                        \"<h2 id='qunit-userAgent'></h2>\" +\r\n                        \"<ol id='qunit-tests'></ol>\";\r\n            }\r\n\r\n            tests = id( \"qunit-tests\" );\r\n            banner = id( \"qunit-banner\" );\r\n            result = id( \"qunit-testresult\" );\r\n\r\n            if ( tests ) {\r\n                tests.innerHTML = \"\";\r\n            }\r\n\r\n            if ( banner ) {\r\n                banner.className = \"\";\r\n            }\r\n\r\n            if ( result ) {\r\n                result.parentNode.removeChild( result );\r\n            }\r\n\r\n            if ( tests ) {\r\n                result = document.createElement( \"p\" );\r\n                result.id = \"qunit-testresult\";\r\n                result.className = \"result\";\r\n                tests.parentNode.insertBefore( result, tests );\r\n                result.innerHTML = \"Running...<br/>&nbsp;\";\r\n            }\r\n        },\r\n\r\n        // Resets the test setup. Useful for tests that modify the DOM.\r\n        /*\r\n         DEPRECATED: Use multiple tests instead of resetting inside a test.\r\n         Use testStart or testDone for custom cleanup.\r\n         This method will throw an error in 2.0, and will be removed in 2.1\r\n         */\r\n        reset: function() {\r\n            var fixture = id( \"qunit-fixture\" );\r\n            if ( fixture ) {\r\n                fixture.innerHTML = config.fixture;\r\n            }\r\n        },\r\n\r\n        // Safe object type checking\r\n        is: function( type, obj ) {\r\n            return QUnit.objectType( obj ) === type;\r\n        },\r\n\r\n        objectType: function( obj ) {\r\n            if ( typeof obj === \"undefined\" ) {\r\n                return \"undefined\";\r\n            }\r\n\r\n            // Consider: typeof null === object\r\n            if ( obj === null ) {\r\n                return \"null\";\r\n            }\r\n\r\n            var match = toString.call( obj ).match(/^\\[object\\s(.*)\\]$/),\r\n                type = match && match[1] || \"\";\r\n\r\n            switch ( type ) {\r\n                case \"Number\":\r\n                    if ( isNaN(obj) ) {\r\n                        return \"nan\";\r\n                    }\r\n                    return \"number\";\r\n                case \"String\":\r\n                case \"Boolean\":\r\n                case \"Array\":\r\n                case \"Date\":\r\n                case \"RegExp\":\r\n                case \"Function\":\r\n                    return type.toLowerCase();\r\n            }\r\n            if ( typeof obj === \"object\" ) {\r\n                return \"object\";\r\n            }\r\n            return undefined;\r\n        },\r\n\r\n        push: function( result, actual, expected, message ) {\r\n            if ( !config.current ) {\r\n                throw new Error( \"assertion outside test context, was \" + sourceFromStacktrace() );\r\n            }\r\n\r\n            var output, source,\r\n                details = {\r\n                    module: config.current.module,\r\n                    name: config.current.testName,\r\n                    result: result,\r\n                    message: message,\r\n                    actual: actual,\r\n                    expected: expected\r\n                };\r\n\r\n            message = escapeText( message ) || ( result ? \"okay\" : \"failed\" );\r\n            message = \"<span class='test-message'>\" + message + \"</span>\";\r\n            output = message;\r\n\r\n            if ( !result ) {\r\n                expected = escapeText( QUnit.jsDump.parse(expected) );\r\n                actual = escapeText( QUnit.jsDump.parse(actual) );\r\n                output += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" + expected + \"</pre></td></tr>\";\r\n\r\n                if ( actual !== expected ) {\r\n                    output += \"<tr class='test-actual'><th>Result: </th><td><pre>\" + actual + \"</pre></td></tr>\";\r\n                    output += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" + QUnit.diff( expected, actual ) + \"</pre></td></tr>\";\r\n                }\r\n\r\n                source = sourceFromStacktrace();\r\n\r\n                if ( source ) {\r\n                    details.source = source;\r\n                    output += \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeText( source ) + \"</pre></td></tr>\";\r\n                }\r\n\r\n                output += \"</table>\";\r\n            }\r\n\r\n            runLoggingCallbacks( \"log\", QUnit, details );\r\n\r\n            config.current.assertions.push({\r\n                result: !!result,\r\n                message: output\r\n            });\r\n        },\r\n\r\n        pushFailure: function( message, source, actual ) {\r\n            if ( !config.current ) {\r\n                throw new Error( \"pushFailure() assertion outside test context, was \" + sourceFromStacktrace(2) );\r\n            }\r\n\r\n            var output,\r\n                details = {\r\n                    module: config.current.module,\r\n                    name: config.current.testName,\r\n                    result: false,\r\n                    message: message\r\n                };\r\n\r\n            message = escapeText( message ) || \"error\";\r\n            message = \"<span class='test-message'>\" + message + \"</span>\";\r\n            output = message;\r\n\r\n            output += \"<table>\";\r\n\r\n            if ( actual ) {\r\n                output += \"<tr class='test-actual'><th>Result: </th><td><pre>\" + escapeText( actual ) + \"</pre></td></tr>\";\r\n            }\r\n\r\n            if ( source ) {\r\n                details.source = source;\r\n                output += \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeText( source ) + \"</pre></td></tr>\";\r\n            }\r\n\r\n            output += \"</table>\";\r\n\r\n            runLoggingCallbacks( \"log\", QUnit, details );\r\n\r\n            config.current.assertions.push({\r\n                result: false,\r\n                message: output\r\n            });\r\n        },\r\n\r\n        url: function( params ) {\r\n            params = extend( extend( {}, QUnit.urlParams ), params );\r\n            var key,\r\n                querystring = \"?\";\r\n\r\n            for ( key in params ) {\r\n                if ( hasOwn.call( params, key ) ) {\r\n                    querystring += encodeURIComponent( key ) + \"=\" +\r\n                        encodeURIComponent( params[ key ] ) + \"&\";\r\n                }\r\n            }\r\n            return window.location.protocol + \"//\" + window.location.host +\r\n                window.location.pathname + querystring.slice( 0, -1 );\r\n        },\r\n\r\n        extend: extend,\r\n        id: id,\r\n        addEvent: addEvent,\r\n        addClass: addClass,\r\n        hasClass: hasClass,\r\n        removeClass: removeClass\r\n        // load, equiv, jsDump, diff: Attached later\r\n    });\r\n\r\n    /**\r\n     * @deprecated: Created for backwards compatibility with test runner that set the hook function\r\n     * into QUnit.{hook}, instead of invoking it and passing the hook function.\r\n     * QUnit.constructor is set to the empty F() above so that we can add to it's prototype here.\r\n     * Doing this allows us to tell if the following methods have been overwritten on the actual\r\n     * QUnit object.\r\n     */\r\n    extend( QUnit.constructor.prototype, {\r\n\r\n        // Logging callbacks; all receive a single argument with the listed properties\r\n        // run test/logs.html for any related changes\r\n        begin: registerLoggingCallback( \"begin\" ),\r\n\r\n        // done: { failed, passed, total, runtime }\r\n        done: registerLoggingCallback( \"done\" ),\r\n\r\n        // log: { result, actual, expected, message }\r\n        log: registerLoggingCallback( \"log\" ),\r\n\r\n        // testStart: { name }\r\n        testStart: registerLoggingCallback( \"testStart\" ),\r\n\r\n        // testDone: { name, failed, passed, total, runtime }\r\n        testDone: registerLoggingCallback( \"testDone\" ),\r\n\r\n        // moduleStart: { name }\r\n        moduleStart: registerLoggingCallback( \"moduleStart\" ),\r\n\r\n        // moduleDone: { name, failed, passed, total }\r\n        moduleDone: registerLoggingCallback( \"moduleDone\" )\r\n    });\r\n\r\n    if ( !defined.document || document.readyState === \"complete\" ) {\r\n        config.autorun = true;\r\n    }\r\n\r\n    QUnit.load = function() {\r\n        runLoggingCallbacks( \"begin\", QUnit, {} );\r\n\r\n        // Initialize the config, saving the execution queue\r\n        var banner, filter, i, j, label, len, main, ol, toolbar, val, selection,\r\n            urlConfigContainer, moduleFilter, userAgent,\r\n            numModules = 0,\r\n            moduleNames = [],\r\n            moduleFilterHtml = \"\",\r\n            urlConfigHtml = \"\",\r\n            oldconfig = extend( {}, config );\r\n\r\n        QUnit.init();\r\n        extend(config, oldconfig);\r\n\r\n        config.blocking = false;\r\n\r\n        len = config.urlConfig.length;\r\n\r\n        for ( i = 0; i < len; i++ ) {\r\n            val = config.urlConfig[i];\r\n            if ( typeof val === \"string\" ) {\r\n                val = {\r\n                    id: val,\r\n                    label: val\r\n                };\r\n            }\r\n            config[ val.id ] = QUnit.urlParams[ val.id ];\r\n            if ( !val.value || typeof val.value === \"string\" ) {\r\n                urlConfigHtml += \"<input id='qunit-urlconfig-\" + escapeText( val.id ) +\r\n                    \"' name='\" + escapeText( val.id ) +\r\n                    \"' type='checkbox'\" +\r\n                    ( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\r\n                    ( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\r\n                    \" title='\" + escapeText( val.tooltip ) +\r\n                    \"'><label for='qunit-urlconfig-\" + escapeText( val.id ) +\r\n                    \"' title='\" + escapeText( val.tooltip ) + \"'>\" + val.label + \"</label>\";\r\n            } else {\r\n                urlConfigHtml += \"<label for='qunit-urlconfig-\" + escapeText( val.id ) +\r\n                    \"' title='\" + escapeText( val.tooltip ) +\r\n                    \"'>\" + val.label +\r\n                    \": </label><select id='qunit-urlconfig-\" + escapeText( val.id ) +\r\n                    \"' name='\" + escapeText( val.id ) +\r\n                    \"' title='\" + escapeText( val.tooltip ) +\r\n                    \"'><option></option>\";\r\n                selection = false;\r\n                if ( QUnit.is( \"array\", val.value ) ) {\r\n                    for ( j = 0; j < val.value.length; j++ ) {\r\n                        urlConfigHtml += \"<option value='\" + escapeText( val.value[j] ) + \"'\" +\r\n                            ( config[ val.id ] === val.value[j] ?\r\n                                (selection = true) && \" selected='selected'\" :\r\n                                \"\" ) +\r\n                            \">\" + escapeText( val.value[j] ) + \"</option>\";\r\n                    }\r\n                } else {\r\n                    for ( j in val.value ) {\r\n                        if ( hasOwn.call( val.value, j ) ) {\r\n                            urlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\r\n                                ( config[ val.id ] === j ?\r\n                                    (selection = true) && \" selected='selected'\" :\r\n                                    \"\" ) +\r\n                                \">\" + escapeText( val.value[j] ) + \"</option>\";\r\n                        }\r\n                    }\r\n                }\r\n                if ( config[ val.id ] && !selection ) {\r\n                    urlConfigHtml += \"<option value='\" + escapeText( config[ val.id ] ) +\r\n                        \"' selected='selected' disabled='disabled'>\" +\r\n                        escapeText( config[ val.id ] ) +\r\n                        \"</option>\";\r\n                }\r\n                urlConfigHtml += \"</select>\";\r\n            }\r\n        }\r\n        for ( i in config.modules ) {\r\n            if ( config.modules.hasOwnProperty( i ) ) {\r\n                moduleNames.push(i);\r\n            }\r\n        }\r\n        numModules = moduleNames.length;\r\n        moduleNames.sort( function( a, b ) {\r\n            return a.localeCompare( b );\r\n        });\r\n        moduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label><select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\r\n            ( config.module === undefined  ? \"selected='selected'\" : \"\" ) +\r\n            \">< All Modules ></option>\";\r\n\r\n\r\n        for ( i = 0; i < numModules; i++) {\r\n            moduleFilterHtml += \"<option value='\" + escapeText( encodeURIComponent(moduleNames[i]) ) + \"' \" +\r\n                ( config.module === moduleNames[i] ? \"selected='selected'\" : \"\" ) +\r\n                \">\" + escapeText(moduleNames[i]) + \"</option>\";\r\n        }\r\n        moduleFilterHtml += \"</select>\";\r\n\r\n        // `userAgent` initialized at top of scope\r\n        userAgent = id( \"qunit-userAgent\" );\r\n        if ( userAgent ) {\r\n            userAgent.innerHTML = navigator.userAgent;\r\n        }\r\n\r\n        // `banner` initialized at top of scope\r\n        banner = id( \"qunit-header\" );\r\n        if ( banner ) {\r\n            banner.innerHTML = \"<a href='\" + QUnit.url({ filter: undefined, module: undefined, testNumber: undefined }) + \"'>\" + banner.innerHTML + \"</a> \";\r\n        }\r\n\r\n        // `toolbar` initialized at top of scope\r\n        toolbar = id( \"qunit-testrunner-toolbar\" );\r\n        if ( toolbar ) {\r\n            // `filter` initialized at top of scope\r\n            filter = document.createElement( \"input\" );\r\n            filter.type = \"checkbox\";\r\n            filter.id = \"qunit-filter-pass\";\r\n\r\n            addEvent( filter, \"click\", function() {\r\n                var tmp,\r\n                    ol = id( \"qunit-tests\" );\r\n\r\n                if ( filter.checked ) {\r\n                    ol.className = ol.className + \" hidepass\";\r\n                } else {\r\n                    tmp = \" \" + ol.className.replace( /[\\n\\t\\r]/g, \" \" ) + \" \";\r\n                    ol.className = tmp.replace( / hidepass /, \" \" );\r\n                }\r\n                if ( defined.sessionStorage ) {\r\n                    if (filter.checked) {\r\n                        sessionStorage.setItem( \"qunit-filter-passed-tests\", \"true\" );\r\n                    } else {\r\n                        sessionStorage.removeItem( \"qunit-filter-passed-tests\" );\r\n                    }\r\n                }\r\n            });\r\n\r\n            if ( config.hidepassed || defined.sessionStorage && sessionStorage.getItem( \"qunit-filter-passed-tests\" ) ) {\r\n                filter.checked = true;\r\n                // `ol` initialized at top of scope\r\n                ol = id( \"qunit-tests\" );\r\n                ol.className = ol.className + \" hidepass\";\r\n            }\r\n            toolbar.appendChild( filter );\r\n\r\n            // `label` initialized at top of scope\r\n            label = document.createElement( \"label\" );\r\n            label.setAttribute( \"for\", \"qunit-filter-pass\" );\r\n            label.setAttribute( \"title\", \"Only show tests and assertions that fail. Stored in sessionStorage.\" );\r\n            label.innerHTML = \"Hide passed tests\";\r\n            toolbar.appendChild( label );\r\n\r\n            urlConfigContainer = document.createElement(\"span\");\r\n            urlConfigContainer.innerHTML = urlConfigHtml;\r\n            // For oldIE support:\r\n            // * Add handlers to the individual elements instead of the container\r\n            // * Use \"click\" instead of \"change\" for checkboxes\r\n            // * Fallback from event.target to event.srcElement\r\n            addEvents( urlConfigContainer.getElementsByTagName(\"input\"), \"click\", function( event ) {\r\n                var params = {},\r\n                    target = event.target || event.srcElement;\r\n                params[ target.name ] = target.checked ?\r\n                    target.defaultValue || true :\r\n                    undefined;\r\n                window.location = QUnit.url( params );\r\n            });\r\n            addEvents( urlConfigContainer.getElementsByTagName(\"select\"), \"change\", function( event ) {\r\n                var params = {},\r\n                    target = event.target || event.srcElement;\r\n                params[ target.name ] = target.options[ target.selectedIndex ].value || undefined;\r\n                window.location = QUnit.url( params );\r\n            });\r\n            toolbar.appendChild( urlConfigContainer );\r\n\r\n            if (numModules > 1) {\r\n                moduleFilter = document.createElement( \"span\" );\r\n                moduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\r\n                moduleFilter.innerHTML = moduleFilterHtml;\r\n                addEvent( moduleFilter.lastChild, \"change\", function() {\r\n                    var selectBox = moduleFilter.getElementsByTagName(\"select\")[0],\r\n                        selectedModule = decodeURIComponent(selectBox.options[selectBox.selectedIndex].value);\r\n\r\n                    window.location = QUnit.url({\r\n                        module: ( selectedModule === \"\" ) ? undefined : selectedModule,\r\n                        // Remove any existing filters\r\n                        filter: undefined,\r\n                        testNumber: undefined\r\n                    });\r\n                });\r\n                toolbar.appendChild(moduleFilter);\r\n            }\r\n        }\r\n\r\n        // `main` initialized at top of scope\r\n        main = id( \"qunit-fixture\" );\r\n        if ( main ) {\r\n            config.fixture = main.innerHTML;\r\n        }\r\n\r\n        if ( config.autostart ) {\r\n            QUnit.start();\r\n        }\r\n    };\r\n\r\n    if ( defined.document ) {\r\n        addEvent( window, \"load\", QUnit.load );\r\n    }\r\n\r\n// `onErrorFnPrev` initialized at top of scope\r\n// Preserve other handlers\r\n    onErrorFnPrev = window.onerror;\r\n\r\n// Cover uncaught exceptions\r\n// Returning true will suppress the default browser handler,\r\n// returning false will let it run.\r\n    window.onerror = function ( error, filePath, linerNr ) {\r\n        var ret = false;\r\n        if ( onErrorFnPrev ) {\r\n            ret = onErrorFnPrev( error, filePath, linerNr );\r\n        }\r\n\r\n        // Treat return value as window.onerror itself does,\r\n        // Only do our handling if not suppressed.\r\n        if ( ret !== true ) {\r\n            if ( QUnit.config.current ) {\r\n                if ( QUnit.config.current.ignoreGlobalErrors ) {\r\n                    return true;\r\n                }\r\n                QUnit.pushFailure( error, filePath + \":\" + linerNr );\r\n            } else {\r\n                QUnit.test( \"global failure\", extend( function() {\r\n                    QUnit.pushFailure( error, filePath + \":\" + linerNr );\r\n                }, { validTest: validTest } ) );\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return ret;\r\n    };\r\n\r\n    function done() {\r\n        config.autorun = true;\r\n\r\n        // Log the last module results\r\n        if ( config.previousModule ) {\r\n            runLoggingCallbacks( \"moduleDone\", QUnit, {\r\n                name: config.previousModule,\r\n                failed: config.moduleStats.bad,\r\n                passed: config.moduleStats.all - config.moduleStats.bad,\r\n                total: config.moduleStats.all\r\n            });\r\n        }\r\n        delete config.previousModule;\r\n\r\n        var i, key,\r\n            banner = id( \"qunit-banner\" ),\r\n            tests = id( \"qunit-tests\" ),\r\n            runtime = +new Date() - config.started,\r\n            passed = config.stats.all - config.stats.bad,\r\n            html = [\r\n                \"Tests completed in \",\r\n                runtime,\r\n                \" milliseconds.<br/>\",\r\n                \"<span class='passed'>\",\r\n                passed,\r\n                \"</span> assertions of <span class='total'>\",\r\n                config.stats.all,\r\n                \"</span> passed, <span class='failed'>\",\r\n                config.stats.bad,\r\n                \"</span> failed.\"\r\n            ].join( \"\" );\r\n\r\n        if ( banner ) {\r\n            banner.className = ( config.stats.bad ? \"qunit-fail\" : \"qunit-pass\" );\r\n        }\r\n\r\n        if ( tests ) {\r\n            id( \"qunit-testresult\" ).innerHTML = html;\r\n        }\r\n\r\n        if ( config.altertitle && defined.document && document.title ) {\r\n            // show ✖ for good, ✔ for bad suite result in title\r\n            // use escape sequences in case file gets loaded with non-utf-8-charset\r\n            document.title = [\r\n                ( config.stats.bad ? \"\\u2716\" : \"\\u2714\" ),\r\n                document.title.replace( /^[\\u2714\\u2716] /i, \"\" )\r\n            ].join( \" \" );\r\n        }\r\n\r\n        // clear own sessionStorage items if all tests passed\r\n        if ( config.reorder && defined.sessionStorage && config.stats.bad === 0 ) {\r\n            // `key` & `i` initialized at top of scope\r\n            for ( i = 0; i < sessionStorage.length; i++ ) {\r\n                key = sessionStorage.key( i++ );\r\n                if ( key.indexOf( \"qunit-test-\" ) === 0 ) {\r\n                    sessionStorage.removeItem( key );\r\n                }\r\n            }\r\n        }\r\n\r\n        // scroll back to top to show results\r\n        if ( config.scrolltop && window.scrollTo ) {\r\n            window.scrollTo(0, 0);\r\n        }\r\n\r\n        runLoggingCallbacks( \"done\", QUnit, {\r\n            failed: config.stats.bad,\r\n            passed: passed,\r\n            total: config.stats.all,\r\n            runtime: runtime\r\n        });\r\n    }\r\n\r\n    /** @return Boolean: true if this test should be ran */\r\n    function validTest( test ) {\r\n        var include,\r\n            filter = config.filter && config.filter.toLowerCase(),\r\n            module = config.module && config.module.toLowerCase(),\r\n            fullName = ( test.module + \": \" + test.testName ).toLowerCase();\r\n\r\n        // Internally-generated tests are always valid\r\n        if ( test.callback && test.callback.validTest === validTest ) {\r\n            delete test.callback.validTest;\r\n            return true;\r\n        }\r\n\r\n        if ( config.testNumber.length > 0 ) {\r\n            if ( inArray( test.testNumber, config.testNumber ) < 0 ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if ( module && ( !test.module || test.module.toLowerCase() !== module ) ) {\r\n            return false;\r\n        }\r\n\r\n        if ( !filter ) {\r\n            return true;\r\n        }\r\n\r\n        include = filter.charAt( 0 ) !== \"!\";\r\n        if ( !include ) {\r\n            filter = filter.slice( 1 );\r\n        }\r\n\r\n        // If the filter matches, we need to honour include\r\n        if ( fullName.indexOf( filter ) !== -1 ) {\r\n            return include;\r\n        }\r\n\r\n        // Otherwise, do the opposite\r\n        return !include;\r\n    }\r\n\r\n// so far supports only Firefox, Chrome and Opera (buggy), Safari (for real exceptions)\r\n// Later Safari and IE10 are supposed to support error.stack as well\r\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\r\n    function extractStacktrace( e, offset ) {\r\n        offset = offset === undefined ? 3 : offset;\r\n\r\n        var stack, include, i;\r\n\r\n        if ( e.stacktrace ) {\r\n            // Opera\r\n            return e.stacktrace.split( \"\\n\" )[ offset + 3 ];\r\n        } else if ( e.stack ) {\r\n            // Firefox, Chrome\r\n            stack = e.stack.split( \"\\n\" );\r\n            if (/^error$/i.test( stack[0] ) ) {\r\n                stack.shift();\r\n            }\r\n            if ( fileName ) {\r\n                include = [];\r\n                for ( i = offset; i < stack.length; i++ ) {\r\n                    if ( stack[ i ].indexOf( fileName ) !== -1 ) {\r\n                        break;\r\n                    }\r\n                    include.push( stack[ i ] );\r\n                }\r\n                if ( include.length ) {\r\n                    return include.join( \"\\n\" );\r\n                }\r\n            }\r\n            return stack[ offset ];\r\n        } else if ( e.sourceURL ) {\r\n            // Safari, PhantomJS\r\n            // hopefully one day Safari provides actual stacktraces\r\n            // exclude useless self-reference for generated Error objects\r\n            if ( /qunit.js$/.test( e.sourceURL ) ) {\r\n                return;\r\n            }\r\n            // for actual exceptions, this is useful\r\n            return e.sourceURL + \":\" + e.line;\r\n        }\r\n    }\r\n    function sourceFromStacktrace( offset ) {\r\n        try {\r\n            throw new Error();\r\n        } catch ( e ) {\r\n            return extractStacktrace( e, offset );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Escape text for attribute or text content.\r\n     */\r\n    function escapeText( s ) {\r\n        if ( !s ) {\r\n            return \"\";\r\n        }\r\n        s = s + \"\";\r\n        // Both single quotes and double quotes (for attributes)\r\n        return s.replace( /['\"<>&]/g, function( s ) {\r\n            switch( s ) {\r\n                case \"'\":\r\n                    return \"&#039;\";\r\n                case \"\\\"\":\r\n                    return \"&quot;\";\r\n                case \"<\":\r\n                    return \"&lt;\";\r\n                case \">\":\r\n                    return \"&gt;\";\r\n                case \"&\":\r\n                    return \"&amp;\";\r\n            }\r\n        });\r\n    }\r\n\r\n    function synchronize( callback, last ) {\r\n        config.queue.push( callback );\r\n\r\n        if ( config.autorun && !config.blocking ) {\r\n            process( last );\r\n        }\r\n    }\r\n\r\n    function process( last ) {\r\n        function next() {\r\n            process( last );\r\n        }\r\n        var start = new Date().getTime();\r\n        config.depth = config.depth ? config.depth + 1 : 1;\r\n\r\n        while ( config.queue.length && !config.blocking ) {\r\n            if ( !defined.setTimeout || config.updateRate <= 0 || ( ( new Date().getTime() - start ) < config.updateRate ) ) {\r\n                config.queue.shift()();\r\n            } else {\r\n                setTimeout( next, 13 );\r\n                break;\r\n            }\r\n        }\r\n        config.depth--;\r\n        if ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\r\n            done();\r\n        }\r\n    }\r\n\r\n    function saveGlobal() {\r\n        config.pollution = [];\r\n\r\n        if ( config.noglobals ) {\r\n            for ( var key in window ) {\r\n                if ( hasOwn.call( window, key ) ) {\r\n                    // in Opera sometimes DOM element ids show up here, ignore them\r\n                    if ( /^qunit-test-output/.test( key ) ) {\r\n                        continue;\r\n                    }\r\n                    config.pollution.push( key );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkPollution() {\r\n        var newGlobals,\r\n            deletedGlobals,\r\n            old = config.pollution;\r\n\r\n        saveGlobal();\r\n\r\n        newGlobals = diff( config.pollution, old );\r\n        if ( newGlobals.length > 0 ) {\r\n            QUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join(\", \") );\r\n        }\r\n\r\n        deletedGlobals = diff( old, config.pollution );\r\n        if ( deletedGlobals.length > 0 ) {\r\n            QUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join(\", \") );\r\n        }\r\n    }\r\n\r\n// returns a new Array with the elements that are in a but not in b\r\n    function diff( a, b ) {\r\n        var i, j,\r\n            result = a.slice();\r\n\r\n        for ( i = 0; i < result.length; i++ ) {\r\n            for ( j = 0; j < b.length; j++ ) {\r\n                if ( result[i] === b[j] ) {\r\n                    result.splice( i, 1 );\r\n                    i--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function extend( a, b ) {\r\n        for ( var prop in b ) {\r\n            if ( hasOwn.call( b, prop ) ) {\r\n                // Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\r\n                if ( !( prop === \"constructor\" && a === window ) ) {\r\n                    if ( b[ prop ] === undefined ) {\r\n                        delete a[ prop ];\r\n                    } else {\r\n                        a[ prop ] = b[ prop ];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} elem\r\n     * @param {string} type\r\n     * @param {Function} fn\r\n     */\r\n    function addEvent( elem, type, fn ) {\r\n        if ( elem.addEventListener ) {\r\n\r\n            // Standards-based browsers\r\n            elem.addEventListener( type, fn, false );\r\n        } else if ( elem.attachEvent ) {\r\n\r\n            // support: IE <9\r\n            elem.attachEvent( \"on\" + type, fn );\r\n        } else {\r\n\r\n            // Caller must ensure support for event listeners is present\r\n            throw new Error( \"addEvent() was called in a context without event listener support\" );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Array|NodeList} elems\r\n     * @param {string} type\r\n     * @param {Function} fn\r\n     */\r\n    function addEvents( elems, type, fn ) {\r\n        var i = elems.length;\r\n        while ( i-- ) {\r\n            addEvent( elems[i], type, fn );\r\n        }\r\n    }\r\n\r\n    function hasClass( elem, name ) {\r\n        return (\" \" + elem.className + \" \").indexOf(\" \" + name + \" \") > -1;\r\n    }\r\n\r\n    function addClass( elem, name ) {\r\n        if ( !hasClass( elem, name ) ) {\r\n            elem.className += (elem.className ? \" \" : \"\") + name;\r\n        }\r\n    }\r\n\r\n    function removeClass( elem, name ) {\r\n        var set = \" \" + elem.className + \" \";\r\n        // Class name may appear multiple times\r\n        while ( set.indexOf(\" \" + name + \" \") > -1 ) {\r\n            set = set.replace(\" \" + name + \" \" , \" \");\r\n        }\r\n        // If possible, trim it for prettiness, but not necessarily\r\n        elem.className = typeof set.trim === \"function\" ? set.trim() : set.replace(/^\\s+|\\s+$/g, \"\");\r\n    }\r\n\r\n    function id( name ) {\r\n        return defined.document && document.getElementById && document.getElementById( name );\r\n    }\r\n\r\n    function registerLoggingCallback( key ) {\r\n        return function( callback ) {\r\n            config[key].push( callback );\r\n        };\r\n    }\r\n\r\n// Supports deprecated method of completely overwriting logging callbacks\r\n    function runLoggingCallbacks( key, scope, args ) {\r\n        var i, callbacks;\r\n        if ( QUnit.hasOwnProperty( key ) ) {\r\n            QUnit[ key ].call(scope, args );\r\n        } else {\r\n            callbacks = config[ key ];\r\n            for ( i = 0; i < callbacks.length; i++ ) {\r\n                callbacks[ i ].call( scope, args );\r\n            }\r\n        }\r\n    }\r\n\r\n// from jquery.js\r\n    function inArray( elem, array ) {\r\n        if ( array.indexOf ) {\r\n            return array.indexOf( elem );\r\n        }\r\n\r\n        for ( var i = 0, length = array.length; i < length; i++ ) {\r\n            if ( array[ i ] === elem ) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function Test( settings ) {\r\n        extend( this, settings );\r\n        this.assertions = [];\r\n        this.testNumber = ++Test.count;\r\n    }\r\n\r\n    Test.count = 0;\r\n\r\n    Test.prototype = {\r\n        init: function() {\r\n            var a, b, li,\r\n                tests = id( \"qunit-tests\" );\r\n\r\n            if ( tests ) {\r\n                b = document.createElement( \"strong\" );\r\n                b.innerHTML = this.nameHtml;\r\n\r\n                // `a` initialized at top of scope\r\n                a = document.createElement( \"a\" );\r\n                a.innerHTML = \"Rerun\";\r\n                a.href = QUnit.url({ testNumber: this.testNumber });\r\n\r\n                li = document.createElement( \"li\" );\r\n                li.appendChild( b );\r\n                li.appendChild( a );\r\n                li.className = \"running\";\r\n                li.id = this.id = \"qunit-test-output\" + testId++;\r\n\r\n                tests.appendChild( li );\r\n            }\r\n        },\r\n        setup: function() {\r\n            if (\r\n            // Emit moduleStart when we're switching from one module to another\r\n                this.module !== config.previousModule ||\r\n                    // They could be equal (both undefined) but if the previousModule property doesn't\r\n                    // yet exist it means this is the first test in a suite that isn't wrapped in a\r\n                    // module, in which case we'll just emit a moduleStart event for 'undefined'.\r\n                    // Without this, reporters can get testStart before moduleStart  which is a problem.\r\n                    !hasOwn.call( config, \"previousModule\" )\r\n                ) {\r\n                if ( hasOwn.call( config, \"previousModule\" ) ) {\r\n                    runLoggingCallbacks( \"moduleDone\", QUnit, {\r\n                        name: config.previousModule,\r\n                        failed: config.moduleStats.bad,\r\n                        passed: config.moduleStats.all - config.moduleStats.bad,\r\n                        total: config.moduleStats.all\r\n                    });\r\n                }\r\n                config.previousModule = this.module;\r\n                config.moduleStats = { all: 0, bad: 0 };\r\n                runLoggingCallbacks( \"moduleStart\", QUnit, {\r\n                    name: this.module\r\n                });\r\n            }\r\n\r\n            config.current = this;\r\n\r\n            this.testEnvironment = extend({\r\n                setup: function() {},\r\n                teardown: function() {}\r\n            }, this.moduleTestEnvironment );\r\n\r\n            this.started = +new Date();\r\n            runLoggingCallbacks( \"testStart\", QUnit, {\r\n                name: this.testName,\r\n                module: this.module\r\n            });\r\n\r\n            /*jshint camelcase:false */\r\n\r\n\r\n            /**\r\n             * Expose the current test environment.\r\n             *\r\n             * @deprecated since 1.12.0: Use QUnit.config.current.testEnvironment instead.\r\n             */\r\n            QUnit.current_testEnvironment = this.testEnvironment;\r\n\r\n            /*jshint camelcase:true */\r\n\r\n            if ( !config.pollution ) {\r\n                saveGlobal();\r\n            }\r\n            if ( config.notrycatch ) {\r\n                this.testEnvironment.setup.call( this.testEnvironment, QUnit.assert );\r\n                return;\r\n            }\r\n            try {\r\n                this.testEnvironment.setup.call( this.testEnvironment, QUnit.assert );\r\n            } catch( e ) {\r\n                QUnit.pushFailure( \"Setup failed on \" + this.testName + \": \" + ( e.message || e ), extractStacktrace( e, 1 ) );\r\n            }\r\n        },\r\n        run: function() {\r\n            config.current = this;\r\n\r\n            var running = id( \"qunit-testresult\" );\r\n\r\n            if ( running ) {\r\n                running.innerHTML = \"Running: <br/>\" + this.nameHtml;\r\n            }\r\n\r\n            if ( this.async ) {\r\n                QUnit.stop();\r\n            }\r\n\r\n            this.callbackStarted = +new Date();\r\n\r\n            if ( config.notrycatch ) {\r\n                this.callback.call( this.testEnvironment, QUnit.assert );\r\n                this.callbackRuntime = +new Date() - this.callbackStarted;\r\n                return;\r\n            }\r\n\r\n            try {\r\n                this.callback.call( this.testEnvironment, QUnit.assert );\r\n                this.callbackRuntime = +new Date() - this.callbackStarted;\r\n            } catch( e ) {\r\n                this.callbackRuntime = +new Date() - this.callbackStarted;\r\n\r\n                QUnit.pushFailure( \"Died on test #\" + (this.assertions.length + 1) + \" \" + this.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\r\n                // else next test will carry the responsibility\r\n                saveGlobal();\r\n\r\n                // Restart the tests if they're blocking\r\n                if ( config.blocking ) {\r\n                    QUnit.start();\r\n                }\r\n            }\r\n        },\r\n        teardown: function() {\r\n            config.current = this;\r\n            if ( config.notrycatch ) {\r\n                if ( typeof this.callbackRuntime === \"undefined\" ) {\r\n                    this.callbackRuntime = +new Date() - this.callbackStarted;\r\n                }\r\n                this.testEnvironment.teardown.call( this.testEnvironment, QUnit.assert );\r\n                return;\r\n            } else {\r\n                try {\r\n                    this.testEnvironment.teardown.call( this.testEnvironment, QUnit.assert );\r\n                } catch( e ) {\r\n                    QUnit.pushFailure( \"Teardown failed on \" + this.testName + \": \" + ( e.message || e ), extractStacktrace( e, 1 ) );\r\n                }\r\n            }\r\n            checkPollution();\r\n        },\r\n        finish: function() {\r\n            config.current = this;\r\n            if ( config.requireExpects && this.expected === null ) {\r\n                QUnit.pushFailure( \"Expected number of assertions to be defined, but expect() was not called.\", this.stack );\r\n            } else if ( this.expected !== null && this.expected !== this.assertions.length ) {\r\n                QUnit.pushFailure( \"Expected \" + this.expected + \" assertions, but \" + this.assertions.length + \" were run\", this.stack );\r\n            } else if ( this.expected === null && !this.assertions.length ) {\r\n                QUnit.pushFailure( \"Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.\", this.stack );\r\n            }\r\n\r\n            var i, assertion, a, b, time, li, ol,\r\n                test = this,\r\n                good = 0,\r\n                bad = 0,\r\n                tests = id( \"qunit-tests\" );\r\n\r\n            this.runtime = +new Date() - this.started;\r\n            config.stats.all += this.assertions.length;\r\n            config.moduleStats.all += this.assertions.length;\r\n\r\n            if ( tests ) {\r\n                ol = document.createElement( \"ol\" );\r\n                ol.className = \"qunit-assert-list\";\r\n\r\n                for ( i = 0; i < this.assertions.length; i++ ) {\r\n                    assertion = this.assertions[i];\r\n\r\n                    li = document.createElement( \"li\" );\r\n                    li.className = assertion.result ? \"pass\" : \"fail\";\r\n                    li.innerHTML = assertion.message || ( assertion.result ? \"okay\" : \"failed\" );\r\n                    ol.appendChild( li );\r\n\r\n                    if ( assertion.result ) {\r\n                        good++;\r\n                    } else {\r\n                        bad++;\r\n                        config.stats.bad++;\r\n                        config.moduleStats.bad++;\r\n                    }\r\n                }\r\n\r\n                // store result when possible\r\n                if ( QUnit.config.reorder && defined.sessionStorage ) {\r\n                    if ( bad ) {\r\n                        sessionStorage.setItem( \"qunit-test-\" + this.module + \"-\" + this.testName, bad );\r\n                    } else {\r\n                        sessionStorage.removeItem( \"qunit-test-\" + this.module + \"-\" + this.testName );\r\n                    }\r\n                }\r\n\r\n                if ( bad === 0 ) {\r\n                    addClass( ol, \"qunit-collapsed\" );\r\n                }\r\n\r\n                // `b` initialized at top of scope\r\n                b = document.createElement( \"strong\" );\r\n                b.innerHTML = this.nameHtml + \" <b class='counts'>(<b class='failed'>\" + bad + \"</b>, <b class='passed'>\" + good + \"</b>, \" + this.assertions.length + \")</b>\";\r\n\r\n                addEvent(b, \"click\", function() {\r\n                    var next = b.parentNode.lastChild,\r\n                        collapsed = hasClass( next, \"qunit-collapsed\" );\r\n                    ( collapsed ? removeClass : addClass )( next, \"qunit-collapsed\" );\r\n                });\r\n\r\n                addEvent(b, \"dblclick\", function( e ) {\r\n                    var target = e && e.target ? e.target : window.event.srcElement;\r\n                    if ( target.nodeName.toLowerCase() === \"span\" || target.nodeName.toLowerCase() === \"b\" ) {\r\n                        target = target.parentNode;\r\n                    }\r\n                    if ( window.location && target.nodeName.toLowerCase() === \"strong\" ) {\r\n                        window.location = QUnit.url({ testNumber: test.testNumber });\r\n                    }\r\n                });\r\n\r\n                // `time` initialized at top of scope\r\n                time = document.createElement( \"span\" );\r\n                time.className = \"runtime\";\r\n                time.innerHTML = this.runtime + \" ms\";\r\n\r\n                // `li` initialized at top of scope\r\n                li = id( this.id );\r\n                li.className = bad ? \"fail\" : \"pass\";\r\n                li.removeChild( li.firstChild );\r\n                a = li.firstChild;\r\n                li.appendChild( b );\r\n                li.appendChild( a );\r\n                li.appendChild( time );\r\n                li.appendChild( ol );\r\n\r\n            } else {\r\n                for ( i = 0; i < this.assertions.length; i++ ) {\r\n                    if ( !this.assertions[i].result ) {\r\n                        bad++;\r\n                        config.stats.bad++;\r\n                        config.moduleStats.bad++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            runLoggingCallbacks( \"testDone\", QUnit, {\r\n                name: this.testName,\r\n                module: this.module,\r\n                failed: bad,\r\n                passed: this.assertions.length - bad,\r\n                total: this.assertions.length,\r\n                runtime: this.runtime,\r\n                // DEPRECATED: this property will be removed in 2.0.0, use runtime instead\r\n                duration: this.runtime\r\n            });\r\n\r\n            QUnit.reset();\r\n\r\n            config.current = undefined;\r\n        },\r\n\r\n        queue: function() {\r\n            var bad,\r\n                test = this;\r\n\r\n            synchronize(function() {\r\n                test.init();\r\n            });\r\n            function run() {\r\n                // each of these can by async\r\n                synchronize(function() {\r\n                    test.setup();\r\n                });\r\n                synchronize(function() {\r\n                    test.run();\r\n                });\r\n                synchronize(function() {\r\n                    test.teardown();\r\n                });\r\n                synchronize(function() {\r\n                    test.finish();\r\n                });\r\n            }\r\n\r\n            // `bad` initialized at top of scope\r\n            // defer when previous test run passed, if storage is available\r\n            bad = QUnit.config.reorder && defined.sessionStorage &&\r\n                +sessionStorage.getItem( \"qunit-test-\" + this.module + \"-\" + this.testName );\r\n\r\n            if ( bad ) {\r\n                run();\r\n            } else {\r\n                synchronize( run, true );\r\n            }\r\n        }\r\n    };\r\n\r\n// `assert` initialized at top of scope\r\n// Assert helpers\r\n// All of these must either call QUnit.push() or manually do:\r\n// - runLoggingCallbacks( \"log\", .. );\r\n// - config.current.assertions.push({ .. });\r\n    assert = QUnit.assert = {\r\n        /**\r\n         * Asserts rough true-ish result.\r\n         * @name ok\r\n         * @function\r\n         * @example ok( \"asdfasdf\".length > 5, \"There must be at least 5 chars\" );\r\n         */\r\n        ok: function( result, msg ) {\r\n            if ( !config.current ) {\r\n                throw new Error( \"ok() assertion outside test context, was \" + sourceFromStacktrace(2) );\r\n            }\r\n            result = !!result;\r\n            msg = msg || ( result ? \"okay\" : \"failed\" );\r\n\r\n            var source,\r\n                details = {\r\n                    module: config.current.module,\r\n                    name: config.current.testName,\r\n                    result: result,\r\n                    message: msg\r\n                };\r\n\r\n            msg = \"<span class='test-message'>\" + escapeText( msg ) + \"</span>\";\r\n\r\n            if ( !result ) {\r\n                source = sourceFromStacktrace( 2 );\r\n                if ( source ) {\r\n                    details.source = source;\r\n                    msg += \"<table><tr class='test-source'><th>Source: </th><td><pre>\" +\r\n                        escapeText( source ) +\r\n                        \"</pre></td></tr></table>\";\r\n                }\r\n            }\r\n            runLoggingCallbacks( \"log\", QUnit, details );\r\n            config.current.assertions.push({\r\n                result: result,\r\n                message: msg\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Assert that the first two arguments are equal, with an optional message.\r\n         * Prints out both actual and expected values.\r\n         * @name equal\r\n         * @function\r\n         * @example equal( format( \"Received {0} bytes.\", 2), \"Received 2 bytes.\", \"format() replaces {0} with next argument\" );\r\n         */\r\n        equal: function( actual, expected, message ) {\r\n            /*jshint eqeqeq:false */\r\n            QUnit.push( expected == actual, actual, expected, message );\r\n        },\r\n\r\n        /**\r\n         * @name notEqual\r\n         * @function\r\n         */\r\n        notEqual: function( actual, expected, message ) {\r\n            /*jshint eqeqeq:false */\r\n            QUnit.push( expected != actual, actual, expected, message );\r\n        },\r\n\r\n        /**\r\n         * @name propEqual\r\n         * @function\r\n         */\r\n        propEqual: function( actual, expected, message ) {\r\n            actual = objectValues(actual);\r\n            expected = objectValues(expected);\r\n            QUnit.push( QUnit.equiv(actual, expected), actual, expected, message );\r\n        },\r\n\r\n        /**\r\n         * @name notPropEqual\r\n         * @function\r\n         */\r\n        notPropEqual: function( actual, expected, message ) {\r\n            actual = objectValues(actual);\r\n            expected = objectValues(expected);\r\n            QUnit.push( !QUnit.equiv(actual, expected), actual, expected, message );\r\n        },\r\n\r\n        /**\r\n         * @name deepEqual\r\n         * @function\r\n         */\r\n        deepEqual: function( actual, expected, message ) {\r\n            QUnit.push( QUnit.equiv(actual, expected), actual, expected, message );\r\n        },\r\n\r\n        /**\r\n         * @name notDeepEqual\r\n         * @function\r\n         */\r\n        notDeepEqual: function( actual, expected, message ) {\r\n            QUnit.push( !QUnit.equiv(actual, expected), actual, expected, message );\r\n        },\r\n\r\n        /**\r\n         * @name strictEqual\r\n         * @function\r\n         */\r\n        strictEqual: function( actual, expected, message ) {\r\n            QUnit.push( expected === actual, actual, expected, message );\r\n        },\r\n\r\n        /**\r\n         * @name notStrictEqual\r\n         * @function\r\n         */\r\n        notStrictEqual: function( actual, expected, message ) {\r\n            QUnit.push( expected !== actual, actual, expected, message );\r\n        },\r\n\r\n        \"throws\": function( block, expected, message ) {\r\n            var actual,\r\n                expectedOutput = expected,\r\n                ok = false;\r\n\r\n            // 'expected' is optional\r\n            if ( !message && typeof expected === \"string\" ) {\r\n                message = expected;\r\n                expected = null;\r\n            }\r\n\r\n            config.current.ignoreGlobalErrors = true;\r\n            try {\r\n                block.call( config.current.testEnvironment );\r\n            } catch (e) {\r\n                actual = e;\r\n            }\r\n            config.current.ignoreGlobalErrors = false;\r\n\r\n            if ( actual ) {\r\n\r\n                // we don't want to validate thrown error\r\n                if ( !expected ) {\r\n                    ok = true;\r\n                    expectedOutput = null;\r\n\r\n                    // expected is an Error object\r\n                } else if ( expected instanceof Error ) {\r\n                    ok = actual instanceof Error &&\r\n                        actual.name === expected.name &&\r\n                        actual.message === expected.message;\r\n\r\n                    // expected is a regexp\r\n                } else if ( QUnit.objectType( expected ) === \"regexp\" ) {\r\n                    ok = expected.test( errorString( actual ) );\r\n\r\n                    // expected is a string\r\n                } else if ( QUnit.objectType( expected ) === \"string\" ) {\r\n                    ok = expected === errorString( actual );\r\n\r\n                    // expected is a constructor\r\n                } else if ( actual instanceof expected ) {\r\n                    ok = true;\r\n\r\n                    // expected is a validation function which returns true is validation passed\r\n                } else if ( expected.call( {}, actual ) === true ) {\r\n                    expectedOutput = null;\r\n                    ok = true;\r\n                }\r\n\r\n                QUnit.push( ok, actual, expectedOutput, message );\r\n            } else {\r\n                QUnit.pushFailure( message, null, \"No exception was thrown.\" );\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @deprecated since 1.8.0\r\n     * Kept assertion helpers in root for backwards compatibility.\r\n     */\r\n    extend( QUnit.constructor.prototype, assert );\r\n\r\n    /**\r\n     * @deprecated since 1.9.0\r\n     * Kept to avoid TypeErrors for undefined methods.\r\n     */\r\n    QUnit.constructor.prototype.raises = function() {\r\n        QUnit.push( false, false, false, \"QUnit.raises has been deprecated since 2012 (fad3c1ea), use QUnit.throws instead\" );\r\n    };\r\n\r\n    /**\r\n     * @deprecated since 1.0.0, replaced with error pushes since 1.3.0\r\n     * Kept to avoid TypeErrors for undefined methods.\r\n     */\r\n    QUnit.constructor.prototype.equals = function() {\r\n        QUnit.push( false, false, false, \"QUnit.equals has been deprecated since 2009 (e88049a0), use QUnit.equal instead\" );\r\n    };\r\n    QUnit.constructor.prototype.same = function() {\r\n        QUnit.push( false, false, false, \"QUnit.same has been deprecated since 2009 (e88049a0), use QUnit.deepEqual instead\" );\r\n    };\r\n\r\n// Test for equality any JavaScript type.\r\n// Author: Philippe Rathé <prathe@gmail.com>\r\n    QUnit.equiv = (function() {\r\n\r\n        // Call the o related callback with the given arguments.\r\n        function bindCallbacks( o, callbacks, args ) {\r\n            var prop = QUnit.objectType( o );\r\n            if ( prop ) {\r\n                if ( QUnit.objectType( callbacks[ prop ] ) === \"function\" ) {\r\n                    return callbacks[ prop ].apply( callbacks, args );\r\n                } else {\r\n                    return callbacks[ prop ]; // or undefined\r\n                }\r\n            }\r\n        }\r\n\r\n        // the real equiv function\r\n        var innerEquiv,\r\n        // stack to decide between skip/abort functions\r\n            callers = [],\r\n        // stack to avoiding loops from circular referencing\r\n            parents = [],\r\n            parentsB = [],\r\n\r\n            getProto = Object.getPrototypeOf || function ( obj ) {\r\n                /*jshint camelcase:false */\r\n                return obj.__proto__;\r\n            },\r\n            callbacks = (function () {\r\n\r\n                // for string, boolean, number and null\r\n                function useStrictEquality( b, a ) {\r\n                    /*jshint eqeqeq:false */\r\n                    if ( b instanceof a.constructor || a instanceof b.constructor ) {\r\n                        // to catch short annotation VS 'new' annotation of a\r\n                        // declaration\r\n                        // e.g. var i = 1;\r\n                        // var j = new Number(1);\r\n                        return a == b;\r\n                    } else {\r\n                        return a === b;\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    \"string\": useStrictEquality,\r\n                    \"boolean\": useStrictEquality,\r\n                    \"number\": useStrictEquality,\r\n                    \"null\": useStrictEquality,\r\n                    \"undefined\": useStrictEquality,\r\n\r\n                    \"nan\": function( b ) {\r\n                        return isNaN( b );\r\n                    },\r\n\r\n                    \"date\": function( b, a ) {\r\n                        return QUnit.objectType( b ) === \"date\" && a.valueOf() === b.valueOf();\r\n                    },\r\n\r\n                    \"regexp\": function( b, a ) {\r\n                        return QUnit.objectType( b ) === \"regexp\" &&\r\n                            // the regex itself\r\n                            a.source === b.source &&\r\n                            // and its modifiers\r\n                            a.global === b.global &&\r\n                            // (gmi) ...\r\n                            a.ignoreCase === b.ignoreCase &&\r\n                            a.multiline === b.multiline &&\r\n                            a.sticky === b.sticky;\r\n                    },\r\n\r\n                    // - skip when the property is a method of an instance (OOP)\r\n                    // - abort otherwise,\r\n                    // initial === would have catch identical references anyway\r\n                    \"function\": function() {\r\n                        var caller = callers[callers.length - 1];\r\n                        return caller !== Object && typeof caller !== \"undefined\";\r\n                    },\r\n\r\n                    \"array\": function( b, a ) {\r\n                        var i, j, len, loop, aCircular, bCircular;\r\n\r\n                        // b could be an object literal here\r\n                        if ( QUnit.objectType( b ) !== \"array\" ) {\r\n                            return false;\r\n                        }\r\n\r\n                        len = a.length;\r\n                        if ( len !== b.length ) {\r\n                            // safe and faster\r\n                            return false;\r\n                        }\r\n\r\n                        // track reference to avoid circular references\r\n                        parents.push( a );\r\n                        parentsB.push( b );\r\n                        for ( i = 0; i < len; i++ ) {\r\n                            loop = false;\r\n                            for ( j = 0; j < parents.length; j++ ) {\r\n                                aCircular = parents[j] === a[i];\r\n                                bCircular = parentsB[j] === b[i];\r\n                                if ( aCircular || bCircular ) {\r\n                                    if ( a[i] === b[i] || aCircular && bCircular ) {\r\n                                        loop = true;\r\n                                    } else {\r\n                                        parents.pop();\r\n                                        parentsB.pop();\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if ( !loop && !innerEquiv(a[i], b[i]) ) {\r\n                                parents.pop();\r\n                                parentsB.pop();\r\n                                return false;\r\n                            }\r\n                        }\r\n                        parents.pop();\r\n                        parentsB.pop();\r\n                        return true;\r\n                    },\r\n\r\n                    \"object\": function( b, a ) {\r\n                        /*jshint forin:false */\r\n                        var i, j, loop, aCircular, bCircular,\r\n                        // Default to true\r\n                            eq = true,\r\n                            aProperties = [],\r\n                            bProperties = [];\r\n\r\n                        // comparing constructors is more strict than using\r\n                        // instanceof\r\n                        if ( a.constructor !== b.constructor ) {\r\n                            // Allow objects with no prototype to be equivalent to\r\n                            // objects with Object as their constructor.\r\n                            if ( !(( getProto(a) === null && getProto(b) === Object.prototype ) ||\r\n                                ( getProto(b) === null && getProto(a) === Object.prototype ) ) ) {\r\n                                return false;\r\n                            }\r\n                        }\r\n\r\n                        // stack constructor before traversing properties\r\n                        callers.push( a.constructor );\r\n\r\n                        // track reference to avoid circular references\r\n                        parents.push( a );\r\n                        parentsB.push( b );\r\n\r\n                        // be strict: don't ensure hasOwnProperty and go deep\r\n                        for ( i in a ) {\r\n                            loop = false;\r\n                            for ( j = 0; j < parents.length; j++ ) {\r\n                                aCircular = parents[j] === a[i];\r\n                                bCircular = parentsB[j] === b[i];\r\n                                if ( aCircular || bCircular ) {\r\n                                    if ( a[i] === b[i] || aCircular && bCircular ) {\r\n                                        loop = true;\r\n                                    } else {\r\n                                        eq = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            aProperties.push(i);\r\n                            if ( !loop && !innerEquiv(a[i], b[i]) ) {\r\n                                eq = false;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        parents.pop();\r\n                        parentsB.pop();\r\n                        callers.pop(); // unstack, we are done\r\n\r\n                        for ( i in b ) {\r\n                            bProperties.push( i ); // collect b's properties\r\n                        }\r\n\r\n                        // Ensures identical properties name\r\n                        return eq && innerEquiv( aProperties.sort(), bProperties.sort() );\r\n                    }\r\n                };\r\n            }());\r\n\r\n        innerEquiv = function() { // can take multiple arguments\r\n            var args = [].slice.apply( arguments );\r\n            if ( args.length < 2 ) {\r\n                return true; // end transition\r\n            }\r\n\r\n            return (function( a, b ) {\r\n                if ( a === b ) {\r\n                    return true; // catch the most you can\r\n                } else if ( a === null || b === null || typeof a === \"undefined\" ||\r\n                    typeof b === \"undefined\" ||\r\n                    QUnit.objectType(a) !== QUnit.objectType(b) ) {\r\n                    return false; // don't lose time with error prone cases\r\n                } else {\r\n                    return bindCallbacks(a, callbacks, [ b, a ]);\r\n                }\r\n\r\n                // apply transition with (1..n) arguments\r\n            }( args[0], args[1] ) && innerEquiv.apply( this, args.splice(1, args.length - 1 )) );\r\n        };\r\n\r\n        return innerEquiv;\r\n    }());\r\n\r\n    /**\r\n     * jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |\r\n     * http://flesler.blogspot.com Licensed under BSD\r\n     * (http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008\r\n     *\r\n     * @projectDescription Advanced and extensible data dumping for Javascript.\r\n     * @version 1.0.0\r\n     * @author Ariel Flesler\r\n     * @link {http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}\r\n     */\r\n    QUnit.jsDump = (function() {\r\n        function quote( str ) {\r\n            return \"\\\"\" + str.toString().replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\r\n        }\r\n        function literal( o ) {\r\n            return o + \"\";\r\n        }\r\n        function join( pre, arr, post ) {\r\n            var s = jsDump.separator(),\r\n                base = jsDump.indent(),\r\n                inner = jsDump.indent(1);\r\n            if ( arr.join ) {\r\n                arr = arr.join( \",\" + s + inner );\r\n            }\r\n            if ( !arr ) {\r\n                return pre + post;\r\n            }\r\n            return [ pre, inner + arr, base + post ].join(s);\r\n        }\r\n        function array( arr, stack ) {\r\n            var i = arr.length, ret = new Array(i);\r\n            this.up();\r\n            while ( i-- ) {\r\n                ret[i] = this.parse( arr[i] , undefined , stack);\r\n            }\r\n            this.down();\r\n            return join( \"[\", ret, \"]\" );\r\n        }\r\n\r\n        var reName = /^function (\\w+)/,\r\n            jsDump = {\r\n                // type is used mostly internally, you can fix a (custom)type in advance\r\n                parse: function( obj, type, stack ) {\r\n                    stack = stack || [ ];\r\n                    var inStack, res,\r\n                        parser = this.parsers[ type || this.typeOf(obj) ];\r\n\r\n                    type = typeof parser;\r\n                    inStack = inArray( obj, stack );\r\n\r\n                    if ( inStack !== -1 ) {\r\n                        return \"recursion(\" + (inStack - stack.length) + \")\";\r\n                    }\r\n                    if ( type === \"function\" )  {\r\n                        stack.push( obj );\r\n                        res = parser.call( this, obj, stack );\r\n                        stack.pop();\r\n                        return res;\r\n                    }\r\n                    return ( type === \"string\" ) ? parser : this.parsers.error;\r\n                },\r\n                typeOf: function( obj ) {\r\n                    var type;\r\n                    if ( obj === null ) {\r\n                        type = \"null\";\r\n                    } else if ( typeof obj === \"undefined\" ) {\r\n                        type = \"undefined\";\r\n                    } else if ( QUnit.is( \"regexp\", obj) ) {\r\n                        type = \"regexp\";\r\n                    } else if ( QUnit.is( \"date\", obj) ) {\r\n                        type = \"date\";\r\n                    } else if ( QUnit.is( \"function\", obj) ) {\r\n                        type = \"function\";\r\n                    } else if ( typeof obj.setInterval !== undefined && typeof obj.document !== \"undefined\" && typeof obj.nodeType === \"undefined\" ) {\r\n                        type = \"window\";\r\n                    } else if ( obj.nodeType === 9 ) {\r\n                        type = \"document\";\r\n                    } else if ( obj.nodeType ) {\r\n                        type = \"node\";\r\n                    } else if (\r\n                    // native arrays\r\n                        toString.call( obj ) === \"[object Array]\" ||\r\n                            // NodeList objects\r\n                            ( typeof obj.length === \"number\" && typeof obj.item !== \"undefined\" && ( obj.length ? obj.item(0) === obj[0] : ( obj.item( 0 ) === null && typeof obj[0] === \"undefined\" ) ) )\r\n                        ) {\r\n                        type = \"array\";\r\n                    } else if ( obj.constructor === Error.prototype.constructor ) {\r\n                        type = \"error\";\r\n                    } else {\r\n                        type = typeof obj;\r\n                    }\r\n                    return type;\r\n                },\r\n                separator: function() {\r\n                    return this.multiline ?\tthis.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&nbsp;\" : \" \";\r\n                },\r\n                // extra can be a number, shortcut for increasing-calling-decreasing\r\n                indent: function( extra ) {\r\n                    if ( !this.multiline ) {\r\n                        return \"\";\r\n                    }\r\n                    var chr = this.indentChar;\r\n                    if ( this.HTML ) {\r\n                        chr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&nbsp;\" );\r\n                    }\r\n                    return new Array( this.depth + ( extra || 0 ) ).join(chr);\r\n                },\r\n                up: function( a ) {\r\n                    this.depth += a || 1;\r\n                },\r\n                down: function( a ) {\r\n                    this.depth -= a || 1;\r\n                },\r\n                setParser: function( name, parser ) {\r\n                    this.parsers[name] = parser;\r\n                },\r\n                // The next 3 are exposed so you can use them\r\n                quote: quote,\r\n                literal: literal,\r\n                join: join,\r\n                //\r\n                depth: 1,\r\n                // This is the list of parsers, to modify them, use jsDump.setParser\r\n                parsers: {\r\n                    window: \"[Window]\",\r\n                    document: \"[Document]\",\r\n                    error: function(error) {\r\n                        return \"Error(\\\"\" + error.message + \"\\\")\";\r\n                    },\r\n                    unknown: \"[Unknown]\",\r\n                    \"null\": \"null\",\r\n                    \"undefined\": \"undefined\",\r\n                    \"function\": function( fn ) {\r\n                        var ret = \"function\",\r\n                        // functions never have name in IE\r\n                            name = \"name\" in fn ? fn.name : (reName.exec(fn) || [])[1];\r\n\r\n                        if ( name ) {\r\n                            ret += \" \" + name;\r\n                        }\r\n                        ret += \"( \";\r\n\r\n                        ret = [ ret, QUnit.jsDump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\r\n                        return join( ret, QUnit.jsDump.parse(fn,\"functionCode\" ), \"}\" );\r\n                    },\r\n                    array: array,\r\n                    nodelist: array,\r\n                    \"arguments\": array,\r\n                    object: function( map, stack ) {\r\n                        /*jshint forin:false */\r\n                        var ret = [ ], keys, key, val, i;\r\n                        QUnit.jsDump.up();\r\n                        keys = [];\r\n                        for ( key in map ) {\r\n                            keys.push( key );\r\n                        }\r\n                        keys.sort();\r\n                        for ( i = 0; i < keys.length; i++ ) {\r\n                            key = keys[ i ];\r\n                            val = map[ key ];\r\n                            ret.push( QUnit.jsDump.parse( key, \"key\" ) + \": \" + QUnit.jsDump.parse( val, undefined, stack ) );\r\n                        }\r\n                        QUnit.jsDump.down();\r\n                        return join( \"{\", ret, \"}\" );\r\n                    },\r\n                    node: function( node ) {\r\n                        var len, i, val,\r\n                            open = QUnit.jsDump.HTML ? \"&lt;\" : \"<\",\r\n                            close = QUnit.jsDump.HTML ? \"&gt;\" : \">\",\r\n                            tag = node.nodeName.toLowerCase(),\r\n                            ret = open + tag,\r\n                            attrs = node.attributes;\r\n\r\n                        if ( attrs ) {\r\n                            for ( i = 0, len = attrs.length; i < len; i++ ) {\r\n                                val = attrs[i].nodeValue;\r\n                                // IE6 includes all attributes in .attributes, even ones not explicitly set.\r\n                                // Those have values like undefined, null, 0, false, \"\" or \"inherit\".\r\n                                if ( val && val !== \"inherit\" ) {\r\n                                    ret += \" \" + attrs[i].nodeName + \"=\" + QUnit.jsDump.parse( val, \"attribute\" );\r\n                                }\r\n                            }\r\n                        }\r\n                        ret += close;\r\n\r\n                        // Show content of TextNode or CDATASection\r\n                        if ( node.nodeType === 3 || node.nodeType === 4 ) {\r\n                            ret += node.nodeValue;\r\n                        }\r\n\r\n                        return ret + open + \"/\" + tag + close;\r\n                    },\r\n                    // function calls it internally, it's the arguments part of the function\r\n                    functionArgs: function( fn ) {\r\n                        var args,\r\n                            l = fn.length;\r\n\r\n                        if ( !l ) {\r\n                            return \"\";\r\n                        }\r\n\r\n                        args = new Array(l);\r\n                        while ( l-- ) {\r\n                            // 97 is 'a'\r\n                            args[l] = String.fromCharCode(97+l);\r\n                        }\r\n                        return \" \" + args.join( \", \" ) + \" \";\r\n                    },\r\n                    // object calls it internally, the key part of an item in a map\r\n                    key: quote,\r\n                    // function calls it internally, it's the content of the function\r\n                    functionCode: \"[code]\",\r\n                    // node calls it internally, it's an html attribute value\r\n                    attribute: quote,\r\n                    string: quote,\r\n                    date: quote,\r\n                    regexp: literal,\r\n                    number: literal,\r\n                    \"boolean\": literal\r\n                },\r\n                // if true, entities are escaped ( <, >, \\t, space and \\n )\r\n                HTML: false,\r\n                // indentation unit\r\n                indentChar: \"  \",\r\n                // if true, items in a collection, are separated by a \\n, else just a space.\r\n                multiline: true\r\n            };\r\n\r\n        return jsDump;\r\n    }());\r\n\r\n    /*\r\n     * Javascript Diff Algorithm\r\n     *  By John Resig (http://ejohn.org/)\r\n     *  Modified by Chu Alan \"sprite\"\r\n     *\r\n     * Released under the MIT license.\r\n     *\r\n     * More Info:\r\n     *  http://ejohn.org/projects/javascript-diff-algorithm/\r\n     *\r\n     * Usage: QUnit.diff(expected, actual)\r\n     *\r\n     * QUnit.diff( \"the quick brown fox jumped over\", \"the quick fox jumps over\" ) == \"the  quick <del>brown </del> fox <del>jumped </del><ins>jumps </ins> over\"\r\n     */\r\n    QUnit.diff = (function() {\r\n        /*jshint eqeqeq:false, eqnull:true */\r\n        function diff( o, n ) {\r\n            var i,\r\n                ns = {},\r\n                os = {};\r\n\r\n            for ( i = 0; i < n.length; i++ ) {\r\n                if ( !hasOwn.call( ns, n[i] ) ) {\r\n                    ns[ n[i] ] = {\r\n                        rows: [],\r\n                        o: null\r\n                    };\r\n                }\r\n                ns[ n[i] ].rows.push( i );\r\n            }\r\n\r\n            for ( i = 0; i < o.length; i++ ) {\r\n                if ( !hasOwn.call( os, o[i] ) ) {\r\n                    os[ o[i] ] = {\r\n                        rows: [],\r\n                        n: null\r\n                    };\r\n                }\r\n                os[ o[i] ].rows.push( i );\r\n            }\r\n\r\n            for ( i in ns ) {\r\n                if ( hasOwn.call( ns, i ) ) {\r\n                    if ( ns[i].rows.length === 1 && hasOwn.call( os, i ) && os[i].rows.length === 1 ) {\r\n                        n[ ns[i].rows[0] ] = {\r\n                            text: n[ ns[i].rows[0] ],\r\n                            row: os[i].rows[0]\r\n                        };\r\n                        o[ os[i].rows[0] ] = {\r\n                            text: o[ os[i].rows[0] ],\r\n                            row: ns[i].rows[0]\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            for ( i = 0; i < n.length - 1; i++ ) {\r\n                if ( n[i].text != null && n[ i + 1 ].text == null && n[i].row + 1 < o.length && o[ n[i].row + 1 ].text == null &&\r\n                    n[ i + 1 ] == o[ n[i].row + 1 ] ) {\r\n\r\n                    n[ i + 1 ] = {\r\n                        text: n[ i + 1 ],\r\n                        row: n[i].row + 1\r\n                    };\r\n                    o[ n[i].row + 1 ] = {\r\n                        text: o[ n[i].row + 1 ],\r\n                        row: i + 1\r\n                    };\r\n                }\r\n            }\r\n\r\n            for ( i = n.length - 1; i > 0; i-- ) {\r\n                if ( n[i].text != null && n[ i - 1 ].text == null && n[i].row > 0 && o[ n[i].row - 1 ].text == null &&\r\n                    n[ i - 1 ] == o[ n[i].row - 1 ]) {\r\n\r\n                    n[ i - 1 ] = {\r\n                        text: n[ i - 1 ],\r\n                        row: n[i].row - 1\r\n                    };\r\n                    o[ n[i].row - 1 ] = {\r\n                        text: o[ n[i].row - 1 ],\r\n                        row: i - 1\r\n                    };\r\n                }\r\n            }\r\n\r\n            return {\r\n                o: o,\r\n                n: n\r\n            };\r\n        }\r\n\r\n        return function( o, n ) {\r\n            o = o.replace( /\\s+$/, \"\" );\r\n            n = n.replace( /\\s+$/, \"\" );\r\n\r\n            var i, pre,\r\n                str = \"\",\r\n                out = diff( o === \"\" ? [] : o.split(/\\s+/), n === \"\" ? [] : n.split(/\\s+/) ),\r\n                oSpace = o.match(/\\s+/g),\r\n                nSpace = n.match(/\\s+/g);\r\n\r\n            if ( oSpace == null ) {\r\n                oSpace = [ \" \" ];\r\n            }\r\n            else {\r\n                oSpace.push( \" \" );\r\n            }\r\n\r\n            if ( nSpace == null ) {\r\n                nSpace = [ \" \" ];\r\n            }\r\n            else {\r\n                nSpace.push( \" \" );\r\n            }\r\n\r\n            if ( out.n.length === 0 ) {\r\n                for ( i = 0; i < out.o.length; i++ ) {\r\n                    str += \"<del>\" + out.o[i] + oSpace[i] + \"</del>\";\r\n                }\r\n            }\r\n            else {\r\n                if ( out.n[0].text == null ) {\r\n                    for ( n = 0; n < out.o.length && out.o[n].text == null; n++ ) {\r\n                        str += \"<del>\" + out.o[n] + oSpace[n] + \"</del>\";\r\n                    }\r\n                }\r\n\r\n                for ( i = 0; i < out.n.length; i++ ) {\r\n                    if (out.n[i].text == null) {\r\n                        str += \"<ins>\" + out.n[i] + nSpace[i] + \"</ins>\";\r\n                    }\r\n                    else {\r\n                        // `pre` initialized at top of scope\r\n                        pre = \"\";\r\n\r\n                        for ( n = out.n[i].row + 1; n < out.o.length && out.o[n].text == null; n++ ) {\r\n                            pre += \"<del>\" + out.o[n] + oSpace[n] + \"</del>\";\r\n                        }\r\n                        str += \" \" + out.n[i].text + nSpace[i] + pre;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return str;\r\n        };\r\n    }());\r\n\r\n// For browser, export only select globals\r\n    if ( typeof window !== \"undefined\" ) {\r\n        extend( window, QUnit.constructor.prototype );\r\n        window.QUnit = QUnit;\r\n    }\r\n\r\n// For CommonJS environments, export everything\r\n    if ( typeof module !== \"undefined\" && module.exports ) {\r\n        module.exports = QUnit;\r\n    }\r\n\r\n\r\n// Get a reference to the global object, like window in browsers\r\n}( (function() {\r\n        return this;\r\n    })() ));","function EditTimesheetViewModel() {\r\n\r\n    var self = this;\r\n\r\n    self.curr_date = ko.observable(moment().format('YYYY-MM-DD'));\r\n\r\n    self.isNew = ko.observable(false);\r\n\r\n    self.user = ko.observable();\r\n\r\n    self.timesheet = ko.observable(new Timesheet());\r\n\r\n    self.shifts = ko.observableArray([new Shift(), new Shift(), new Shift(), new Shift(), new Shift(), new Shift(), new Shift()]);\r\n\r\n    self.timesheet_found= ko.observable(false);\r\n\r\n    self.timesheet_dates = function(offset) {\r\n        return moment(self.curr_date(), 'YYYY-MM-DD').isoWeekday(offset).format('ddd, Do MMM');\r\n    }.bind(self);\r\n\r\n    self.saved = ko.observable(true);\r\n\r\n    self.disable = ko.computed({\r\n        read: function() {\r\n            return !self.saved() && self.timesheet().user_worked();\r\n        },\r\n        owner: this\r\n    });\r\n\r\n    self.is_saved = function (bool) {\r\n        self.saved(bool);\r\n    }.bind(self);\r\n\r\n    self.draft_saved = ko.observable(true);\r\n\r\n    self.is_draft_saved = function (bool) {\r\n        self.draft_saved(bool);\r\n    }.bind(self);\r\n\r\n    self.error_modal = {\r\n        error_message: ko.observable(),\r\n        error_code: ko.observable(),\r\n        show: ko.observable(false), /* Set to true to show initially */\r\n        body: ko.observable(),\r\n        header: ko.observable(),\r\n        onClose: function() {}\r\n    };\r\n\r\n    self.copyShift = function(oldshift, newshift) {\r\n        newshift.addShift(self.convertShiftToCopy(oldshift));\r\n        self.is_draft_saved(false);\r\n    };\r\n\r\n    self.fillShifts = function() {\r\n        for(var i = 1; i < 5; i++) {\r\n            self.copyShift(self.shifts()[0], self.shifts()[i]);\r\n        }\r\n    };\r\n\r\n    self.convertShiftToCopy = function(shift) {\r\n        return {start_time: shift.start_time(), finish_time: shift.finish_time(), notes: shift.notes(), number_of_units: shift.number_of_units(), timesheetbreak: [{break_length: shift.break()}]};\r\n    };\r\n\r\n    self.showErrorModal = function(error_message, error_code) {\r\n        self.error_modal.show(true);\r\n        self.error_modal.error_message(error_message);\r\n        self.error_modal.error_code(error_code);\r\n\r\n        if(error_code < 500) {\r\n            self.error_modal.header(\"Notice\");\r\n            self.error_modal.body(\"Please Note:\");\r\n        } else if(error_code < 1000) {\r\n            self.error_modal.header(\"Warning\");\r\n            self.error_modal.body(\"Warning:\");\r\n        } else if(error_code < 1500) {\r\n            self.error_modal.header(\"Error\");\r\n            self.error_modal.body(\"The application has encountered an error:\");\r\n        } else {\r\n            self.error_modal.header(\"Fatal Error\");\r\n            self.error_modal.body(\"The application has encountered a fatal error:\");\r\n        }\r\n    };\r\n\r\n    self.total_hours = ko.computed({\r\n        read: function () {\r\n            var total = 0;\r\n            $.each(self.shifts(), function(key, val) {\r\n                if(val.shift_length() >= 5) {\r\n                    total += val.shift_length() - 0.5;\r\n                } else if (val.shift_length() != \"\") {\r\n                    total += val.shift_length();\r\n                }\r\n            });\r\n            return total;\r\n        },\r\n        owner: this\r\n    });\r\n\r\n    self.prevWeek = function() {\r\n        self.curr_date(moment(self.curr_date(), \"YYYY-MM-DD\").add('w', -1).format(\"YYYY-MM-DD\"));\r\n    };\r\n    self.nextWeek = function() {\r\n        self.curr_date(moment(self.curr_date(), \"YYYY-MM-DD\").add('w', 1).format(\"YYYY-MM-DD\"));\r\n    };\r\n\r\n    self.getTimesheet = function() {\r\n        //var data = { date: $('#timesheet_date').val() };\r\n        var data = { date: self.curr_date };\r\n\r\n        $.getJSON(\"timesheet/timesheet\", data, function(allData) {\r\n            if(allData['result'] == 0) {\r\n                self.timesheet().addTimesheet(allData.data.timesheet);\r\n                self.timesheet_found(true);\r\n\r\n                self.user(new Employee(allData.data.user));\r\n\r\n                $.each(self.shifts(), function(key, val) {\r\n                    val.clearShift();\r\n                    val.setDateFromArray(key+1, self.timesheet().date_start());\r\n                });\r\n\r\n                $.each(allData.data.timesheet.timesheetshift, function(key, val) {\r\n                    if(typeof val !== 'undefined'){\r\n                        self.shifts()[moment(val.start_time).isoWeekday()-1].addShift(val);\r\n                    }\r\n                });\r\n                history.pushState({}, null, \"edit_timesheet?date=\" + self.curr_date());\r\n                self.isNew(false);\r\n            } else {\r\n                self.showErrorModal(allData['result'], allData['message']);\r\n            }\r\n            self.is_saved(self.timesheet().approval_stage() == 'submitted' || self.timesheet().approval_stage() == 'approved');\r\n            self.is_draft_saved(true);\r\n        });\r\n\r\n    };\r\n\r\n    self.saveTimesheet = function(approval_stage) {\r\n        var is_valid = true;\r\n        self.timesheet_found(false);\r\n        $.each(self.shifts(), function(key, val) {\r\n            if(typeof val !== 'undefined') {\r\n                if((val.start_time() == \"\") != (val.finish_time() == \"\")) {\r\n                    is_valid = false;\r\n                } else if(val.shift_length <= 0) {\r\n                    is_valid = false;\r\n                }\r\n            }\r\n\r\n        });\r\n        if(is_valid) {\r\n            self.timesheet().approval_stage(approval_stage);\r\n            var jsonData = ko.toJSON(self);\r\n            $.post(\r\n                \"timesheet/timesheet\",\r\n                {data: jsonData},\r\n                function(returnedData) {\r\n                    if(approval_stage == 'submitted') {\r\n                        self.is_saved(true);\r\n                    }\r\n                    self.is_draft_saved(true);\r\n                    self.getTimesheet();\r\n                });\r\n        } else {\r\n            alert(\"Timesheet values are invalid\");\r\n        }\r\n        self.isNew(true);\r\n    };\r\n\r\n    if($.urlParam('date') != null) {\r\n        if(moment($.urlParam('date'), 'YYYY-MM-DD').isValid()) {\r\n            self.curr_date($.urlParam('date'));\r\n            self.getTimesheet();\r\n        }\r\n    }\r\n}\r\n\r\nvar edit_timesheet_view_model = new EditTimesheetViewModel();\r\n\r\n// Activates knockout.js\r\nko.applyBindings(edit_timesheet_view_model);","module('edit_timesheet');\r\n\r\n(window.alert = function(msg) { ok(true, msg) })\r\n\r\nasyncTest('make sure timesheet opened successfully', function() {\r\n    var view_model = new EditTimesheetViewModel();\r\n\r\n    view_model.getTimesheet();\r\n\r\n    setTimeout(function() {\r\n        start();\r\n        ok((view_model.timesheet() !== undefined), 'timesheet exists');\r\n        ok(view_model.timesheet_found(), 'timesheet found');\r\n        ok((view_model.user() !== undefined), 'user exists');\r\n    }, 3000);\r\n});"],"sourceRoot":"/source/"}