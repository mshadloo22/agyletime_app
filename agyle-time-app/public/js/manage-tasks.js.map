{"version":3,"sources":["Task.js","knockout.js"],"names":[],"mappingsfile":"manage-tasks.js","sourcesContent":["function Task() {\r\n    this.id = ko.observable(\"\");\r\n    this.name = ko.observable(\"\");\r\n    this.description = ko.observable(\"\");\r\n    this.identifier = ko.observable(\"\");\r\n    this.color = ko.observable(\"\");\r\n    this.available = ko.observable(false);\r\n    this.paid = ko.observable(false);\r\n    this.planned = ko.observable(false);\r\n    this.timeout = ko.observable(false);\r\n    this.leave = ko.observable(false);\r\n    this.break = ko.observable(false);\r\n    this.saved = ko.observable(true);\r\n    this.loaded = false;\r\n\r\n    this.isBreak = ko.computed({\r\n        read: function(){\r\n            return this.break();\r\n        },\r\n        write: function(data) {\r\n            this.break(data);\r\n        },\r\n        owner: this\r\n    })\r\n}\r\n\r\nTask.prototype.addTask = function(task) {\r\n    this.id(task.id);\r\n    this.name(task.name);\r\n    this.description(task.description);\r\n    this.identifier(task.identifier);\r\n    this.color(task.color);\r\n    this.available(task.available);\r\n    this.paid(task.paid);\r\n    this.planned(task.planned);\r\n    this.leave(task.leave);\r\n    this.break(task.break);\r\n    this.timeout(task.timeout);\r\n    return this;\r\n};\r\n\r\nTask.prototype.setTimeout = function(parent) {\r\n    //This.loaded hax to get around KO executing everything on first load. No1 Solution NA\r\n    if(this.loaded == true) {\r\n        ko.utils.arrayForEach(parent.tasks(), function (child) {\r\n            child.timeout(false);\r\n        });\r\n        this.timeout(true);\r\n    }else{\r\n        this.loaded = true;\r\n    }\r\n};\r\n\r\nTask.prototype.radioTimeoutSelected = function(){\r\n    if(this.timeout){\r\n        return this.identifier;\r\n    }else{\r\n        return \"\";\r\n    }\r\n};","function ManageTasksViewModel() {\r\n    var self = this;\r\n\r\n    self.tasks = ko.observableArray([]);\r\n    self.saving = ko.observable(false);\r\n\r\n    self.createTask = function() {\r\n        var task = new Task();\r\n        task.saved(false);\r\n        self.tasks.push(task);\r\n        //$('.colpick').colorpicker({'format':'hex'});\r\n\r\n    };\r\n\r\n    self.save = function() {\r\n        var self = this;\r\n        self.saving(true);\r\n        $.post(\r\n            \"task/tasks\",\r\n            {data: JSON.stringify(ko.toJS(self.tasks))},\r\n            function(returnedData) {\r\n                self.saving(false);\r\n                ko.utils.arrayForEach(self.tasks(), function (task) {\r\n                    task.saved(true);\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    $.getJSON(\"task/tasks\", [], function(allData) {\r\n        if(allData['result'] == 0) {\r\n            self.tasks($.map(allData.data, function(val, key) { var task = new Task(); return task.addTask(val)}));\r\n        }\r\n        //$('.colpick').colorpicker({'format':'hex'});\r\n    });\r\n}\r\n\r\n\r\nko.applyBindings(new ManageTasksViewModel());"],"sourceRoot":"/source/"}